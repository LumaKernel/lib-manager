"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.format = format;
exports.clangFormat = clangFormat;

require("source-map-support/register");

var _child_process = require("child_process");

var _fsExtra = require("fs-extra");

var _path = _interopRequireDefault(require("path"));

var _pify = _interopRequireDefault(require("pify"));

var _makeTemp = _interopRequireDefault(require("./helpers/makeTemp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const structRegExp = /(?<=^|\n)([ \t]*)(.*)struct (.+) {\n\1}([^;]*);(?=\n|$)/g; // 独自ルールでフォーマット

async function format(code, config) {
  code = await clangFormat(code, config);

  if (config.FormatOption.AllowStructOneLine) {
    code = code.replace(structRegExp, '$1$2struct $3 {}$4;');
  }

  return code;
}

async function clangFormat(code, config) {
  // tmpに作業フォルダを作る
  const temp = (0, _makeTemp.default)(config);

  const originalOpt = _path.default.resolve(process.cwd(), config.WorkingDir, config.ClangFormatOptionPath);

  if (!(0, _fsExtra.existsSync)(originalOpt)) throw `${originalOpt} not found`;
  (0, _fsExtra.mkdirsSync)(temp);

  const tmp = _path.default.resolve(temp, 'tmp.cpp');

  const opt = _path.default.resolve(temp, '.clang-format'); // .clang-formatなどを設置


  (0, _fsExtra.writeFileSync)(tmp, code);
  (0, _fsExtra.writeFileSync)(opt, (0, _fsExtra.readFileSync)(originalOpt)); // clang-formatをかける

  const formatted = await (0, _pify.default)(_child_process.exec)(`clang-format ${tmp}`, {
    style: 'file'
  }); // 作業フォルダごと消す

  (0, _fsExtra.removeSync)(temp);
  return formatted;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9mb3JtYXR0ZXIuanMiXSwibmFtZXMiOlsic3RydWN0UmVnRXhwIiwiZm9ybWF0IiwiY29kZSIsImNvbmZpZyIsImNsYW5nRm9ybWF0IiwiRm9ybWF0T3B0aW9uIiwiQWxsb3dTdHJ1Y3RPbmVMaW5lIiwicmVwbGFjZSIsInRlbXAiLCJvcmlnaW5hbE9wdCIsInBhdGgiLCJyZXNvbHZlIiwicHJvY2VzcyIsImN3ZCIsIldvcmtpbmdEaXIiLCJDbGFuZ0Zvcm1hdE9wdGlvblBhdGgiLCJ0bXAiLCJvcHQiLCJmb3JtYXR0ZWQiLCJleGVjIiwic3R5bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLFlBQVksR0FBRywwREFBckIsQyxDQUVBOztBQUNPLGVBQWVDLE1BQWYsQ0FBdUJDLElBQXZCLEVBQTZCQyxNQUE3QixFQUFxQztBQUMxQ0QsRUFBQUEsSUFBSSxHQUFHLE1BQU1FLFdBQVcsQ0FBQ0YsSUFBRCxFQUFPQyxNQUFQLENBQXhCOztBQUNBLE1BQUlBLE1BQU0sQ0FBQ0UsWUFBUCxDQUFvQkMsa0JBQXhCLEVBQTRDO0FBQzFDSixJQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ0ssT0FBTCxDQUFhUCxZQUFiLEVBQTJCLHFCQUEzQixDQUFQO0FBQ0Q7O0FBQ0QsU0FBT0UsSUFBUDtBQUNEOztBQUVNLGVBQWVFLFdBQWYsQ0FBNEJGLElBQTVCLEVBQWtDQyxNQUFsQyxFQUEwQztBQUMvQztBQUNBLFFBQU1LLElBQUksR0FBRyx1QkFBU0wsTUFBVCxDQUFiOztBQUNBLFFBQU1NLFdBQVcsR0FBR0MsY0FBS0MsT0FBTCxDQUFhQyxPQUFPLENBQUNDLEdBQVIsRUFBYixFQUE0QlYsTUFBTSxDQUFDVyxVQUFuQyxFQUErQ1gsTUFBTSxDQUFDWSxxQkFBdEQsQ0FBcEI7O0FBQ0EsTUFBSSxDQUFDLHlCQUFXTixXQUFYLENBQUwsRUFBOEIsTUFBTyxHQUFFQSxXQUFZLFlBQXJCO0FBQzlCLDJCQUFXRCxJQUFYOztBQUNBLFFBQU1RLEdBQUcsR0FBR04sY0FBS0MsT0FBTCxDQUFhSCxJQUFiLEVBQW1CLFNBQW5CLENBQVo7O0FBQ0EsUUFBTVMsR0FBRyxHQUFHUCxjQUFLQyxPQUFMLENBQWFILElBQWIsRUFBbUIsZUFBbkIsQ0FBWixDQVArQyxDQVEvQzs7O0FBQ0EsOEJBQWNRLEdBQWQsRUFBbUJkLElBQW5CO0FBQ0EsOEJBQWNlLEdBQWQsRUFBbUIsMkJBQWFSLFdBQWIsQ0FBbkIsRUFWK0MsQ0FXL0M7O0FBQ0EsUUFBTVMsU0FBUyxHQUFHLE1BQU0sbUJBQUtDLG1CQUFMLEVBQVksZ0JBQWVILEdBQUksRUFBL0IsRUFBa0M7QUFBRUksSUFBQUEsS0FBSyxFQUFFO0FBQVQsR0FBbEMsQ0FBeEIsQ0FaK0MsQ0FhL0M7O0FBQ0EsMkJBQVdaLElBQVg7QUFDQSxTQUFPVSxTQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjIH0gZnJvbSAnY2hpbGRfcHJvY2VzcydcclxuaW1wb3J0IHsgZXhpc3RzU3luYywgbWtkaXJzU3luYywgcmVhZEZpbGVTeW5jLCByZW1vdmVTeW5jLCB3cml0ZUZpbGVTeW5jIH0gZnJvbSAnZnMtZXh0cmEnO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xyXG5pbXBvcnQgcGlmeSBmcm9tICdwaWZ5J1xyXG5pbXBvcnQgbWFrZVRlbXAgZnJvbSAnLi9oZWxwZXJzL21ha2VUZW1wJ1xyXG5cclxuY29uc3Qgc3RydWN0UmVnRXhwID0gLyg/PD1efFxcbikoWyBcXHRdKikoLiopc3RydWN0ICguKykge1xcblxcMX0oW147XSopOyg/PVxcbnwkKS9nXHJcblxyXG4vLyDni6zoh6rjg6vjg7zjg6vjgafjg5Xjgqnjg7zjg57jg4Pjg4hcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZvcm1hdCAoY29kZSwgY29uZmlnKSB7XHJcbiAgY29kZSA9IGF3YWl0IGNsYW5nRm9ybWF0KGNvZGUsIGNvbmZpZylcclxuICBpZiAoY29uZmlnLkZvcm1hdE9wdGlvbi5BbGxvd1N0cnVjdE9uZUxpbmUpIHtcclxuICAgIGNvZGUgPSBjb2RlLnJlcGxhY2Uoc3RydWN0UmVnRXhwLCAnJDEkMnN0cnVjdCAkMyB7fSQ0OycpXHJcbiAgfVxyXG4gIHJldHVybiBjb2RlXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGFuZ0Zvcm1hdCAoY29kZSwgY29uZmlnKSB7XHJcbiAgLy8gdG1w44Gr5L2c5qWt44OV44Kp44Or44OA44KS5L2c44KLXHJcbiAgY29uc3QgdGVtcCA9IG1ha2VUZW1wKGNvbmZpZylcclxuICBjb25zdCBvcmlnaW5hbE9wdCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBjb25maWcuV29ya2luZ0RpciwgY29uZmlnLkNsYW5nRm9ybWF0T3B0aW9uUGF0aClcclxuICBpZiAoIWV4aXN0c1N5bmMob3JpZ2luYWxPcHQpKSB0aHJvdyBgJHtvcmlnaW5hbE9wdH0gbm90IGZvdW5kYFxyXG4gIG1rZGlyc1N5bmModGVtcClcclxuICBjb25zdCB0bXAgPSBwYXRoLnJlc29sdmUodGVtcCwgJ3RtcC5jcHAnKVxyXG4gIGNvbnN0IG9wdCA9IHBhdGgucmVzb2x2ZSh0ZW1wLCAnLmNsYW5nLWZvcm1hdCcpXHJcbiAgLy8gLmNsYW5nLWZvcm1hdOOBquOBqeOCkuioree9rlxyXG4gIHdyaXRlRmlsZVN5bmModG1wLCBjb2RlKVxyXG4gIHdyaXRlRmlsZVN5bmMob3B0LCByZWFkRmlsZVN5bmMob3JpZ2luYWxPcHQpKVxyXG4gIC8vIGNsYW5nLWZvcm1hdOOCkuOBi+OBkeOCi1xyXG4gIGNvbnN0IGZvcm1hdHRlZCA9IGF3YWl0IHBpZnkoZXhlYykoYGNsYW5nLWZvcm1hdCAke3RtcH1gLCB7IHN0eWxlOiAnZmlsZScgfSlcclxuICAvLyDkvZzmpa3jg5Xjgqnjg6vjg4DjgZTjgajmtojjgZlcclxuICByZW1vdmVTeW5jKHRlbXApXHJcbiAgcmV0dXJuIGZvcm1hdHRlZFxyXG59XHJcbiJdfQ==