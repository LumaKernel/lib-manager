"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.format = format;
exports.clangFormat = clangFormat;

require("source-map-support/register");

var _child_process = require("child_process");

var _fsExtra = require("fs-extra");

var _path = _interopRequireDefault(require("path"));

var _pify = _interopRequireDefault(require("pify"));

var _makeTemp = _interopRequireDefault(require("./helpers/makeTemp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 独自ルールでフォーマット
async function format(code, config) {
  code = await clangFormat(code, config);

  if (config.FormatOption.AllowStructOneLine) {
    code = code.replace(/(?:^|\n)(\s*)struct (.*) {\n\1};/g, '$1struct $2 {}');
  }

  return code;
}

async function clangFormat(code, config) {
  // tmpに作業フォルダを作る
  const temp = (0, _makeTemp.default)(config);

  const originalOpt = _path.default.resolve(process.cwd(), config.WorkingDir, config.ClangFormatOptionPath);

  if (!(0, _fsExtra.existsSync)(originalOpt)) throw `${originalOpt} not found`;
  (0, _fsExtra.mkdirsSync)(temp);

  const tmp = _path.default.resolve(temp, 'tmp.cpp');

  const opt = _path.default.resolve(temp, '.clang-format'); // .clang-formatなどを設置


  (0, _fsExtra.writeFileSync)(tmp, code);
  (0, _fsExtra.writeFileSync)(opt, (0, _fsExtra.readFileSync)(originalOpt)); // clang-formatをかける

  const formatted = await (0, _pify.default)(_child_process.exec)(`clang-format ${tmp}`, {
    style: 'file'
  }); // 作業フォルダごと消す

  (0, _fsExtra.removeSync)(temp);
  return formatted;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9mb3JtYXR0ZXIuanMiXSwibmFtZXMiOlsiZm9ybWF0IiwiY29kZSIsImNvbmZpZyIsImNsYW5nRm9ybWF0IiwiRm9ybWF0T3B0aW9uIiwiQWxsb3dTdHJ1Y3RPbmVMaW5lIiwicmVwbGFjZSIsInRlbXAiLCJvcmlnaW5hbE9wdCIsInBhdGgiLCJyZXNvbHZlIiwicHJvY2VzcyIsImN3ZCIsIldvcmtpbmdEaXIiLCJDbGFuZ0Zvcm1hdE9wdGlvblBhdGgiLCJ0bXAiLCJvcHQiLCJmb3JtYXR0ZWQiLCJleGVjIiwic3R5bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBO0FBQ08sZUFBZUEsTUFBZixDQUF1QkMsSUFBdkIsRUFBNkJDLE1BQTdCLEVBQXFDO0FBQzFDRCxFQUFBQSxJQUFJLEdBQUcsTUFBTUUsV0FBVyxDQUFDRixJQUFELEVBQU9DLE1BQVAsQ0FBeEI7O0FBQ0EsTUFBSUEsTUFBTSxDQUFDRSxZQUFQLENBQW9CQyxrQkFBeEIsRUFBNEM7QUFDMUNKLElBQUFBLElBQUksR0FBR0EsSUFBSSxDQUFDSyxPQUFMLENBQWEsbUNBQWIsRUFBa0QsZ0JBQWxELENBQVA7QUFDRDs7QUFDRCxTQUFPTCxJQUFQO0FBQ0Q7O0FBRU0sZUFBZUUsV0FBZixDQUE0QkYsSUFBNUIsRUFBa0NDLE1BQWxDLEVBQTBDO0FBQy9DO0FBQ0EsUUFBTUssSUFBSSxHQUFHLHVCQUFTTCxNQUFULENBQWI7O0FBQ0EsUUFBTU0sV0FBVyxHQUFHQyxjQUFLQyxPQUFMLENBQWFDLE9BQU8sQ0FBQ0MsR0FBUixFQUFiLEVBQTRCVixNQUFNLENBQUNXLFVBQW5DLEVBQStDWCxNQUFNLENBQUNZLHFCQUF0RCxDQUFwQjs7QUFDQSxNQUFJLENBQUMseUJBQVdOLFdBQVgsQ0FBTCxFQUE4QixNQUFPLEdBQUVBLFdBQVksWUFBckI7QUFDOUIsMkJBQVdELElBQVg7O0FBQ0EsUUFBTVEsR0FBRyxHQUFHTixjQUFLQyxPQUFMLENBQWFILElBQWIsRUFBbUIsU0FBbkIsQ0FBWjs7QUFDQSxRQUFNUyxHQUFHLEdBQUdQLGNBQUtDLE9BQUwsQ0FBYUgsSUFBYixFQUFtQixlQUFuQixDQUFaLENBUCtDLENBUS9DOzs7QUFDQSw4QkFBY1EsR0FBZCxFQUFtQmQsSUFBbkI7QUFDQSw4QkFBY2UsR0FBZCxFQUFtQiwyQkFBYVIsV0FBYixDQUFuQixFQVYrQyxDQVcvQzs7QUFDQSxRQUFNUyxTQUFTLEdBQUcsTUFBTSxtQkFBS0MsbUJBQUwsRUFBWSxnQkFBZUgsR0FBSSxFQUEvQixFQUFrQztBQUFFSSxJQUFBQSxLQUFLLEVBQUU7QUFBVCxHQUFsQyxDQUF4QixDQVorQyxDQWEvQzs7QUFDQSwyQkFBV1osSUFBWDtBQUNBLFNBQU9VLFNBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJ1xuaW1wb3J0IHsgZXhpc3RzU3luYywgbWtkaXJzU3luYywgcmVhZEZpbGVTeW5jLCByZW1vdmVTeW5jLCB3cml0ZUZpbGVTeW5jIH0gZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCBwaWZ5IGZyb20gJ3BpZnknXG5pbXBvcnQgbWFrZVRlbXAgZnJvbSAnLi9oZWxwZXJzL21ha2VUZW1wJ1xuXG4vLyDni6zoh6rjg6vjg7zjg6vjgafjg5Xjgqnjg7zjg57jg4Pjg4hcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmb3JtYXQgKGNvZGUsIGNvbmZpZykge1xuICBjb2RlID0gYXdhaXQgY2xhbmdGb3JtYXQoY29kZSwgY29uZmlnKVxuICBpZiAoY29uZmlnLkZvcm1hdE9wdGlvbi5BbGxvd1N0cnVjdE9uZUxpbmUpIHtcbiAgICBjb2RlID0gY29kZS5yZXBsYWNlKC8oPzpefFxcbikoXFxzKilzdHJ1Y3QgKC4qKSB7XFxuXFwxfTsvZywgJyQxc3RydWN0ICQyIHt9JylcbiAgfVxuICByZXR1cm4gY29kZVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2xhbmdGb3JtYXQgKGNvZGUsIGNvbmZpZykge1xuICAvLyB0bXDjgavkvZzmpa3jg5Xjgqnjg6vjg4DjgpLkvZzjgotcbiAgY29uc3QgdGVtcCA9IG1ha2VUZW1wKGNvbmZpZylcbiAgY29uc3Qgb3JpZ2luYWxPcHQgPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgY29uZmlnLldvcmtpbmdEaXIsIGNvbmZpZy5DbGFuZ0Zvcm1hdE9wdGlvblBhdGgpXG4gIGlmICghZXhpc3RzU3luYyhvcmlnaW5hbE9wdCkpIHRocm93IGAke29yaWdpbmFsT3B0fSBub3QgZm91bmRgXG4gIG1rZGlyc1N5bmModGVtcClcbiAgY29uc3QgdG1wID0gcGF0aC5yZXNvbHZlKHRlbXAsICd0bXAuY3BwJylcbiAgY29uc3Qgb3B0ID0gcGF0aC5yZXNvbHZlKHRlbXAsICcuY2xhbmctZm9ybWF0JylcbiAgLy8gLmNsYW5nLWZvcm1hdOOBquOBqeOCkuioree9rlxuICB3cml0ZUZpbGVTeW5jKHRtcCwgY29kZSlcbiAgd3JpdGVGaWxlU3luYyhvcHQsIHJlYWRGaWxlU3luYyhvcmlnaW5hbE9wdCkpXG4gIC8vIGNsYW5nLWZvcm1hdOOCkuOBi+OBkeOCi1xuICBjb25zdCBmb3JtYXR0ZWQgPSBhd2FpdCBwaWZ5KGV4ZWMpKGBjbGFuZy1mb3JtYXQgJHt0bXB9YCwgeyBzdHlsZTogJ2ZpbGUnIH0pXG4gIC8vIOS9nOalreODleOCqeODq+ODgOOBlOOBqOa2iOOBmVxuICByZW1vdmVTeW5jKHRlbXApXG4gIHJldHVybiBmb3JtYXR0ZWRcbn1cbiJdfQ==