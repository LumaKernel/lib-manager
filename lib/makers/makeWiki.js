"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = makeWiki;

require("source-map-support/register");

var _fsExtra = require("fs-extra");

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _path = require("path");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function makeWiki(config, nowdir = null, path = '') {
  if (nowdir === null) nowdir = (0, _path.resolve)(process.cwd(), config.WorkingDir, config.SrcDir);
  const wiki = {};
  const wikiYAML = (0, _path.resolve)(nowdir, 'wiki.yml');
  if (!(0, _fsExtra.existsSync)(wikiYAML)) return false;
  const wikiData = {
    type: 'dir',
    order: [],
    ..._jsYaml.default.safeLoad((0, _fsExtra.readFileSync)(wikiYAML).toString())
  };
  wiki.type = wikiData.type;
  if (wikiData.title) wiki.title = wikiData.title;
  if (wikiData.permalink) wiki.permalink = wikiData.permalink;
  wiki.path = path;
  if (Array.isArray(typeof wikiData.orde)) throw `${nowdir} : order must be array`;
  const wikipage = (0, _path.resolve)(nowdir, 'wiki.md'); // 改行コードを統一

  if ((0, _fsExtra.existsSync)(wikipage)) wiki.wiki = myReadFile(wikipage);
  const child = [];
  wikiData.order.forEach(el => {
    const mdfile = (0, _path.resolve)(nowdir, el + '.md');
    const newdir = (0, _path.resolve)(nowdir, el);

    if ((0, _fsExtra.existsSync)(mdfile)) {
      child.push({
        path: el,
        type: 'lib',
        wiki: myReadFile(mdfile)
      });
    } else if ((0, _fsExtra.existsSync)(newdir)) {
      const d = makeWiki(config, newdir, el);
      if (d) child.push(d);
    } else {
      throw `${nowdir} : not found ${mdfile} and ${newdir}/`;
    }
  });
  wiki.child = child;
  return wiki;
}

function myReadFile(path) {
  return (0, _fsExtra.readFileSync)(path).toString().replace(/\r\n?/g, '\n');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYWtlcnMvbWFrZVdpa2kuanMiXSwibmFtZXMiOlsibWFrZVdpa2kiLCJjb25maWciLCJub3dkaXIiLCJwYXRoIiwicHJvY2VzcyIsImN3ZCIsIldvcmtpbmdEaXIiLCJTcmNEaXIiLCJ3aWtpIiwid2lraVlBTUwiLCJ3aWtpRGF0YSIsInR5cGUiLCJvcmRlciIsInlhbWwiLCJzYWZlTG9hZCIsInRvU3RyaW5nIiwidGl0bGUiLCJwZXJtYWxpbmsiLCJBcnJheSIsImlzQXJyYXkiLCJvcmRlIiwid2lraXBhZ2UiLCJteVJlYWRGaWxlIiwiY2hpbGQiLCJmb3JFYWNoIiwiZWwiLCJtZGZpbGUiLCJuZXdkaXIiLCJwdXNoIiwiZCIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBRWUsU0FBU0EsUUFBVCxDQUFtQkMsTUFBbkIsRUFBMkJDLE1BQU0sR0FBRyxJQUFwQyxFQUEwQ0MsSUFBSSxHQUFHLEVBQWpELEVBQXFEO0FBQ2xFLE1BQUlELE1BQU0sS0FBSyxJQUFmLEVBQXFCQSxNQUFNLEdBQUcsbUJBQVFFLE9BQU8sQ0FBQ0MsR0FBUixFQUFSLEVBQXVCSixNQUFNLENBQUNLLFVBQTlCLEVBQTBDTCxNQUFNLENBQUNNLE1BQWpELENBQVQ7QUFDckIsUUFBTUMsSUFBSSxHQUFHLEVBQWI7QUFDQSxRQUFNQyxRQUFRLEdBQUcsbUJBQVFQLE1BQVIsRUFBZ0IsVUFBaEIsQ0FBakI7QUFDQSxNQUFJLENBQUMseUJBQVdPLFFBQVgsQ0FBTCxFQUEyQixPQUFPLEtBQVA7QUFDM0IsUUFBTUMsUUFBUSxHQUFHO0FBQ2ZDLElBQUFBLElBQUksRUFBRSxLQURTO0FBRWZDLElBQUFBLEtBQUssRUFBRSxFQUZRO0FBR2YsT0FBR0MsZ0JBQUtDLFFBQUwsQ0FBYywyQkFBYUwsUUFBYixFQUF1Qk0sUUFBdkIsRUFBZDtBQUhZLEdBQWpCO0FBS0FQLEVBQUFBLElBQUksQ0FBQ0csSUFBTCxHQUFZRCxRQUFRLENBQUNDLElBQXJCO0FBQ0EsTUFBSUQsUUFBUSxDQUFDTSxLQUFiLEVBQW9CUixJQUFJLENBQUNRLEtBQUwsR0FBYU4sUUFBUSxDQUFDTSxLQUF0QjtBQUNwQixNQUFJTixRQUFRLENBQUNPLFNBQWIsRUFBd0JULElBQUksQ0FBQ1MsU0FBTCxHQUFpQlAsUUFBUSxDQUFDTyxTQUExQjtBQUN4QlQsRUFBQUEsSUFBSSxDQUFDTCxJQUFMLEdBQVlBLElBQVo7QUFDQSxNQUFJZSxLQUFLLENBQUNDLE9BQU4sQ0FBYyxPQUFPVCxRQUFRLENBQUNVLElBQTlCLENBQUosRUFBeUMsTUFBTyxHQUFFbEIsTUFBTyx3QkFBaEI7QUFDekMsUUFBTW1CLFFBQVEsR0FBRyxtQkFBUW5CLE1BQVIsRUFBZ0IsU0FBaEIsQ0FBakIsQ0Fma0UsQ0FpQmxFOztBQUNBLE1BQUkseUJBQVdtQixRQUFYLENBQUosRUFBMEJiLElBQUksQ0FBQ0EsSUFBTCxHQUFZYyxVQUFVLENBQUNELFFBQUQsQ0FBdEI7QUFDMUIsUUFBTUUsS0FBSyxHQUFHLEVBQWQ7QUFDQWIsRUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVZLE9BQWYsQ0FBdUJDLEVBQUUsSUFBSTtBQUMzQixVQUFNQyxNQUFNLEdBQUcsbUJBQVF4QixNQUFSLEVBQWdCdUIsRUFBRSxHQUFHLEtBQXJCLENBQWY7QUFDQSxVQUFNRSxNQUFNLEdBQUcsbUJBQVF6QixNQUFSLEVBQWdCdUIsRUFBaEIsQ0FBZjs7QUFDQSxRQUFJLHlCQUFXQyxNQUFYLENBQUosRUFBd0I7QUFDdEJILE1BQUFBLEtBQUssQ0FBQ0ssSUFBTixDQUFXO0FBQ1R6QixRQUFBQSxJQUFJLEVBQUVzQixFQURHO0FBRVRkLFFBQUFBLElBQUksRUFBRSxLQUZHO0FBR1RILFFBQUFBLElBQUksRUFBRWMsVUFBVSxDQUFDSSxNQUFEO0FBSFAsT0FBWDtBQUtELEtBTkQsTUFNTyxJQUFJLHlCQUFXQyxNQUFYLENBQUosRUFBd0I7QUFDN0IsWUFBTUUsQ0FBQyxHQUFHN0IsUUFBUSxDQUFDQyxNQUFELEVBQVMwQixNQUFULEVBQWlCRixFQUFqQixDQUFsQjtBQUNBLFVBQUlJLENBQUosRUFBT04sS0FBSyxDQUFDSyxJQUFOLENBQVdDLENBQVg7QUFDUixLQUhNLE1BR0E7QUFDTCxZQUFPLEdBQUUzQixNQUFPLGdCQUFld0IsTUFBTyxRQUFPQyxNQUFPLEdBQXBEO0FBQ0Q7QUFDRixHQWZEO0FBZ0JBbkIsRUFBQUEsSUFBSSxDQUFDZSxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFPZixJQUFQO0FBQ0Q7O0FBRUQsU0FBU2MsVUFBVCxDQUFxQm5CLElBQXJCLEVBQTJCO0FBQ3pCLFNBQU8sMkJBQWFBLElBQWIsRUFBbUJZLFFBQW5CLEdBQThCZSxPQUE5QixDQUFzQyxRQUF0QyxFQUFnRCxJQUFoRCxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGlzdHNTeW5jLCByZWFkRmlsZVN5bmMgfSBmcm9tICdmcy1leHRyYSdcbmltcG9ydCB5YW1sIGZyb20gJ2pzLXlhbWwnXG5pbXBvcnQgeyByZXNvbHZlIH0gZnJvbSAncGF0aCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFrZVdpa2kgKGNvbmZpZywgbm93ZGlyID0gbnVsbCwgcGF0aCA9ICcnKSB7XG4gIGlmIChub3dkaXIgPT09IG51bGwpIG5vd2RpciA9IHJlc29sdmUocHJvY2Vzcy5jd2QoKSwgY29uZmlnLldvcmtpbmdEaXIsIGNvbmZpZy5TcmNEaXIpXG4gIGNvbnN0IHdpa2kgPSB7fVxuICBjb25zdCB3aWtpWUFNTCA9IHJlc29sdmUobm93ZGlyLCAnd2lraS55bWwnKVxuICBpZiAoIWV4aXN0c1N5bmMod2lraVlBTUwpKSByZXR1cm4gZmFsc2VcbiAgY29uc3Qgd2lraURhdGEgPSB7XG4gICAgdHlwZTogJ2RpcicsXG4gICAgb3JkZXI6IFtdLFxuICAgIC4uLnlhbWwuc2FmZUxvYWQocmVhZEZpbGVTeW5jKHdpa2lZQU1MKS50b1N0cmluZygpKSxcbiAgfVxuICB3aWtpLnR5cGUgPSB3aWtpRGF0YS50eXBlXG4gIGlmICh3aWtpRGF0YS50aXRsZSkgd2lraS50aXRsZSA9IHdpa2lEYXRhLnRpdGxlXG4gIGlmICh3aWtpRGF0YS5wZXJtYWxpbmspIHdpa2kucGVybWFsaW5rID0gd2lraURhdGEucGVybWFsaW5rXG4gIHdpa2kucGF0aCA9IHBhdGhcbiAgaWYgKEFycmF5LmlzQXJyYXkodHlwZW9mIHdpa2lEYXRhLm9yZGUpKSB0aHJvdyBgJHtub3dkaXJ9IDogb3JkZXIgbXVzdCBiZSBhcnJheWBcbiAgY29uc3Qgd2lraXBhZ2UgPSByZXNvbHZlKG5vd2RpciwgJ3dpa2kubWQnKVxuXG4gIC8vIOaUueihjOOCs+ODvOODieOCkue1seS4gFxuICBpZiAoZXhpc3RzU3luYyh3aWtpcGFnZSkpIHdpa2kud2lraSA9IG15UmVhZEZpbGUod2lraXBhZ2UpXG4gIGNvbnN0IGNoaWxkID0gW11cbiAgd2lraURhdGEub3JkZXIuZm9yRWFjaChlbCA9PiB7XG4gICAgY29uc3QgbWRmaWxlID0gcmVzb2x2ZShub3dkaXIsIGVsICsgJy5tZCcpXG4gICAgY29uc3QgbmV3ZGlyID0gcmVzb2x2ZShub3dkaXIsIGVsKVxuICAgIGlmIChleGlzdHNTeW5jKG1kZmlsZSkpIHtcbiAgICAgIGNoaWxkLnB1c2goe1xuICAgICAgICBwYXRoOiBlbCxcbiAgICAgICAgdHlwZTogJ2xpYicsXG4gICAgICAgIHdpa2k6IG15UmVhZEZpbGUobWRmaWxlKSxcbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmIChleGlzdHNTeW5jKG5ld2RpcikpIHtcbiAgICAgIGNvbnN0IGQgPSBtYWtlV2lraShjb25maWcsIG5ld2RpciwgZWwpXG4gICAgICBpZiAoZCkgY2hpbGQucHVzaChkKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBgJHtub3dkaXJ9IDogbm90IGZvdW5kICR7bWRmaWxlfSBhbmQgJHtuZXdkaXJ9L2BcbiAgICB9XG4gIH0pXG4gIHdpa2kuY2hpbGQgPSBjaGlsZFxuICByZXR1cm4gd2lraVxufVxuXG5mdW5jdGlvbiBteVJlYWRGaWxlIChwYXRoKSB7XG4gIHJldHVybiByZWFkRmlsZVN5bmMocGF0aCkudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHJcXG4/L2csICdcXG4nKVxufVxuIl19