"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = makeWiki;

require("source-map-support/register");

var _fsExtra = require("fs-extra");

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _path = require("path");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function makeWiki(config, nowdir = null, path = '') {
  if (nowdir === null) nowdir = (0, _path.resolve)(process.cwd(), config.WorkingDir, config.SrcDir);
  const wiki = {};
  const wikiYAML = (0, _path.resolve)(nowdir, 'wiki.yml');
  if (!(0, _fsExtra.existsSync)(wikiYAML)) return false;
  const wikiData = {
    type: 'dir',
    order: [],
    ..._jsYaml.default.safeLoad((0, _fsExtra.readFileSync)(wikiYAML).toString())
  };
  wiki.type = wikiData.type;
  if (wikiData.title) wiki.title = wikiData.title;
  if (wikiData.permalink) wiki.permalink = wikiData.permalink;
  wiki.path = path;
  if (Array.isArray(typeof wikiData.orde)) throw `${nowdir} : order must be array`;
  const wikipage = (0, _path.resolve)(nowdir, 'wiki.md'); // 改行コードを統一

  if ((0, _fsExtra.existsSync)(wikipage)) wiki.wiki = myReadFile(wikipage);
  const child = [];
  wikiData.order.forEach(el => {
    const mdfile = (0, _path.resolve)(nowdir, el + '.md');
    const newdir = (0, _path.resolve)(nowdir, el);

    if ((0, _fsExtra.existsSync)(mdfile)) {
      child.push({
        path: el,
        type: 'lib',
        wiki: myReadFile(mdfile)
      });
    } else if ((0, _fsExtra.existsSync)(newdir)) {
      const d = makeWiki(config, newdir, el);
      if (d) child.push(d);
    } else {
      throw `${nowdir} : not found ${mdfile} and ${newdir}/`;
    }
  });
  wiki.child = child;
  return wiki;
}

function myReadFile(path) {
  return (0, _fsExtra.readFileSync)(path).toString().replace(/\r\n?/g, '\n');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYWtlcnMvbWFrZVdpa2kuanMiXSwibmFtZXMiOlsibWFrZVdpa2kiLCJjb25maWciLCJub3dkaXIiLCJwYXRoIiwicHJvY2VzcyIsImN3ZCIsIldvcmtpbmdEaXIiLCJTcmNEaXIiLCJ3aWtpIiwid2lraVlBTUwiLCJ3aWtpRGF0YSIsInR5cGUiLCJvcmRlciIsInlhbWwiLCJzYWZlTG9hZCIsInRvU3RyaW5nIiwidGl0bGUiLCJwZXJtYWxpbmsiLCJBcnJheSIsImlzQXJyYXkiLCJvcmRlIiwid2lraXBhZ2UiLCJteVJlYWRGaWxlIiwiY2hpbGQiLCJmb3JFYWNoIiwiZWwiLCJtZGZpbGUiLCJuZXdkaXIiLCJwdXNoIiwiZCIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBRWUsU0FBU0EsUUFBVCxDQUFtQkMsTUFBbkIsRUFBMkJDLE1BQU0sR0FBRyxJQUFwQyxFQUEwQ0MsSUFBSSxHQUFHLEVBQWpELEVBQXFEO0FBQ2xFLE1BQUlELE1BQU0sS0FBSyxJQUFmLEVBQXFCQSxNQUFNLEdBQUcsbUJBQVFFLE9BQU8sQ0FBQ0MsR0FBUixFQUFSLEVBQXVCSixNQUFNLENBQUNLLFVBQTlCLEVBQTBDTCxNQUFNLENBQUNNLE1BQWpELENBQVQ7QUFDckIsUUFBTUMsSUFBSSxHQUFHLEVBQWI7QUFDQSxRQUFNQyxRQUFRLEdBQUcsbUJBQVFQLE1BQVIsRUFBZ0IsVUFBaEIsQ0FBakI7QUFDQSxNQUFJLENBQUMseUJBQVdPLFFBQVgsQ0FBTCxFQUEyQixPQUFPLEtBQVA7QUFDM0IsUUFBTUMsUUFBUSxHQUFHO0FBQ2ZDLElBQUFBLElBQUksRUFBRSxLQURTO0FBRWZDLElBQUFBLEtBQUssRUFBRSxFQUZRO0FBR2YsT0FBR0MsZ0JBQUtDLFFBQUwsQ0FBYywyQkFBYUwsUUFBYixFQUF1Qk0sUUFBdkIsRUFBZDtBQUhZLEdBQWpCO0FBS0FQLEVBQUFBLElBQUksQ0FBQ0csSUFBTCxHQUFZRCxRQUFRLENBQUNDLElBQXJCO0FBQ0EsTUFBSUQsUUFBUSxDQUFDTSxLQUFiLEVBQW9CUixJQUFJLENBQUNRLEtBQUwsR0FBYU4sUUFBUSxDQUFDTSxLQUF0QjtBQUNwQixNQUFJTixRQUFRLENBQUNPLFNBQWIsRUFBd0JULElBQUksQ0FBQ1MsU0FBTCxHQUFpQlAsUUFBUSxDQUFDTyxTQUExQjtBQUN4QlQsRUFBQUEsSUFBSSxDQUFDTCxJQUFMLEdBQVlBLElBQVo7QUFDQSxNQUFJZSxLQUFLLENBQUNDLE9BQU4sQ0FBYyxPQUFPVCxRQUFRLENBQUNVLElBQTlCLENBQUosRUFBeUMsTUFBTyxHQUFFbEIsTUFBTyx3QkFBaEI7QUFDekMsUUFBTW1CLFFBQVEsR0FBRyxtQkFBUW5CLE1BQVIsRUFBZ0IsU0FBaEIsQ0FBakIsQ0Fma0UsQ0FpQmxFOztBQUNBLE1BQUkseUJBQVdtQixRQUFYLENBQUosRUFBMEJiLElBQUksQ0FBQ0EsSUFBTCxHQUFZYyxVQUFVLENBQUNELFFBQUQsQ0FBdEI7QUFDMUIsUUFBTUUsS0FBSyxHQUFHLEVBQWQ7QUFDQWIsRUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVZLE9BQWYsQ0FBdUJDLEVBQUUsSUFBSTtBQUMzQixVQUFNQyxNQUFNLEdBQUcsbUJBQVF4QixNQUFSLEVBQWdCdUIsRUFBRSxHQUFHLEtBQXJCLENBQWY7QUFDQSxVQUFNRSxNQUFNLEdBQUcsbUJBQVF6QixNQUFSLEVBQWdCdUIsRUFBaEIsQ0FBZjs7QUFDQSxRQUFJLHlCQUFXQyxNQUFYLENBQUosRUFBd0I7QUFDdEJILE1BQUFBLEtBQUssQ0FBQ0ssSUFBTixDQUFXO0FBQ1R6QixRQUFBQSxJQUFJLEVBQUVzQixFQURHO0FBRVRkLFFBQUFBLElBQUksRUFBRSxLQUZHO0FBR1RILFFBQUFBLElBQUksRUFBRWMsVUFBVSxDQUFDSSxNQUFEO0FBSFAsT0FBWDtBQUtELEtBTkQsTUFNTyxJQUFJLHlCQUFXQyxNQUFYLENBQUosRUFBd0I7QUFDN0IsWUFBTUUsQ0FBQyxHQUFHN0IsUUFBUSxDQUFDQyxNQUFELEVBQVMwQixNQUFULEVBQWlCRixFQUFqQixDQUFsQjtBQUNBLFVBQUlJLENBQUosRUFBT04sS0FBSyxDQUFDSyxJQUFOLENBQVdDLENBQVg7QUFDUixLQUhNLE1BR0E7QUFDTCxZQUFPLEdBQUUzQixNQUFPLGdCQUFld0IsTUFBTyxRQUFPQyxNQUFPLEdBQXBEO0FBQ0Q7QUFDRixHQWZEO0FBZ0JBbkIsRUFBQUEsSUFBSSxDQUFDZSxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFPZixJQUFQO0FBQ0Q7O0FBRUQsU0FBU2MsVUFBVCxDQUFxQm5CLElBQXJCLEVBQTJCO0FBQ3pCLFNBQU8sMkJBQWFBLElBQWIsRUFBbUJZLFFBQW5CLEdBQThCZSxPQUE5QixDQUFzQyxRQUF0QyxFQUFnRCxJQUFoRCxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGlzdHNTeW5jLCByZWFkRmlsZVN5bmMgfSBmcm9tICdmcy1leHRyYSdcclxuaW1wb3J0IHlhbWwgZnJvbSAnanMteWFtbCdcclxuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYWtlV2lraSAoY29uZmlnLCBub3dkaXIgPSBudWxsLCBwYXRoID0gJycpIHtcclxuICBpZiAobm93ZGlyID09PSBudWxsKSBub3dkaXIgPSByZXNvbHZlKHByb2Nlc3MuY3dkKCksIGNvbmZpZy5Xb3JraW5nRGlyLCBjb25maWcuU3JjRGlyKVxyXG4gIGNvbnN0IHdpa2kgPSB7fVxyXG4gIGNvbnN0IHdpa2lZQU1MID0gcmVzb2x2ZShub3dkaXIsICd3aWtpLnltbCcpXHJcbiAgaWYgKCFleGlzdHNTeW5jKHdpa2lZQU1MKSkgcmV0dXJuIGZhbHNlXHJcbiAgY29uc3Qgd2lraURhdGEgPSB7XHJcbiAgICB0eXBlOiAnZGlyJyxcclxuICAgIG9yZGVyOiBbXSxcclxuICAgIC4uLnlhbWwuc2FmZUxvYWQocmVhZEZpbGVTeW5jKHdpa2lZQU1MKS50b1N0cmluZygpKSxcclxuICB9XHJcbiAgd2lraS50eXBlID0gd2lraURhdGEudHlwZVxyXG4gIGlmICh3aWtpRGF0YS50aXRsZSkgd2lraS50aXRsZSA9IHdpa2lEYXRhLnRpdGxlXHJcbiAgaWYgKHdpa2lEYXRhLnBlcm1hbGluaykgd2lraS5wZXJtYWxpbmsgPSB3aWtpRGF0YS5wZXJtYWxpbmtcclxuICB3aWtpLnBhdGggPSBwYXRoXHJcbiAgaWYgKEFycmF5LmlzQXJyYXkodHlwZW9mIHdpa2lEYXRhLm9yZGUpKSB0aHJvdyBgJHtub3dkaXJ9IDogb3JkZXIgbXVzdCBiZSBhcnJheWBcclxuICBjb25zdCB3aWtpcGFnZSA9IHJlc29sdmUobm93ZGlyLCAnd2lraS5tZCcpXHJcblxyXG4gIC8vIOaUueihjOOCs+ODvOODieOCkue1seS4gFxyXG4gIGlmIChleGlzdHNTeW5jKHdpa2lwYWdlKSkgd2lraS53aWtpID0gbXlSZWFkRmlsZSh3aWtpcGFnZSlcclxuICBjb25zdCBjaGlsZCA9IFtdXHJcbiAgd2lraURhdGEub3JkZXIuZm9yRWFjaChlbCA9PiB7XHJcbiAgICBjb25zdCBtZGZpbGUgPSByZXNvbHZlKG5vd2RpciwgZWwgKyAnLm1kJylcclxuICAgIGNvbnN0IG5ld2RpciA9IHJlc29sdmUobm93ZGlyLCBlbClcclxuICAgIGlmIChleGlzdHNTeW5jKG1kZmlsZSkpIHtcclxuICAgICAgY2hpbGQucHVzaCh7XHJcbiAgICAgICAgcGF0aDogZWwsXHJcbiAgICAgICAgdHlwZTogJ2xpYicsXHJcbiAgICAgICAgd2lraTogbXlSZWFkRmlsZShtZGZpbGUpLFxyXG4gICAgICB9KVxyXG4gICAgfSBlbHNlIGlmIChleGlzdHNTeW5jKG5ld2RpcikpIHtcclxuICAgICAgY29uc3QgZCA9IG1ha2VXaWtpKGNvbmZpZywgbmV3ZGlyLCBlbClcclxuICAgICAgaWYgKGQpIGNoaWxkLnB1c2goZClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IGAke25vd2Rpcn0gOiBub3QgZm91bmQgJHttZGZpbGV9IGFuZCAke25ld2Rpcn0vYFxyXG4gICAgfVxyXG4gIH0pXHJcbiAgd2lraS5jaGlsZCA9IGNoaWxkXHJcbiAgcmV0dXJuIHdpa2lcclxufVxyXG5cclxuZnVuY3Rpb24gbXlSZWFkRmlsZSAocGF0aCkge1xyXG4gIHJldHVybiByZWFkRmlsZVN5bmMocGF0aCkudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHJcXG4/L2csICdcXG4nKVxyXG59XHJcbiJdfQ==