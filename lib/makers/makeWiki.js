"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = makeWiki;

require("source-map-support/register");

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _path = _interopRequireDefault(require("path"));

var _shelljs = _interopRequireDefault(require("shelljs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  cat,
  test
} = _shelljs.default;
const {
  resolve
} = _path.default;

function makeWiki(config, nowdir = null, path = '') {
  if (nowdir === null) nowdir = resolve(process.cwd(), config.WorkingDir, config.SrcDir);
  const wiki = {};
  const wikiYAML = resolve(nowdir, 'wiki.yml');
  if (!test('-e', wikiYAML)) return false;
  const wikiData = {
    type: 'dir',
    order: [],
    ..._jsYaml.default.safeLoad(cat(wikiYAML).stdout)
  };
  wiki.type = wikiData.type;
  if (wikiData.title) wiki.title = wikiData.title;
  if (wikiData.permalink) wiki.permalink = wikiData.permalink;
  wiki.path = path;
  if (Array.isArray(typeof wikiData.orde)) throw `${nowdir} : order must be array`;
  const wikipage = resolve(nowdir, 'wiki.md');
  if (test('-e', wikipage)) wiki.wiki = cat(wikipage).stdout;
  const child = [];
  wikiData.order.forEach(el => {
    const mdfile = resolve(nowdir, el + '.md');
    const newdir = resolve(nowdir, el);

    if (test('-e', mdfile)) {
      child.push({
        path: el,
        type: 'lib',
        wiki: cat(mdfile).stdout
      });
    } else if (test('-e', newdir)) {
      const d = makeWiki(config, newdir, el);
      if (d) child.push(d);
    } else {
      throw `${nowdir} : not found ${mdfile} and ${newdir}/`;
    }
  });
  wiki.child = child;
  return wiki;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYWtlcnMvbWFrZVdpa2kuanMiXSwibmFtZXMiOlsiY2F0IiwidGVzdCIsInNoZWxsanMiLCJyZXNvbHZlIiwicGF0aCIsIm1ha2VXaWtpIiwiY29uZmlnIiwibm93ZGlyIiwicHJvY2VzcyIsImN3ZCIsIldvcmtpbmdEaXIiLCJTcmNEaXIiLCJ3aWtpIiwid2lraVlBTUwiLCJ3aWtpRGF0YSIsInR5cGUiLCJvcmRlciIsInlhbWwiLCJzYWZlTG9hZCIsInN0ZG91dCIsInRpdGxlIiwicGVybWFsaW5rIiwiQXJyYXkiLCJpc0FycmF5Iiwib3JkZSIsIndpa2lwYWdlIiwiY2hpbGQiLCJmb3JFYWNoIiwiZWwiLCJtZGZpbGUiLCJuZXdkaXIiLCJwdXNoIiwiZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFDQSxNQUFNO0FBQUNBLEVBQUFBLEdBQUQ7QUFBTUMsRUFBQUE7QUFBTixJQUFjQyxnQkFBcEI7QUFDQSxNQUFNO0FBQUNDLEVBQUFBO0FBQUQsSUFBWUMsYUFBbEI7O0FBRWUsU0FBU0MsUUFBVCxDQUFtQkMsTUFBbkIsRUFBMkJDLE1BQU0sR0FBRyxJQUFwQyxFQUEwQ0gsSUFBSSxHQUFHLEVBQWpELEVBQXFEO0FBQ2xFLE1BQUlHLE1BQU0sS0FBSyxJQUFmLEVBQXFCQSxNQUFNLEdBQUdKLE9BQU8sQ0FBQ0ssT0FBTyxDQUFDQyxHQUFSLEVBQUQsRUFBZ0JILE1BQU0sQ0FBQ0ksVUFBdkIsRUFBbUNKLE1BQU0sQ0FBQ0ssTUFBMUMsQ0FBaEI7QUFDckIsUUFBTUMsSUFBSSxHQUFHLEVBQWI7QUFDQSxRQUFNQyxRQUFRLEdBQUdWLE9BQU8sQ0FBQ0ksTUFBRCxFQUFTLFVBQVQsQ0FBeEI7QUFDQSxNQUFJLENBQUNOLElBQUksQ0FBQyxJQUFELEVBQU9ZLFFBQVAsQ0FBVCxFQUEyQixPQUFPLEtBQVA7QUFDM0IsUUFBTUMsUUFBUSxHQUFHO0FBQ2ZDLElBQUFBLElBQUksRUFBRSxLQURTO0FBRWZDLElBQUFBLEtBQUssRUFBRSxFQUZRO0FBR2YsT0FBR0MsZ0JBQUtDLFFBQUwsQ0FBY2xCLEdBQUcsQ0FBQ2EsUUFBRCxDQUFILENBQWNNLE1BQTVCO0FBSFksR0FBakI7QUFLQVAsRUFBQUEsSUFBSSxDQUFDRyxJQUFMLEdBQVlELFFBQVEsQ0FBQ0MsSUFBckI7QUFDQSxNQUFJRCxRQUFRLENBQUNNLEtBQWIsRUFBb0JSLElBQUksQ0FBQ1EsS0FBTCxHQUFhTixRQUFRLENBQUNNLEtBQXRCO0FBQ3BCLE1BQUlOLFFBQVEsQ0FBQ08sU0FBYixFQUF3QlQsSUFBSSxDQUFDUyxTQUFMLEdBQWlCUCxRQUFRLENBQUNPLFNBQTFCO0FBQ3hCVCxFQUFBQSxJQUFJLENBQUNSLElBQUwsR0FBWUEsSUFBWjtBQUNBLE1BQUlrQixLQUFLLENBQUNDLE9BQU4sQ0FBYyxPQUFPVCxRQUFRLENBQUNVLElBQTlCLENBQUosRUFBeUMsTUFBTyxHQUFFakIsTUFBTyx3QkFBaEI7QUFDekMsUUFBTWtCLFFBQVEsR0FBR3RCLE9BQU8sQ0FBQ0ksTUFBRCxFQUFTLFNBQVQsQ0FBeEI7QUFDQSxNQUFJTixJQUFJLENBQUMsSUFBRCxFQUFPd0IsUUFBUCxDQUFSLEVBQTBCYixJQUFJLENBQUNBLElBQUwsR0FBWVosR0FBRyxDQUFDeUIsUUFBRCxDQUFILENBQWNOLE1BQTFCO0FBQzFCLFFBQU1PLEtBQUssR0FBRyxFQUFkO0FBQ0FaLEVBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlVyxPQUFmLENBQXVCQyxFQUFFLElBQUk7QUFDM0IsVUFBTUMsTUFBTSxHQUFHMUIsT0FBTyxDQUFDSSxNQUFELEVBQVNxQixFQUFFLEdBQUcsS0FBZCxDQUF0QjtBQUNBLFVBQU1FLE1BQU0sR0FBRzNCLE9BQU8sQ0FBQ0ksTUFBRCxFQUFTcUIsRUFBVCxDQUF0Qjs7QUFDQSxRQUFJM0IsSUFBSSxDQUFDLElBQUQsRUFBTzRCLE1BQVAsQ0FBUixFQUF3QjtBQUN0QkgsTUFBQUEsS0FBSyxDQUFDSyxJQUFOLENBQVc7QUFDVDNCLFFBQUFBLElBQUksRUFBRXdCLEVBREc7QUFFVGIsUUFBQUEsSUFBSSxFQUFFLEtBRkc7QUFHVEgsUUFBQUEsSUFBSSxFQUFFWixHQUFHLENBQUM2QixNQUFELENBQUgsQ0FBWVY7QUFIVCxPQUFYO0FBS0QsS0FORCxNQU1PLElBQUlsQixJQUFJLENBQUMsSUFBRCxFQUFPNkIsTUFBUCxDQUFSLEVBQXdCO0FBQzdCLFlBQU1FLENBQUMsR0FBRzNCLFFBQVEsQ0FBQ0MsTUFBRCxFQUFTd0IsTUFBVCxFQUFpQkYsRUFBakIsQ0FBbEI7QUFDQSxVQUFJSSxDQUFKLEVBQU9OLEtBQUssQ0FBQ0ssSUFBTixDQUFXQyxDQUFYO0FBQ1IsS0FITSxNQUdBO0FBQ0wsWUFBTyxHQUFFekIsTUFBTyxnQkFBZXNCLE1BQU8sUUFBT0MsTUFBTyxHQUFwRDtBQUNEO0FBQ0YsR0FmRDtBQWdCQWxCLEVBQUFBLElBQUksQ0FBQ2MsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsU0FBT2QsSUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHlhbWwgZnJvbSAnanMteWFtbCdcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgc2hlbGxqcyBmcm9tICdzaGVsbGpzJ1xuY29uc3Qge2NhdCwgdGVzdH0gPSBzaGVsbGpzXG5jb25zdCB7cmVzb2x2ZX0gPSBwYXRoXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1ha2VXaWtpIChjb25maWcsIG5vd2RpciA9IG51bGwsIHBhdGggPSAnJykge1xuICBpZiAobm93ZGlyID09PSBudWxsKSBub3dkaXIgPSByZXNvbHZlKHByb2Nlc3MuY3dkKCksIGNvbmZpZy5Xb3JraW5nRGlyLCBjb25maWcuU3JjRGlyKVxuICBjb25zdCB3aWtpID0ge31cbiAgY29uc3Qgd2lraVlBTUwgPSByZXNvbHZlKG5vd2RpciwgJ3dpa2kueW1sJylcbiAgaWYgKCF0ZXN0KCctZScsIHdpa2lZQU1MKSkgcmV0dXJuIGZhbHNlXG4gIGNvbnN0IHdpa2lEYXRhID0ge1xuICAgIHR5cGU6ICdkaXInLFxuICAgIG9yZGVyOiBbXSxcbiAgICAuLi55YW1sLnNhZmVMb2FkKGNhdCh3aWtpWUFNTCkuc3Rkb3V0KSxcbiAgfVxuICB3aWtpLnR5cGUgPSB3aWtpRGF0YS50eXBlXG4gIGlmICh3aWtpRGF0YS50aXRsZSkgd2lraS50aXRsZSA9IHdpa2lEYXRhLnRpdGxlXG4gIGlmICh3aWtpRGF0YS5wZXJtYWxpbmspIHdpa2kucGVybWFsaW5rID0gd2lraURhdGEucGVybWFsaW5rXG4gIHdpa2kucGF0aCA9IHBhdGhcbiAgaWYgKEFycmF5LmlzQXJyYXkodHlwZW9mIHdpa2lEYXRhLm9yZGUpKSB0aHJvdyBgJHtub3dkaXJ9IDogb3JkZXIgbXVzdCBiZSBhcnJheWBcbiAgY29uc3Qgd2lraXBhZ2UgPSByZXNvbHZlKG5vd2RpciwgJ3dpa2kubWQnKVxuICBpZiAodGVzdCgnLWUnLCB3aWtpcGFnZSkpIHdpa2kud2lraSA9IGNhdCh3aWtpcGFnZSkuc3Rkb3V0XG4gIGNvbnN0IGNoaWxkID0gW11cbiAgd2lraURhdGEub3JkZXIuZm9yRWFjaChlbCA9PiB7XG4gICAgY29uc3QgbWRmaWxlID0gcmVzb2x2ZShub3dkaXIsIGVsICsgJy5tZCcpXG4gICAgY29uc3QgbmV3ZGlyID0gcmVzb2x2ZShub3dkaXIsIGVsKVxuICAgIGlmICh0ZXN0KCctZScsIG1kZmlsZSkpIHtcbiAgICAgIGNoaWxkLnB1c2goe1xuICAgICAgICBwYXRoOiBlbCxcbiAgICAgICAgdHlwZTogJ2xpYicsXG4gICAgICAgIHdpa2k6IGNhdChtZGZpbGUpLnN0ZG91dCxcbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmICh0ZXN0KCctZScsIG5ld2RpcikpIHtcbiAgICAgIGNvbnN0IGQgPSBtYWtlV2lraShjb25maWcsIG5ld2RpciwgZWwpXG4gICAgICBpZiAoZCkgY2hpbGQucHVzaChkKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBgJHtub3dkaXJ9IDogbm90IGZvdW5kICR7bWRmaWxlfSBhbmQgJHtuZXdkaXJ9L2BcbiAgICB9XG4gIH0pXG4gIHdpa2kuY2hpbGQgPSBjaGlsZFxuICByZXR1cm4gd2lraVxufVxuIl19