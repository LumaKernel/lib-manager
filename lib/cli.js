"use strict";

require("source-map-support/register");

var _commander = _interopRequireDefault(require("commander"));

var _fsExtra = require("fs-extra");

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _path = _interopRequireDefault(require("path"));

var _shelljs = _interopRequireDefault(require("shelljs"));

var _buidInit = _interopRequireDefault(require("./commands/buidInit"));

var _build = _interopRequireDefault(require("./commands/build"));

var _check = require("./commands/check");

var _fix = require("./commands/fix");

var _defaultConfig = _interopRequireDefault(require("./constants/defaultConfig"));

var _makeConfig = _interopRequireDefault(require("./makeConfig"));

var _makeProject = _interopRequireDefault(require("./makers/makeProject"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  resolve
} = _path.default;
const {
  exit
} = _shelljs.default;
const version = "0.4.1";
const defaultSettingFile = 'libman.yml';

_commander.default.version(version, '-v, --version').option('-s, --setting', 'YAML setting file path');

_commander.default.command('check').description('check only').usage('[options]').action(async cmd => {
  try {
    const setting = cmd.setting || defaultSettingFile;
    const config = (0, _makeConfig.default)(setting);
    const project = await (0, _makeProject.default)(config);
    const changes = (0, _check.check)(config, project);

    if (changes.length === 0) {
      console.log('no file needs fixing');
    } else {
      console.log('these files will be replaced when fixing');
      changes.forEach(change => {
        console.log(change);
      });
    }
  } catch (e) {
    if (typeof e === 'string') console.error(e);else throw e;
  }
});

_commander.default.command('fix').description('check and fix it').usage('[options]').action(async cmd => {
  try {
    const setting = cmd.setting || defaultSettingFile;
    const config = (0, _makeConfig.default)(setting);
    const project = await (0, _makeProject.default)(config);
    const changes = (0, _check.check)(config, project);
    console.log(`${changes.length} files will be fixed`);
    (0, _fix.fix)(config, project);
  } catch (e) {
    if (typeof e === 'string') console.error(e);else throw e;
  }
});

_commander.default.command('build').usage('[options]').option('-i, --init', 'put printlist.json').option('-f, --fix', 'when check is failed, fix and build').option('-o, --one', 'output one-printable-page').action(async cmd => {
  try {
    const setting = cmd.setting || defaultSettingFile;
    const config = (0, _makeConfig.default)(setting);
    const project = await (0, _makeProject.default)(config);

    if (cmd.init) {
      (0, _buidInit.default)(config, project);
      return;
    }

    const changes = (0, _check.check)(config, project);

    if (changes.length !== 0) {
      if (cmd.fix) {
        console.log(`fixing...`);
        (0, _fix.fix)(config, project);
      } else {
        console.error(`you need to fix`);
        exit(1);
      }
    } else {
      console.log(`passed checking`);
    }

    console.log('building...');
    (0, _build.default)(config, project, cmd.one);
  } catch (e) {
    if (typeof e === 'string') console.error(e);else throw e;
  }
});

_commander.default.command('init').description('make config file').usage('[options]').option('-d, --default', 'use default setting').option('-f, --force', "when there's already a setting, replace").action(async cmd => {
  try {
    const setting = cmd.setting || defaultSettingFile;

    if ((0, _fsExtra.existsSync)(setting) && !cmd.force) {
      throw `${setting} already exists`;
    }

    const cfgObj = cmd.default ? (0, _defaultConfig.default)() : {};
    (0, _fsExtra.writeFileSync)(resolve(process.cwd(), setting), _jsYaml.default.safeDump(cfgObj));
  } catch (e) {
    if (typeof e === 'string') console.error(e);else throw e;
  }
});

_commander.default.command('clean').description('delete tmp, dist dir').usage('[options]').action(async cmd => {
  try {
    const setting = cmd.setting || defaultSettingFile;
    const config = (0, _makeConfig.default)(setting);
    const work = resolve(process.cwd(), config.WorkingDir);
    const tmp = resolve(work, config.TempDir);
    const dist = resolve(work, config.DistDir);
    if ((0, _fsExtra.existsSync)(tmp)) (0, _fsExtra.removeSync)(tmp);
    if ((0, _fsExtra.existsSync)(dist)) (0, _fsExtra.removeSync)(dist);
  } catch (e) {
    if (typeof e === 'string') console.error(e);else throw e;
  }
}); // error on unknown commands


_commander.default.on('command:*', function () {
  console.error('Invalid command: %s\nSee --help for a list of available commands.', _commander.default.args.join(' '));
});

_commander.default.parse(process.argv);

if (!process.argv.slice(2).length) {
  _commander.default.help();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,