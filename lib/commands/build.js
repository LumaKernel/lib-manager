"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = build;

require("source-map-support/register");

var _fsExtra = require("fs-extra");

var _path = require("path");

var _buildPrintable = _interopRequireDefault(require("../builders/buildPrintable"));

var _buildSnippets = require("../builders/buildSnippets");

var _buildWiki = require("../builders/buildWiki");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const libmanPrefix = 'libman_auto_generated_';

function build(config, project, one = false) {
  const src = (0, _path.resolve)(process.cwd(), config.WorkingDir, config.SrcDir);
  const dist = (0, _path.resolve)(process.cwd(), config.WorkingDir, config.DistDir);
  const printlistPath = (0, _path.resolve)(src, 'printlist.json');
  const printlistUsedPath = (0, _path.resolve)(src, 'printlist_used.json');
  const printedPath = (0, _path.resolve)(src, 'printed.json');

  if (one && !(0, _fsExtra.existsSync)(printlistPath)) {
    throw "'printlist.json' is needed. build --init";
  }

  if (one && !(0, _fsExtra.existsSync)(printedPath)) {
    (0, _fsExtra.writeFileSync)(printedPath, '{}');
  }

  check(config.CopyWiki, 'wiki');
  (0, _fsExtra.removeSync)(dist);
  (0, _fsExtra.mkdirsSync)(dist); // wikiを作る

  (0, _buildWiki.buildWiki)(config, project);
  autoRemove(config.CopyWiki);
  copy(dist, config.CopyWiki, 'wiki'); // snippetsを作る(1ファイル)

  const snippet = (0, _buildSnippets.makeSnippet)(config, project.libs);
  (0, _fsExtra.writeFileSync)((0, _path.resolve)(dist, 'libman.snip'), snippet);
  copy(dist, config.CopySnippet, 'libman.snip'); // printable-one-pageを作る

  if (one) {
    const printlist = JSON.parse((0, _fsExtra.readFileSync)(printlistPath));
    const printed = JSON.parse((0, _fsExtra.readFileSync)(printedPath));
    const {
      printed: newPrinted,
      printable
    } = (0, _buildPrintable.default)(config.printableYAML, printlist, printed, project.libs);
    (0, _fsExtra.writeFileSync)((0, _path.resolve)(dist, 'printable.md'), printable);
    copy(dist, config.CopyPrintable, 'printable.md');
    (0, _fsExtra.writeFileSync)(printedPath, JSON.stringify(newPrinted));
    (0, _fsExtra.renameSync)(printlistPath, printlistUsedPath);
  }
}

function check(data, name) {
  if (data && typeof data === 'string') {
    const cp = (0, _path.resolve)(process.cwd(), data);

    if (!(0, _fsExtra.existsSync)(cp)) {
      throw `${cp} doesn't exist, skipped copy ` + name;
    }
  }
}

function copy(dist, data, name) {
  if (data && typeof data === 'string') {
    const cp = (0, _path.resolve)(process.cwd(), data);
    (0, _fsExtra.copySync)((0, _path.resolve)(dist, name), cp);
  }
}

function autoRemove(data) {
  if (data && typeof data === 'string') {
    const dir = (0, _path.resolve)(process.cwd(), data);
    (0, _fsExtra.readdirSync)(dir).filter(file => new RegExp(String.raw`^${libmanPrefix}.*\.md$`).test(file)).forEach(file => {
      (0, _fsExtra.removeSync)((0, _path.resolve)(dir, file));
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9idWlsZC5qcyJdLCJuYW1lcyI6WyJsaWJtYW5QcmVmaXgiLCJidWlsZCIsImNvbmZpZyIsInByb2plY3QiLCJvbmUiLCJzcmMiLCJwcm9jZXNzIiwiY3dkIiwiV29ya2luZ0RpciIsIlNyY0RpciIsImRpc3QiLCJEaXN0RGlyIiwicHJpbnRsaXN0UGF0aCIsInByaW50bGlzdFVzZWRQYXRoIiwicHJpbnRlZFBhdGgiLCJjaGVjayIsIkNvcHlXaWtpIiwiYXV0b1JlbW92ZSIsImNvcHkiLCJzbmlwcGV0IiwibGlicyIsIkNvcHlTbmlwcGV0IiwicHJpbnRsaXN0IiwiSlNPTiIsInBhcnNlIiwicHJpbnRlZCIsIm5ld1ByaW50ZWQiLCJwcmludGFibGUiLCJwcmludGFibGVZQU1MIiwiQ29weVByaW50YWJsZSIsInN0cmluZ2lmeSIsImRhdGEiLCJuYW1lIiwiY3AiLCJkaXIiLCJmaWx0ZXIiLCJmaWxlIiwiUmVnRXhwIiwiU3RyaW5nIiwicmF3IiwidGVzdCIsImZvckVhY2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsWUFBWSxHQUFHLHdCQUFyQjs7QUFFZSxTQUFTQyxLQUFULENBQWdCQyxNQUFoQixFQUF3QkMsT0FBeEIsRUFBaUNDLEdBQUcsR0FBRyxLQUF2QyxFQUE4QztBQUMzRCxRQUFNQyxHQUFHLEdBQUcsbUJBQVFDLE9BQU8sQ0FBQ0MsR0FBUixFQUFSLEVBQXVCTCxNQUFNLENBQUNNLFVBQTlCLEVBQTBDTixNQUFNLENBQUNPLE1BQWpELENBQVo7QUFDQSxRQUFNQyxJQUFJLEdBQUcsbUJBQVFKLE9BQU8sQ0FBQ0MsR0FBUixFQUFSLEVBQXVCTCxNQUFNLENBQUNNLFVBQTlCLEVBQTBDTixNQUFNLENBQUNTLE9BQWpELENBQWI7QUFFQSxRQUFNQyxhQUFhLEdBQUcsbUJBQVFQLEdBQVIsRUFBYSxnQkFBYixDQUF0QjtBQUNBLFFBQU1R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T0FBT0EsSUFBUCxLQUFnQixRQUE1QixFQUFzQztBQUNwQyxVQUFNRyxHQUFHLEdBQUcsbUJBQVE1QixPQUFPLENBQUNDLEdBQVIsRUFBUixFQUF1QndCLElBQXZCLENBQVo7QUFDQSw4QkFBWUcsR0FBWixFQUNHQyxNQURILENBQ1VDLElBQUksSUFBSSxJQUFJQyxNQUFKLENBQ2RDLE1BQU0sQ0FBQ0MsR0FBSSxJQUFHdkMsWUFBYSxTQURiLEVBQ3VCd0MsSUFEdkIsQ0FDNEJKLElBRDVCLENBRGxCLEVBR0dLLE9BSEgsQ0FHV0wsSUFBSSxJQUFJO0FBQ2YsK0JBQVcsbUJBQVFGLEdBQVIsRUFBYUUsSUFBYixDQUFYO0FBQ0QsS0FMSDtBQU1EO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb3B5U3luYywgZXhpc3RzU3luYywgbWtkaXJzU3luYywgcmVhZGRpclN5bmMsIHJlYWRGaWxlU3luYywgcmVtb3ZlU3luYywgcmVuYW1lU3luYywgd3JpdGVGaWxlU3luYyB9IGZyb20gJ2ZzLWV4dHJhJ1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnXG5pbXBvcnQgYnVpbGRQcmludGFibGUgZnJvbSAnLi4vYnVpbGRlcnMvYnVpbGRQcmludGFibGUnXG5pbXBvcnQgeyBtYWtlU25pcHBldCB9IGZyb20gJy4uL2J1aWxkZXJzL2J1aWxkU25pcHBldHMnXG5pbXBvcnQgeyBidWlsZFdpa2kgfSBmcm9tICcuLi9idWlsZGVycy9idWlsZFdpa2knXG5cbmNvbnN0IGxpYm1hblByZWZpeCA9ICdsaWJtYW5fYXV0b19nZW5lcmF0ZWRfJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZCAoY29uZmlnLCBwcm9qZWN0LCBvbmUgPSBmYWxzZSkge1xuICBjb25zdCBzcmMgPSByZXNvbHZlKHByb2Nlc3MuY3dkKCksIGNvbmZpZy5Xb3JraW5nRGlyLCBjb25maWcuU3JjRGlyKVxuICBjb25zdCBkaXN0ID0gcmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBjb25maWcuV29ya2luZ0RpciwgY29uZmlnLkRpc3REaXIpXG5cbiAgY29uc3QgcHJpbnRsaXN0UGF0aCA9IHJlc29sdmUoc3JjLCAncHJpbnRsaXN0Lmpzb24nKVxuICBjb25zdCBwcmludGxpc3RVc2VkUGF0aCA9IHJlc29sdmUoc3JjLCAncHJpbnRsaXN0X3VzZWQuanNvbicpXG4gIGNvbnN0IHByaW50ZWRQYXRoID0gcmVzb2x2ZShzcmMsICdwcmludGVkLmpzb24nKVxuXG4gIGlmIChvbmUgJiYgIWV4aXN0c1N5bmMocHJpbnRsaXN0UGF0aCkpIHtcbiAgICB0aHJvdyBcIidwcmludGxpc3QuanNvbicgaXMgbmVlZGVkLiBidWlsZCAtLWluaXRcIlxuICB9XG5cbiAgaWYgKG9uZSAmJiAhZXhpc3RzU3luYyhwcmludGVkUGF0aCkpIHtcbiAgICB3cml0ZUZpbGVTeW5jKHByaW50ZWRQYXRoLCAne30nKVxuICB9XG5cbiAgY2hlY2soY29uZmlnLkNvcHlXaWtpLCAnd2lraScpXG5cbiAgcmVtb3ZlU3luYyhkaXN0KVxuICBta2RpcnNTeW5jKGRpc3QpXG4gIC8vIHdpa2njgpLkvZzjgotcbiAgYnVpbGRXaWtpKGNvbmZpZywgcHJvamVjdClcbiAgYXV0b1JlbW92ZShjb25maWcuQ29weVdpa2kpXG4gIGNvcHkoZGlzdCwgY29uZmlnLkNvcHlXaWtpLCAnd2lraScpXG4gIC8vIHNuaXBwZXRz44KS5L2c44KLKDHjg5XjgqHjgqTjg6spXG4gIGNvbnN0IHNuaXBwZXQgPSBtYWtlU25pcHBldChjb25maWcsIHByb2plY3QubGlicylcbiAgd3JpdGVGaWxlU3luYyhyZXNvbHZlKGRpc3QsICdsaWJtYW4uc25pcCcpLCBzbmlwcGV0KVxuICBjb3B5KGRpc3QsIGNvbmZpZy5Db3B5U25pcHBldCwgJ2xpYm1hbi5zbmlwJylcblxuICAvLyBwcmludGFibGUtb25lLXBhZ2XjgpLkvZzjgotcbiAgaWYgKG9uZSkge1xuICAgIGNvbnN0IHByaW50bGlzdCA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKHByaW50bGlzdFBhdGgpKVxuICAgIGNvbnN0IHByaW50ZWQgPSBKU09OLnBhcnNlKHJlYWRGaWxlU3luYyhwcmludGVkUGF0aCkpXG4gICAgY29uc3Qge3ByaW50ZWQ6IG5ld1ByaW50ZWQsIHByaW50YWJsZX0gPSBidWlsZFByaW50YWJsZShjb25maWcucHJpbnRhYmxlWUFNTCwgcHJpbnRsaXN0LCBwcmludGVkLCBwcm9qZWN0LmxpYnMpXG4gICAgd3JpdGVGaWxlU3luYyhyZXNvbHZlKGRpc3QsICdwcmludGFibGUubWQnKSwgcHJpbnRhYmxlKVxuICAgIGNvcHkoZGlzdCwgY29uZmlnLkNvcHlQcmludGFibGUsICdwcmludGFibGUubWQnKVxuICAgIHdyaXRlRmlsZVN5bmMocHJpbnRlZFBhdGgsIEpTT04uc3RyaW5naWZ5KG5ld1ByaW50ZWQpKVxuXG4gICAgcmVuYW1lU3luYyhwcmludGxpc3RQYXRoLCBwcmludGxpc3RVc2VkUGF0aClcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVjayAoZGF0YSwgbmFtZSkge1xuICBpZiAoZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBjcCA9IHJlc29sdmUocHJvY2Vzcy5jd2QoKSwgZGF0YSlcbiAgICBpZiAoIWV4aXN0c1N5bmMoY3ApKSB7XG4gICAgICB0aHJvdyBgJHtjcH0gZG9lc24ndCBleGlzdCwgc2tpcHBlZCBjb3B5IGAgKyBuYW1lXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvcHkgKGRpc3QsIGRhdGEsIG5hbWUpIHtcbiAgaWYgKGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgY3AgPSByZXNvbHZlKHByb2Nlc3MuY3dkKCksIGRhdGEpXG4gICAgY29weVN5bmMocmVzb2x2ZShkaXN0LCBuYW1lKSwgY3ApXG4gIH1cbn1cblxuZnVuY3Rpb24gYXV0b1JlbW92ZSAoZGF0YSkge1xuICBpZiAoZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBkaXIgPSByZXNvbHZlKHByb2Nlc3MuY3dkKCksIGRhdGEpXG4gICAgcmVhZGRpclN5bmMoZGlyKVxuICAgICAgLmZpbHRlcihmaWxlID0+IG5ldyBSZWdFeHAoXG4gICAgICAgIFN0cmluZy5yYXdgXiR7bGlibWFuUHJlZml4fS4qXFwubWQkYCkudGVzdChmaWxlKSlcbiAgICAgIC5mb3JFYWNoKGZpbGUgPT4ge1xuICAgICAgICByZW1vdmVTeW5jKHJlc29sdmUoZGlyLCBmaWxlKSlcbiAgICAgIH0pXG4gIH1cbn1cbiJdfQ==