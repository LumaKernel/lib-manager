"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = build;

require("source-map-support/register");

var _fsExtra = require("fs-extra");

var _path = require("path");

var _buildPrintable = _interopRequireDefault(require("../builders/buildPrintable"));

var _buildSnippets = require("../builders/buildSnippets");

var _buildWiki = require("../builders/buildWiki");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const libmanPrefix = 'libman_auto_generated_';

function build(config, project, one = false) {
  const src = (0, _path.resolve)(process.cwd(), config.WorkingDir, config.SrcDir);
  const dist = (0, _path.resolve)(process.cwd(), config.WorkingDir, config.DistDir);
  const printlistPath = (0, _path.resolve)(src, 'printlist.json');
  const printlistUsedPath = (0, _path.resolve)(src, 'printlist_used.json');
  const printedPath = (0, _path.resolve)(src, 'printed.json');

  if (one && !(0, _fsExtra.existsSync)(printlistPath)) {
    throw "'printlist.json' is needed. build --init";
  }

  if (one && !(0, _fsExtra.existsSync)(printedPath)) {
    (0, _fsExtra.writeFileSync)(printedPath, '{}');
  }

  (0, _fsExtra.removeSync)(dist);
  (0, _fsExtra.mkdirsSync)(dist); // wikiを作る

  (0, _buildWiki.buildWiki)(config, project);

  if (check(config.CopyWiki, 'wiki')) {
    autoRemove(config.CopyWiki);
    copy(dist, config.CopyWiki, 'wiki');
  } // snippetsを作る(1ファイル)


  const snippet = (0, _buildSnippets.makeSnippet)(config, project.libs);
  (0, _fsExtra.writeFileSync)((0, _path.resolve)(dist, 'libman.snip'), snippet);
  copy(dist, config.CopySnippet, 'libman.snip'); // printable-one-pageを作る

  if (one) {
    const printlist = JSON.parse((0, _fsExtra.readFileSync)(printlistPath));
    const printed = JSON.parse((0, _fsExtra.readFileSync)(printedPath));
    const {
      printed: newPrinted,
      printable
    } = (0, _buildPrintable.default)(config.printableYAML, printlist, printed, project.libs);
    (0, _fsExtra.writeFileSync)((0, _path.resolve)(dist, 'printable.md'), printable);
    copy(dist, config.CopyPrintable, 'printable.md');
    (0, _fsExtra.writeFileSync)(printedPath, JSON.stringify(newPrinted));
    (0, _fsExtra.renameSync)(printlistPath, printlistUsedPath);
  }
}

function check(data, name) {
  if (!data) return false;

  if (data && typeof data === 'string') {
    const cp = (0, _path.resolve)(process.cwd(), data);

    if (!(0, _fsExtra.existsSync)(cp)) {
      console.error(`${cp} doesn't exist, skipped copy ` + name);
      return false;
    }
  }

  return true;
}

function copy(dist, data, name) {
  if (data && typeof data === 'string') {
    const cp = (0, _path.resolve)(process.cwd(), data);
    (0, _fsExtra.copySync)((0, _path.resolve)(dist, name), cp);
  }
}

function autoRemove(data) {
  if (data && typeof data === 'string') {
    const dir = (0, _path.resolve)(process.cwd(), data);
    (0, _fsExtra.readdirSync)(dir).filter(file => new RegExp(String.raw`^${libmanPrefix}.*\.md$`).test(file)).forEach(file => {
      (0, _fsExtra.removeSync)((0, _path.resolve)(dir, file));
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9idWlsZC5qcyJdLCJuYW1lcyI6WyJsaWJtYW5QcmVmaXgiLCJidWlsZCIsImNvbmZpZyIsInByb2plY3QiLCJvbmUiLCJzcmMiLCJwcm9jZXNzIiwiY3dkIiwiV29ya2luZ0RpciIsIlNyY0RpciIsImRpc3QiLCJEaXN0RGlyIiwicHJpbnRsaXN0UGF0aCIsInByaW50bGlzdFVzZWRQYXRoIiwicHJpbnRlZFBhdGgiLCJjaGVjayIsIkNvcHlXaWtpIiwiYXV0b1JlbW92ZSIsImNvcHkiLCJzbmlwcGV0IiwibGlicyIsIkNvcHlTbmlwcGV0IiwicHJpbnRsaXN0IiwiSlNPTiIsInBhcnNlIiwicHJpbnRlZCIsIm5ld1ByaW50ZWQiLCJwcmludGFibGUiLCJwcmludGFibGVZQU1MIiwiQ29weVByaW50YWJsZSIsInN0cmluZ2lmeSIsImRhdGEiLCJuYW1lIiwiY3AiLCJjb25zb2xlIiwiZXJyb3IiLCJkaXIiLCJmaWx0ZXIiLCJmaWxlIiwiUmVnRXhwIiwiU3RyaW5nIiwicmF3IiwidGVzdCIsImZvckVhY2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsWUFBWSxHQUFHLHdCQUFyQjs7QUFFZSxTQUFTQyxLQUFULENBQWdCQyxNQUFoQixFQUF3QkMsT0FBeEIsRUFBaUNDLEdBQUcsR0FBRyxLQUF2QyxFQUE4QztBQUMzRCxRQUFNQyxHQUFHLEdBQUcsbUJBQVFDLE9BQU8sQ0FBQ0MsR0FBUixFQUFSLEVBQXVCTCxNQUFNLENBQUNNLFVBQTlCLEVBQTBDTixNQUFNLENBQUNPLE1BQWpELENBQVo7QUFDQSxRQUFNQyxJQUFJLEdBQUcsbUJBQVFKLE9BQU8sQ0FBQ0MsR0FBUixFQUFSLEVBQXVCTCxNQUFNLENBQUNNLFVBQTlCLEVBQTBDTixNQUFNLENBQUNTLE9BQWpELENBQWI7QUFFQSxRQUFNQyxhQUFhLEdBQUcsbUJBQVFQLEdBQVIsRUFBYSxnQkFB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QUNBLDJCQUFTLG1CQUFRckIsSUFBUixFQUFjc0IsSUFBZCxDQUFULEVBQThCQyxFQUE5QjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU2hCLFVBQVQsQ0FBcUJjLElBQXJCLEVBQTJCO0FBQ3pCLE1BQUlBLElBQUksSUFBSSxPQUFPQSxJQUFQLEtBQWdCLFFBQTVCLEVBQXNDO0FBQ3BDLFVBQU1LLEdBQUcsR0FBRyxtQkFBUTlCLE9BQU8sQ0FBQ0MsR0FBUixFQUFSLEVBQXVCd0IsSUFBdkIsQ0FBWjtBQUNBLDhCQUFZSyxHQUFaLEVBQ0dDLE1BREgsQ0FDVUMsSUFBSSxJQUFJLElBQUlDLE1BQUosQ0FDZEMsTUFBTSxDQUFDQyxHQUFJLElBQUd6QyxZQUFhLFNBRGIsRUFDdUIwQyxJQUR2QixDQUM0QkosSUFENUIsQ0FEbEIsRUFHR0ssT0FISCxDQUdXTCxJQUFJLElBQUk7QUFDZiwrQkFBVyxtQkFBUUYsR0FBUixFQUFhRSxJQUFiLENBQVg7QUFDRCxLQUxIO0FBTUQ7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvcHlTeW5jLCBleGlzdHNTeW5jLCBta2RpcnNTeW5jLCByZWFkZGlyU3luYywgcmVhZEZpbGVTeW5jLCByZW1vdmVTeW5jLCByZW5hbWVTeW5jLCB3cml0ZUZpbGVTeW5jIH0gZnJvbSAnZnMtZXh0cmEnXG5pbXBvcnQgeyByZXNvbHZlIH0gZnJvbSAncGF0aCdcbmltcG9ydCBidWlsZFByaW50YWJsZSBmcm9tICcuLi9idWlsZGVycy9idWlsZFByaW50YWJsZSdcbmltcG9ydCB7IG1ha2VTbmlwcGV0IH0gZnJvbSAnLi4vYnVpbGRlcnMvYnVpbGRTbmlwcGV0cydcbmltcG9ydCB7IGJ1aWxkV2lraSB9IGZyb20gJy4uL2J1aWxkZXJzL2J1aWxkV2lraSdcblxuY29uc3QgbGlibWFuUHJlZml4ID0gJ2xpYm1hbl9hdXRvX2dlbmVyYXRlZF8nXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkIChjb25maWcsIHByb2plY3QsIG9uZSA9IGZhbHNlKSB7XG4gIGNvbnN0IHNyYyA9IHJlc29sdmUocHJvY2Vzcy5jd2QoKSwgY29uZmlnLldvcmtpbmdEaXIsIGNvbmZpZy5TcmNEaXIpXG4gIGNvbnN0IGRpc3QgPSByZXNvbHZlKHByb2Nlc3MuY3dkKCksIGNvbmZpZy5Xb3JraW5nRGlyLCBjb25maWcuRGlzdERpcilcblxuICBjb25zdCBwcmludGxpc3RQYXRoID0gcmVzb2x2ZShzcmMsICdwcmludGxpc3QuanNvbicpXG4gIGNvbnN0IHByaW50bGlzdFVzZWRQYXRoID0gcmVzb2x2ZShzcmMsICdwcmludGxpc3RfdXNlZC5qc29uJylcbiAgY29uc3QgcHJpbnRlZFBhdGggPSByZXNvbHZlKHNyYywgJ3ByaW50ZWQuanNvbicpXG5cbiAgaWYgKG9uZSAmJiAhZXhpc3RzU3luYyhwcmludGxpc3RQYXRoKSkge1xuICAgIHRocm93IFwiJ3ByaW50bGlzdC5qc29uJyBpcyBuZWVkZWQuIGJ1aWxkIC0taW5pdFwiXG4gIH1cblxuICBpZiAob25lICYmICFleGlzdHNTeW5jKHByaW50ZWRQYXRoKSkge1xuICAgIHdyaXRlRmlsZVN5bmMocHJpbnRlZFBhdGgsICd7fScpXG4gIH1cblxuXG4gIHJlbW92ZVN5bmMoZGlzdClcbiAgbWtkaXJzU3luYyhkaXN0KVxuICAvLyB3aWtp44KS5L2c44KLXG4gIGJ1aWxkV2lraShjb25maWcsIHByb2plY3QpXG5cbiAgaWYgKGNoZWNrKGNvbmZpZy5Db3B5V2lraSwgJ3dpa2knKSkge1xuICAgIGF1dG9SZW1vdmUoY29uZmlnLkNvcHlXaWtpKVxuICAgIGNvcHkoZGlzdCwgY29uZmlnLkNvcHlXaWtpLCAnd2lraScpXG4gIH1cbiAgLy8gc25pcHBldHPjgpLkvZzjgosoMeODleOCoeOCpOODqylcbiAgY29uc3Qgc25pcHBldCA9IG1ha2VTbmlwcGV0KGNvbmZpZywgcHJvamVjdC5saWJzKVxuICB3cml0ZUZpbGVTeW5jKHJlc29sdmUoZGlzdCwgJ2xpYm1hbi5zbmlwJyksIHNuaXBwZXQpXG4gIGNvcHkoZGlzdCwgY29uZmlnLkNvcHlTbmlwcGV0LCAnbGlibWFuLnNuaXAnKVxuXG4gIC8vIHByaW50YWJsZS1vbmUtcGFnZeOCkuS9nOOCi1xuICBpZiAob25lKSB7XG4gICAgY29uc3QgcHJpbnRsaXN0ID0gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMocHJpbnRsaXN0UGF0aCkpXG4gICAgY29uc3QgcHJpbnRlZCA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKHByaW50ZWRQYXRoKSlcbiAgICBjb25zdCB7cHJpbnRlZDogbmV3UHJpbnRlZCwgcHJpbnRhYmxlfSA9IGJ1aWxkUHJpbnRhYmxlKGNvbmZpZy5wcmludGFibGVZQU1MLCBwcmludGxpc3QsIHByaW50ZWQsIHByb2plY3QubGlicylcbiAgICB3cml0ZUZpbGVTeW5jKHJlc29sdmUoZGlzdCwgJ3ByaW50YWJsZS5tZCcpLCBwcmludGFibGUpXG4gICAgY29weShkaXN0LCBjb25maWcuQ29weVByaW50YWJsZSwgJ3ByaW50YWJsZS5tZCcpXG4gICAgd3JpdGVGaWxlU3luYyhwcmludGVkUGF0aCwgSlNPTi5zdHJpbmdpZnkobmV3UHJpbnRlZCkpXG5cbiAgICByZW5hbWVTeW5jKHByaW50bGlzdFBhdGgsIHByaW50bGlzdFVzZWRQYXRoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrIChkYXRhLCBuYW1lKSB7XG4gIGlmICghZGF0YSkgcmV0dXJuIGZhbHNlXG4gIGlmIChkYXRhICYmIHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IGNwID0gcmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBkYXRhKVxuICAgIGlmICghZXhpc3RzU3luYyhjcCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYCR7Y3B9IGRvZXNuJ3QgZXhpc3QsIHNraXBwZWQgY29weSBgICsgbmFtZSlcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBjb3B5IChkaXN0LCBkYXRhLCBuYW1lKSB7XG4gIGlmIChkYXRhICYmIHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IGNwID0gcmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBkYXRhKVxuICAgIGNvcHlTeW5jKHJlc29sdmUoZGlzdCwgbmFtZSksIGNwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGF1dG9SZW1vdmUgKGRhdGEpIHtcbiAgaWYgKGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgZGlyID0gcmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBkYXRhKVxuICAgIHJlYWRkaXJTeW5jKGRpcilcbiAgICAgIC5maWx0ZXIoZmlsZSA9PiBuZXcgUmVnRXhwKFxuICAgICAgICBTdHJpbmcucmF3YF4ke2xpYm1hblByZWZpeH0uKlxcLm1kJGApLnRlc3QoZmlsZSkpXG4gICAgICAuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgICAgcmVtb3ZlU3luYyhyZXNvbHZlKGRpciwgZmlsZSkpXG4gICAgICB9KVxuICB9XG59XG4iXX0=