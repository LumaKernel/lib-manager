'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = build;

require('source-map-support/register');

var _fsExtra = require('fs-extra');

var _path = require('path');

var _buildPrintable = require('../builders/buildPrintable');

var _buildPrintable2 = _interopRequireDefault(_buildPrintable);

var _buildSnippets = require('../builders/buildSnippets');

var _buildWiki = require('../builders/buildWiki');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const libmanPrefix = 'libman_auto_generated_';

function build(config, project, one = false) {
  const src = (0, _path.resolve)(process.cwd(), config.WorkingDir, config.SrcDir);
  const dist = (0, _path.resolve)(process.cwd(), config.WorkingDir, config.DistDir);

  const printlistPath = (0, _path.resolve)(src, 'printlist.json');
  const printlistUsedPath = (0, _path.resolve)(src, 'printlist_used.json');
  const printedPath = (0, _path.resolve)(src, 'printed.json');

  if (one && !(0, _fsExtra.existsSync)(printlistPath)) {
    throw "'printlist.json' is needed. build --init";
  }

  if (one && !(0, _fsExtra.existsSync)(printedPath)) {
    (0, _fsExtra.writeFileSync)(printedPath, '{}');
  }

  check(config.CopyWiki, 'wiki');

  (0, _fsExtra.removeSync)(dist);
  (0, _fsExtra.mkdirsSync)(dist);
  // wikiを作る
  (0, _buildWiki.buildWiki)(config, project);
  autoRemove(config.CopyWiki);
  copy(dist, config.CopyWiki, 'wiki');
  // snippetsを作る(1ファイル)
  const snippet = (0, _buildSnippets.makeSnippet)(config, project.libs);
  (0, _fsExtra.writeFileSync)((0, _path.resolve)(dist, 'libman.snip'), snippet);
  copy(dist, config.CopySnippet, 'libman.snip');

  // printable-one-pageを作る
  if (one) {
    const printlist = JSON.parse((0, _fsExtra.readFileSync)(printlistPath));
    const printed = JSON.parse((0, _fsExtra.readFileSync)(printedPath));
    const { printed: newPrinted, printable } = (0, _buildPrintable2.default)(config.printableYAML, printlist, printed, project.libs);
    (0, _fsExtra.writeFileSync)((0, _path.resolve)(dist, 'printable.md'), printable);
    copy(dist, config.CopyPrintable, 'printable.md');
    (0, _fsExtra.writeFileSync)(printedPath, JSON.stringify(newPrinted));

    (0, _fsExtra.renameSync)(printlistPath, printlistUsedPath);
  }
}

function check(data, name) {
  if (data && typeof data === 'string') {
    const cp = (0, _path.resolve)(process.cwd(), data);
    if (!(0, _fsExtra.existsSync)(cp)) {
      throw `${cp} doesn't exist, skipped copy ` + name;
    }
  }
}

function copy(dist, data, name) {
  if (data && typeof data === 'string') {
    const cp = (0, _path.resolve)(process.cwd(), data);
    (0, _fsExtra.copySync)((0, _path.resolve)(dist, name), cp);
  }
}

function autoRemove(data) {
  if (data && typeof data === 'string') {
    const dir = (0, _path.resolve)(process.cwd(), data);
    (0, _fsExtra.readdirSync)(dir).filter(file => new RegExp(String.raw`^${libmanPrefix}.*\.md$`).test(file)).forEach(file => {
      (0, _fsExtra.removeSync)((0, _path.resolve)(dir, file));
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9idWlsZC5qcyJdLCJuYW1lcyI6WyJidWlsZCIsImxpYm1hblByZWZpeCIsImNvbmZpZyIsInByb2plY3QiLCJvbmUiLCJzcmMiLCJwcm9jZXNzIiwiY3dkIiwiV29ya2luZ0RpciIsIlNyY0RpciIsImRpc3QiLCJEaXN0RGlyIiwicHJpbnRsaXN0UGF0aCIsInByaW50bGlzdFVzZWRQYXRoIiwicHJpbnRlZFBhdGgiLCJjaGVjayIsIkNvcHlXaWtpIiwiYXV0b1JlbW92ZSIsImNvcHkiLCJzbmlwcGV0IiwibGlicyIsIkNvcHlTbmlwcGV0IiwicHJpbnRsaXN0IiwiSlNPTiIsInBhcnNlIiwicHJpbnRlZCIsIm5ld1ByaW50ZWQiLCJwcmludGFibGUiLCJwcmludGFibGVZQU1MIiwiQ29weVByaW50YWJsZSIsInN0cmluZ2lmeSIsImRhdGEiLCJuYW1lIiwiY3AiLCJkaXIiLCJmaWx0ZXIiLCJmaWxlIiwiUmVnRXhwIiwiU3RyaW5nIiwicmF3IiwidGVzdCIsImZvckVhY2giXSwibWFwcGluZ3MiOiI7Ozs7O2tCQVF3QkEsSzs7OztBQVJ4Qjs7QUFDQTs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUMsZUFBZSx3QkFBckI7O0FBRWUsU0FBU0QsS0FBVCxDQUFnQkUsTUFBaEIsRUFBd0JDLE9BQXhCLEVBQWlDQyxNQUFNLEtBQXZDLEVBQThDO0FBQzNELFFBQU1DLE1BQU0sbUJBQVFDLFFBQVFDLEdBQVIsRUFBUixFQUF1QkwsT0FBT00sVUFBOUIsRUFBMENOLE9BQU9PLE1BQWpELENBQVo7QUFDQSxRQUFNQyxPQUFPLG1CQUFRSixRQUFRQyxHQUFSLEVBQVIsRUFBdUJMLE9BQU9NLFVBQTlCLEVBQTBDTixPQUFPUyxPQUFqRCxDQUFiOztBQUVBLFFBQU1DLGdCQUFnQixtQkFBUVAsR0FBUixFQUFhLGdCQUFiLENBQXRCO0FBQ0EsUUFBTVEsb0JBQW9CLG1CQUFRUixHQUFSLEVBQWEscUJBQWIsQ0FBMUI7QUFD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IiwiZmlsZSI6ImJ1aWxkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29weVN5bmMsIGV4aXN0c1N5bmMsIG1rZGlyc1N5bmMsIHJlYWRkaXJTeW5jLCByZWFkRmlsZVN5bmMsIHJlbW92ZVN5bmMsIHJlbmFtZVN5bmMsIHdyaXRlRmlsZVN5bmMgfSBmcm9tICdmcy1leHRyYSdcbmltcG9ydCB7IHJlc29sdmUgfSBmcm9tICdwYXRoJ1xuaW1wb3J0IGJ1aWxkUHJpbnRhYmxlIGZyb20gJy4uL2J1aWxkZXJzL2J1aWxkUHJpbnRhYmxlJ1xuaW1wb3J0IHsgbWFrZVNuaXBwZXQgfSBmcm9tICcuLi9idWlsZGVycy9idWlsZFNuaXBwZXRzJ1xuaW1wb3J0IHsgYnVpbGRXaWtpIH0gZnJvbSAnLi4vYnVpbGRlcnMvYnVpbGRXaWtpJ1xuXG5jb25zdCBsaWJtYW5QcmVmaXggPSAnbGlibWFuX2F1dG9fZ2VuZXJhdGVkXydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGQgKGNvbmZpZywgcHJvamVjdCwgb25lID0gZmFsc2UpIHtcbiAgY29uc3Qgc3JjID0gcmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBjb25maWcuV29ya2luZ0RpciwgY29uZmlnLlNyY0RpcilcbiAgY29uc3QgZGlzdCA9IHJlc29sdmUocHJvY2Vzcy5jd2QoKSwgY29uZmlnLldvcmtpbmdEaXIsIGNvbmZpZy5EaXN0RGlyKVxuXG4gIGNvbnN0IHByaW50bGlzdFBhdGggPSByZXNvbHZlKHNyYywgJ3ByaW50bGlzdC5qc29uJylcbiAgY29uc3QgcHJpbnRsaXN0VXNlZFBhdGggPSByZXNvbHZlKHNyYywgJ3ByaW50bGlzdF91c2VkLmpzb24nKVxuICBjb25zdCBwcmludGVkUGF0aCA9IHJlc29sdmUoc3JjLCAncHJpbnRlZC5qc29uJylcblxuICBpZiAob25lICYmICFleGlzdHNTeW5jKHByaW50bGlzdFBhdGgpKSB7XG4gICAgdGhyb3cgXCIncHJpbnRsaXN0Lmpzb24nIGlzIG5lZWRlZC4gYnVpbGQgLS1pbml0XCJcbiAgfVxuXG4gIGlmIChvbmUgJiYgIWV4aXN0c1N5bmMocHJpbnRlZFBhdGgpKSB7XG4gICAgd3JpdGVGaWxlU3luYyhwcmludGVkUGF0aCwgJ3t9JylcbiAgfVxuXG4gIGNoZWNrKGNvbmZpZy5Db3B5V2lraSwgJ3dpa2knKVxuXG4gIHJlbW92ZVN5bmMoZGlzdClcbiAgbWtkaXJzU3luYyhkaXN0KVxuICAvLyB3aWtp44KS5L2c44KLXG4gIGJ1aWxkV2lraShjb25maWcsIHByb2plY3QpXG4gIGF1dG9SZW1vdmUoY29uZmlnLkNvcHlXaWtpKVxuICBjb3B5KGRpc3QsIGNvbmZpZy5Db3B5V2lraSwgJ3dpa2knKVxuICAvLyBzbmlwcGV0c+OCkuS9nOOCiygx44OV44Kh44Kk44OrKVxuICBjb25zdCBzbmlwcGV0ID0gbWFrZVNuaXBwZXQoY29uZmlnLCBwcm9qZWN0LmxpYnMpXG4gIHdyaXRlRmlsZVN5bmMocmVzb2x2ZShkaXN0LCAnbGlibWFuLnNuaXAnKSwgc25pcHBldClcbiAgY29weShkaXN0LCBjb25maWcuQ29weVNuaXBwZXQsICdsaWJtYW4uc25pcCcpXG5cbiAgLy8gcHJpbnRhYmxlLW9uZS1wYWdl44KS5L2c44KLXG4gIGlmIChvbmUpIHtcbiAgICBjb25zdCBwcmludGxpc3QgPSBKU09OLnBhcnNlKHJlYWRGaWxlU3luYyhwcmludGxpc3RQYXRoKSlcbiAgICBjb25zdCBwcmludGVkID0gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMocHJpbnRlZFBhdGgpKVxuICAgIGNvbnN0IHtwcmludGVkOiBuZXdQcmludGVkLCBwcmludGFibGV9ID0gYnVpbGRQcmludGFibGUoY29uZmlnLnByaW50YWJsZVlBTUwsIHByaW50bGlzdCwgcHJpbnRlZCwgcHJvamVjdC5saWJzKVxuICAgIHdyaXRlRmlsZVN5bmMocmVzb2x2ZShkaXN0LCAncHJpbnRhYmxlLm1kJyksIHByaW50YWJsZSlcbiAgICBjb3B5KGRpc3QsIGNvbmZpZy5Db3B5UHJpbnRhYmxlLCAncHJpbnRhYmxlLm1kJylcbiAgICB3cml0ZUZpbGVTeW5jKHByaW50ZWRQYXRoLCBKU09OLnN0cmluZ2lmeShuZXdQcmludGVkKSlcblxuICAgIHJlbmFtZVN5bmMocHJpbnRsaXN0UGF0aCwgcHJpbnRsaXN0VXNlZFBhdGgpXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2sgKGRhdGEsIG5hbWUpIHtcbiAgaWYgKGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgY3AgPSByZXNvbHZlKHByb2Nlc3MuY3dkKCksIGRhdGEpXG4gICAgaWYgKCFleGlzdHNTeW5jKGNwKSkge1xuICAgICAgdGhyb3cgYCR7Y3B9IGRvZXNuJ3QgZXhpc3QsIHNraXBwZWQgY29weSBgICsgbmFtZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb3B5IChkaXN0LCBkYXRhLCBuYW1lKSB7XG4gIGlmIChkYXRhICYmIHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IGNwID0gcmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBkYXRhKVxuICAgIGNvcHlTeW5jKHJlc29sdmUoZGlzdCwgbmFtZSksIGNwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGF1dG9SZW1vdmUgKGRhdGEpIHtcbiAgaWYgKGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgZGlyID0gcmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBkYXRhKVxuICAgIHJlYWRkaXJTeW5jKGRpcilcbiAgICAgIC5maWx0ZXIoZmlsZSA9PiBuZXcgUmVnRXhwKFxuICAgICAgICBTdHJpbmcucmF3YF4ke2xpYm1hblByZWZpeH0uKlxcLm1kJGApLnRlc3QoZmlsZSkpXG4gICAgICAuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgICAgcmVtb3ZlU3luYyhyZXNvbHZlKGRpciwgZmlsZSkpXG4gICAgICB9KVxuICB9XG59XG4iXX0=