"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fix = fix;
exports.applyLibraries = applyLibraries;
exports.applyTemplates = applyTemplates;

require("source-map-support/register");

var _fs = require("fs");

var _path = _interopRequireDefault(require("path"));

var _backup = _interopRequireDefault(require("../makers/backup"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  resolve
} = _path.default;

function fix(config, project) {
  (0, _backup.default)(config);
  applyLibraries(config, project.libs, true);
  applyTemplates(config, project.templates, true);
}
/**
 * backup before using
 */


function applyLibraries(config, libs, apply = false) {
  const src = resolve(process.cwd(), config.WorkingDir, config.SrcDir);
  const changes = [];
  Object.values(libs).forEach(el => {
    if (el.old === el.refactored) return;
    const path = resolve(src, ...el.namespace.split('/'), el.filename);
    changes.push([...el.namespace.split('/'), el.filename].filter(e => e).join('/'));
    if (apply) (0, _fs.writeFileSync)(path, el.refactored);
  });
  return changes;
}
/**
 * backup before using
 */


function applyTemplates(config, templates, apply = false) {
  const src = resolve(process.cwd(), config.WorkingDir, config.SrcDir);
  const changes = [];
  Object.keys(templates).forEach(key => {
    const el = templates[key];
    if (el.code === el.old) return;
    const path = resolve(src, ...el.namespace.split('/'), el.filename);
    changes.push([...el.namespace.split('/'), el.filename].filter(e => e).join('/'));
    if (apply) (0, _fs.writeFileSync)(path, el.code);
  });
  return changes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9maXguanMiXSwibmFtZXMiOlsicmVzb2x2ZSIsInBhdGgiLCJmaXgiLCJjb25maWciLCJwcm9qZWN0IiwiYXBwbHlMaWJyYXJpZXMiLCJsaWJzIiwiYXBwbHlUZW1wbGF0ZXMiLCJ0ZW1wbGF0ZXMiLCJhcHBseSIsInNyYyIsInByb2Nlc3MiLCJjd2QiLCJXb3JraW5nRGlyIiwiU3JjRGlyIiwiY2hhbmdlcyIsIk9iamVjdCIsInZhbHVlcyIsImZvckVhY2giLCJlbCIsIm9sZCIsInJlZmFjdG9yZWQiLCJuYW1lc3BhY2UiLCJzcGxpdCIsImZpbGVuYW1lIiwicHVzaCIsImZpbHRlciIsImUiLCJqb2luIiwia2V5cyIsImtleSIsImNvZGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFDQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBY0MsYUFBcEI7O0FBRU8sU0FBU0MsR0FBVCxDQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixFQUErQjtBQUNwQyx1QkFBT0QsTUFBUDtBQUNBRSxFQUFBQSxjQUFjLENBQUNGLE1BQUQsRUFBU0MsT0FBTyxDQUFDRSxJQUFqQixFQUF1QixJQUF2QixDQUFkO0FBQ0FDLEVBQUFBLGNBQWMsQ0FBQ0osTUFBRCxFQUFTQyxPQUFPLENBQUNJLFNBQWpCLEVBQTRCLElBQTVCLENBQWQ7QUFDRDtBQUVEOzs7OztBQUdPLFNBQVNILGNBQVQsQ0FBeUJGLE1BQXpCLEVBQWlDRyxJQUFqQyxFQUF1Q0csS0FBSyxHQUFHLEtBQS9DLEVBQXNEO0FBQzNELFFBQU1DLEdBQUcsR0FBR1YsT0FBTyxDQUFDVyxPQUFPLENBQUNDLEdBQVIsRUFBRCxFQUFnQlQsTUFBTSxDQUFDVSxVQUF2QixFQUFtQ1YsTUFBTSxDQUFDVyxNQUExQyxDQUFuQjtBQUNBLFFBQU1DLE9BQU8sR0FBRyxFQUFoQjtBQUNBQyxFQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBY1gsSUFBZCxFQUFvQlksT0FBcEIsQ0FBNEJDLEVBQUUsSUFBSTtBQUNoQyxRQUFJQSxFQUFFLENBQUNDLEdBQUgsS0FBV0QsRUFBRSxDQUFDRSxVQUFsQixFQUE4QjtBQUM5QixVQUFNcEIsSUFBSSxHQUFHRCxPQUFPLENBQUNVLEdBQUQsRUFBTSxHQUFHUyxFQUFFLENBQUNHLFNBQUgsQ0FBYUMsS0FBYixDQUFtQixHQUFuQixDQUFULEVBQWtDSixFQUFFLENBQUNLLFFBQXJDLENBQXBCO0FBQ0FULElBQUFBLE9BQU8sQ0FBQ1UsSUFBUixDQUFhLENBQUMsR0FBR04sRUFBRSxDQUFDRyxTQUFILENBQWFDLEtBQWIsQ0FBbUIsR0FBbkIsQ0FBSixFQUE2QkosRUFBRSxDQUFDSyxRQUFoQyxFQUEwQ0UsTUFBMUMsQ0FBaURDLENBQUMsSUFBSUEsQ0FBdEQsRUFBeURDLElBQXpELENBQThELEdBQTlELENBQWI7QUFDQSxRQUFJbkIsS0FBSixFQUFXLHVCQUFjUixJQUFkLEVBQW9Ca0IsRUFBRSxDQUFDRSxVQUF2QjtBQUNaLEdBTEQ7QUFNQSxTQUFPTixPQUFQO0FBQ0Q7QUFFRDs7Ozs7QUFHTyxTQUFTUixjQUFULENBQXlCSixNQUF6QixFQUFpQ0ssU0FBakMsRUFBNENDLEtBQUssR0FBRyxLQUFwRCxFQUEyRDtBQUNoRSxRQUFNQyxHQUFHLEdBQUdWLE9BQU8sQ0FBQ1csT0FBTyxDQUFDQyxHQUFSLEVBQUQsRUFBZ0JULE1BQU0sQ0FBQ1UsVUFBdkIsRUFBbUNWLE1BQU0sQ0FBQ1csTUFBMUMsQ0FBbkI7QUFDQSxRQUFNQyxPQUFPLEdBQUcsRUFBaEI7QUFDQUMsRUFBQUEsTUFBTSxDQUFDYSxJQUFQLENBQVlyQixTQUFaLEVBQXVCVSxPQUF2QixDQUErQlksR0FBRyxJQUFJO0FBQ3BDLFVBQU1YLEVBQUUsR0FBR1gsU0FBUyxDQUFDc0IsR0FBRCxDQUFwQjtBQUNBLFFBQUlYLEVBQUUsQ0FBQ1ksSUFBSCxLQUFZWixFQUFFLENBQUNDLEdBQW5CLEVBQXdCO0FBQ3hCLFVBQU1uQixJQUFJLEdBQUdELE9BQU8sQ0FBQ1UsR0FBRCxFQUFNLEdBQUdTLEVBQUUsQ0FBQ0csU0FBSCxDQUFhQyxLQUFiLENBQW1CLEdBQW5CLENBQVQsRUFBa0NKLEVBQUUsQ0FBQ0ssUUFBckMsQ0FBcEI7QUFDQVQsSUFBQUEsT0FBTyxDQUFDVSxJQUFSLENBQWEsQ0FBQyxHQUFHTixFQUFFLENBQUNHLFNBQUgsQ0FBYUMsS0FBYixDQUFtQixHQUFuQixDQUFKLEVBQTZCSixFQUFFLENBQUNLLFFBQWhDLEVBQTBDRSxNQUExQyxDQUFpREMsQ0FBQyxJQUFJQSxDQUF0RCxFQUF5REMsSUFBekQsQ0FBOEQsR0FBOUQsQ0FBYjtBQUNBLFFBQUluQixLQUFKLEVBQVcsdUJBQWNSLElBQWQsRUFBb0JrQixFQUFFLENBQUNZLElBQXZCO0FBQ1osR0FORDtBQU9BLFNBQU9oQixPQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3cml0ZUZpbGVTeW5jIH0gZnJvbSAnZnMnXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IGJhY2t1cCBmcm9tICcuLi9tYWtlcnMvYmFja3VwJ1xuY29uc3QgeyByZXNvbHZlIH0gPSBwYXRoXG5cbmV4cG9ydCBmdW5jdGlvbiBmaXggKGNvbmZpZywgcHJvamVjdCkge1xuICBiYWNrdXAoY29uZmlnKVxuICBhcHBseUxpYnJhcmllcyhjb25maWcsIHByb2plY3QubGlicywgdHJ1ZSlcbiAgYXBwbHlUZW1wbGF0ZXMoY29uZmlnLCBwcm9qZWN0LnRlbXBsYXRlcywgdHJ1ZSlcbn1cblxuLyoqXG4gKiBiYWNrdXAgYmVmb3JlIHVzaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUxpYnJhcmllcyAoY29uZmlnLCBsaWJzLCBhcHBseSA9IGZhbHNlKSB7XG4gIGNvbnN0IHNyYyA9IHJlc29sdmUocHJvY2Vzcy5jd2QoKSwgY29uZmlnLldvcmtpbmdEaXIsIGNvbmZpZy5TcmNEaXIpXG4gIGNvbnN0IGNoYW5nZXMgPSBbXVxuICBPYmplY3QudmFsdWVzKGxpYnMpLmZvckVhY2goZWwgPT4ge1xuICAgIGlmIChlbC5vbGQgPT09IGVsLnJlZmFjdG9yZWQpIHJldHVyblxuICAgIGNvbnN0IHBhdGggPSByZXNvbHZlKHNyYywgLi4uZWwubmFtZXNwYWNlLnNwbGl0KCcvJyksIGVsLmZpbGVuYW1lKVxuICAgIGNoYW5nZXMucHVzaChbLi4uZWwubmFtZXNwYWNlLnNwbGl0KCcvJyksIGVsLmZpbGVuYW1lXS5maWx0ZXIoZSA9PiBlKS5qb2luKCcvJykpXG4gICAgaWYgKGFwcGx5KSB3cml0ZUZpbGVTeW5jKHBhdGgsIGVsLnJlZmFjdG9yZWQpXG4gIH0pXG4gIHJldHVybiBjaGFuZ2VzXG59XG5cbi8qKlxuICogYmFja3VwIGJlZm9yZSB1c2luZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlUZW1wbGF0ZXMgKGNvbmZpZywgdGVtcGxhdGVzLCBhcHBseSA9IGZhbHNlKSB7XG4gIGNvbnN0IHNyYyA9IHJlc29sdmUocHJvY2Vzcy5jd2QoKSwgY29uZmlnLldvcmtpbmdEaXIsIGNvbmZpZy5TcmNEaXIpXG4gIGNvbnN0IGNoYW5nZXMgPSBbXVxuICBPYmplY3Qua2V5cyh0ZW1wbGF0ZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBjb25zdCBlbCA9IHRlbXBsYXRlc1trZXldXG4gICAgaWYgKGVsLmNvZGUgPT09IGVsLm9sZCkgcmV0dXJuXG4gICAgY29uc3QgcGF0aCA9IHJlc29sdmUoc3JjLCAuLi5lbC5uYW1lc3BhY2Uuc3BsaXQoJy8nKSwgZWwuZmlsZW5hbWUpXG4gICAgY2hhbmdlcy5wdXNoKFsuLi5lbC5uYW1lc3BhY2Uuc3BsaXQoJy8nKSwgZWwuZmlsZW5hbWVdLmZpbHRlcihlID0+IGUpLmpvaW4oJy8nKSlcbiAgICBpZiAoYXBwbHkpIHdyaXRlRmlsZVN5bmMocGF0aCwgZWwuY29kZSlcbiAgfSlcbiAgcmV0dXJuIGNoYW5nZXNcbn1cbiJdfQ==