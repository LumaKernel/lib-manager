'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fix = fix;
exports.applyLibraries = applyLibraries;
exports.applyTemplates = applyTemplates;

require('source-map-support/register');

var _fs = require('fs');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _backup = require('../makers/backup');

var _backup2 = _interopRequireDefault(_backup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const { resolve } = _path2.default;

function fix(config, project) {
  (0, _backup2.default)(config);
  applyLibraries(config, project.libs, true);
  applyTemplates(config, project.templates, true);
}

/**
 * backup before using
 */
function applyLibraries(config, libs, apply = false) {
  const src = resolve(process.cwd(), config.WorkingDir, config.SrcDir);
  const changes = [];
  Object.values(libs).forEach(el => {
    if (el.old === el.refactored) return;
    const path = resolve(src, ...el.namespace.split('/'), el.filename);
    changes.push([...el.namespace.split('/'), el.filename].filter(e => e).join('/'));
    if (apply) (0, _fs.writeFileSync)(path, el.refactored);
  });
  return changes;
}

/**
 * backup before using
 */
function applyTemplates(config, templates, apply = false) {
  const src = resolve(process.cwd(), config.WorkingDir, config.SrcDir);
  const changes = [];
  Object.keys(templates).forEach(key => {
    const el = templates[key];
    if (el.code === el.old) return;
    const path = resolve(src, ...el.namespace.split('/'), el.filename);
    changes.push([...el.namespace.split('/'), el.filename].filter(e => e).join('/'));
    if (apply) (0, _fs.writeFileSync)(path, el.code);
  });
  return changes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9maXguanMiXSwibmFtZXMiOlsiZml4IiwiYXBwbHlMaWJyYXJpZXMiLCJhcHBseVRlbXBsYXRlcyIsInJlc29sdmUiLCJwYXRoIiwiY29uZmlnIiwicHJvamVjdCIsImxpYnMiLCJ0ZW1wbGF0ZXMiLCJhcHBseSIsInNyYyIsInByb2Nlc3MiLCJjd2QiLCJXb3JraW5nRGlyIiwiU3JjRGlyIiwiY2hhbmdlcyIsIk9iamVjdCIsInZhbHVlcyIsImZvckVhY2giLCJlbCIsIm9sZCIsInJlZmFjdG9yZWQiLCJuYW1lc3BhY2UiLCJzcGxpdCIsImZpbGVuYW1lIiwicHVzaCIsImZpbHRlciIsImUiLCJqb2luIiwia2V5cyIsImtleSIsImNvZGUiXSwibWFwcGluZ3MiOiI7Ozs7O1FBS2dCQSxHLEdBQUFBLEc7UUFTQUMsYyxHQUFBQSxjO1FBZUFDLGMsR0FBQUEsYzs7OztBQTdCaEI7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBQ0EsTUFBTSxFQUFFQyxPQUFGLEtBQWNDLGNBQXBCOztBQUVPLFNBQVNKLEdBQVQsQ0FBY0ssTUFBZCxFQUFzQkMsT0FBdEIsRUFBK0I7QUFDcEMsd0JBQU9ELE1BQVA7QUFDQUosaUJBQWVJLE1BQWYsRUFBdUJDLFFBQVFDLElBQS9CLEVBQXFDLElBQXJDO0FBQ0FMLGlCQUFlRyxNQUFmLEVBQXVCQyxRQUFRRSxTQUEvQixFQUEwQyxJQUExQztBQUNEOztBQUVEOzs7QUFHTyxTQUFTUCxjQUFULENBQXlCSSxNQUF6QixFQUFpQ0UsSUFBakMsRUFBdUNFLFFBQVEsS0FBL0MsRUFBc0Q7QUFDM0QsUUFBTUMsTUFBTVAsUUFBUVEsUUFBUUMsR0FBUixFQUFSLEVBQXVCUCxPQUFPUSxVQUE5QixFQUEwQ1IsT0FBT1MsTUFBakQsQ0FBWjtBQUNBLFFBQU1DLFVBQVUsRUFBaEI7QUFDQUMsU0FBT0MsTUFBUCxDQUFjVixJQUFkLEVBQW9CVyxPQUFwQixDQUE0QkMsTUFBTTtBQUNoQyxRQUFJQSxHQUFHQyxHQUFILEtBQVdELEdBQUdFLFVBQWxCLEVBQThCO0FBQzlCLFVBQU1qQixPQUFPRCxRQUFRTyxHQUFSLEVBQWEsR0FBR1MsR0FBR0csU0FBSCxDQUFhQyxLQUFiLENBQW1CLEdBQW5CLENBQWhCLEVBQXlDSixHQUFHSyxRQUE1QyxDQUFiO0FBQ0FULFlBQVFVLElBQVIsQ0FBYSxDQUFDLEdBQUdOLEdBQUdHLFNBQUgsQ0FBYUMsS0FBYixDQUFtQixHQUFuQixDQUFKLEVBQTZCSixHQUFHSyxRQUFoQyxFQUEwQ0UsTUFBMUMsQ0FBaURDLEtBQUtBLENBQXRELEVBQXlEQyxJQUF6RCxDQUE4RCxHQUE5RCxDQUFiO0FBQ0EsUUFBSW5CLEtBQUosRUFBVyx1QkFBY0wsSUFBZCxFQUFvQmUsR0FBR0UsVUFBdkI7QUFDWixHQUxEO0FBTUEsU0FBT04sT0FBUDtBQUNEOztBQUVEOzs7QUFHTyxTQUFTYixjQUFULENBQXlCRyxNQUF6QixFQUFpQ0csU0FBakMsRUFBNENDLFFBQVEsS0FBcEQsRUFBMkQ7QUFDaEUsUUFBTUMsTUFBTVAsUUFBUVEsUUFBUUMsR0FBUixFQUFSLEVBQXVCUCxPQUFPUSxVQUE5QixFQUEwQ1IsT0FBT1MsTUFBakQsQ0FBWjtBQUNBLFFBQU1DLFVBQVUsRUFBaEI7QUFDQUMsU0FBT2EsSUFBUCxDQUFZckIsU0FBWixFQUF1QlUsT0FBdkIsQ0FBK0JZLE9BQU87QUFDcEMsVUFBTVgsS0FBS1gsVUFBVXNCLEdBQVYsQ0FBWDtBQUNBLFFBQUlYLEdBQUdZLElBQUgsS0FBWVosR0FBR0MsR0FBbkIsRUFBd0I7QUFDeEIsVUFBTWhCLE9BQU9ELFFBQVFPLEdBQVIsRUFBYSxHQUFHUyxHQUFHRyxTQUFILENBQWFDLEtBQWIsQ0FBbUIsR0FBbkIsQ0FBaEIsRUFBeUNKLEdBQUdLLFFBQTVDLENBQWI7QUFDQVQsWUFBUVUsSUFBUixDQUFhLENBQUMsR0FBR04sR0FBR0csU0FBSCxDQUFhQyxLQUFiLENBQW1CLEdBQW5CLENBQUosRUFBNkJKLEdBQUdLLFFBQWhDLEVBQTBDRSxNQUExQyxDQUFpREMsS0FBS0EsQ0FBdEQsRUFBeURDLElBQXpELENBQThELEdBQTlELENBQWI7QUFDQSxRQUFJbkIsS0FBSixFQUFXLHVCQUFjTCxJQUFkLEVBQW9CZSxHQUFHWSxJQUF2QjtBQUNaLEdBTkQ7QUFPQSxTQUFPaEIsT0FBUDtBQUNEIiwiZmlsZSI6ImZpeC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdyaXRlRmlsZVN5bmMgfSBmcm9tICdmcydcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgYmFja3VwIGZyb20gJy4uL21ha2Vycy9iYWNrdXAnXG5jb25zdCB7IHJlc29sdmUgfSA9IHBhdGhcblxuZXhwb3J0IGZ1bmN0aW9uIGZpeCAoY29uZmlnLCBwcm9qZWN0KSB7XG4gIGJhY2t1cChjb25maWcpXG4gIGFwcGx5TGlicmFyaWVzKGNvbmZpZywgcHJvamVjdC5saWJzLCB0cnVlKVxuICBhcHBseVRlbXBsYXRlcyhjb25maWcsIHByb2plY3QudGVtcGxhdGVzLCB0cnVlKVxufVxuXG4vKipcbiAqIGJhY2t1cCBiZWZvcmUgdXNpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5TGlicmFyaWVzIChjb25maWcsIGxpYnMsIGFwcGx5ID0gZmFsc2UpIHtcbiAgY29uc3Qgc3JjID0gcmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBjb25maWcuV29ya2luZ0RpciwgY29uZmlnLlNyY0RpcilcbiAgY29uc3QgY2hhbmdlcyA9IFtdXG4gIE9iamVjdC52YWx1ZXMobGlicykuZm9yRWFjaChlbCA9PiB7XG4gICAgaWYgKGVsLm9sZCA9PT0gZWwucmVmYWN0b3JlZCkgcmV0dXJuXG4gICAgY29uc3QgcGF0aCA9IHJlc29sdmUoc3JjLCAuLi5lbC5uYW1lc3BhY2Uuc3BsaXQoJy8nKSwgZWwuZmlsZW5hbWUpXG4gICAgY2hhbmdlcy5wdXNoKFsuLi5lbC5uYW1lc3BhY2Uuc3BsaXQoJy8nKSwgZWwuZmlsZW5hbWVdLmZpbHRlcihlID0+IGUpLmpvaW4oJy8nKSlcbiAgICBpZiAoYXBwbHkpIHdyaXRlRmlsZVN5bmMocGF0aCwgZWwucmVmYWN0b3JlZClcbiAgfSlcbiAgcmV0dXJuIGNoYW5nZXNcbn1cblxuLyoqXG4gKiBiYWNrdXAgYmVmb3JlIHVzaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVRlbXBsYXRlcyAoY29uZmlnLCB0ZW1wbGF0ZXMsIGFwcGx5ID0gZmFsc2UpIHtcbiAgY29uc3Qgc3JjID0gcmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBjb25maWcuV29ya2luZ0RpciwgY29uZmlnLlNyY0RpcilcbiAgY29uc3QgY2hhbmdlcyA9IFtdXG4gIE9iamVjdC5rZXlzKHRlbXBsYXRlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGNvbnN0IGVsID0gdGVtcGxhdGVzW2tleV1cbiAgICBpZiAoZWwuY29kZSA9PT0gZWwub2xkKSByZXR1cm5cbiAgICBjb25zdCBwYXRoID0gcmVzb2x2ZShzcmMsIC4uLmVsLm5hbWVzcGFjZS5zcGxpdCgnLycpLCBlbC5maWxlbmFtZSlcbiAgICBjaGFuZ2VzLnB1c2goWy4uLmVsLm5hbWVzcGFjZS5zcGxpdCgnLycpLCBlbC5maWxlbmFtZV0uZmlsdGVyKGUgPT4gZSkuam9pbignLycpKVxuICAgIGlmIChhcHBseSkgd3JpdGVGaWxlU3luYyhwYXRoLCBlbC5jb2RlKVxuICB9KVxuICByZXR1cm4gY2hhbmdlc1xufVxuIl19