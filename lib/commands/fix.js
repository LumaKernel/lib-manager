"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fix = fix;
exports.applyLibraries = applyLibraries;
exports.applyTemplates = applyTemplates;

require("source-map-support/register");

var _fs = require("fs");

var _path = _interopRequireDefault(require("path"));

var _backup = _interopRequireDefault(require("../makers/backup"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  resolve
} = _path.default;

function fix(config, project) {
  (0, _backup.default)(config);
  applyLibraries(config, project.libs, true);
  applyTemplates(config, project.templates, true);
}
/**
 * backup before using
 */


function applyLibraries(config, libs, apply = false) {
  const src = resolve(process.cwd(), config.WorkingDir, config.SrcDir);
  const changes = [];
  Object.values(libs).forEach(lib => {
    if (lib.old === lib.refactored) return;
    const path = resolve(src, ...lib.namespace.split('/'), lib.filename);
    changes.push([...lib.namespace.split('/'), lib.filename].filter(e => e).join('/'));
    if (apply) (0, _fs.writeFileSync)(path, lib.refactored);
  });
  return changes;
}
/**
 * backup before using
 */


function applyTemplates(config, templates, apply = false) {
  const src = resolve(process.cwd(), config.WorkingDir, config.SrcDir);
  const changes = [];
  Object.keys(templates).forEach(key => {
    const el = templates[key];
    if (el.code === el.old) return;
    const path = resolve(src, ...el.namespace.split('/'), el.filename);
    changes.push([...el.namespace.split('/'), el.filename].filter(e => e).join('/'));
    if (apply) (0, _fs.writeFileSync)(path, el.code);
  });
  return changes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9maXguanMiXSwibmFtZXMiOlsicmVzb2x2ZSIsInBhdGgiLCJmaXgiLCJjb25maWciLCJwcm9qZWN0IiwiYXBwbHlMaWJyYXJpZXMiLCJsaWJzIiwiYXBwbHlUZW1wbGF0ZXMiLCJ0ZW1wbGF0ZXMiLCJhcHBseSIsInNyYyIsInByb2Nlc3MiLCJjd2QiLCJXb3JraW5nRGlyIiwiU3JjRGlyIiwiY2hhbmdlcyIsIk9iamVjdCIsInZhbHVlcyIsImZvckVhY2giLCJsaWIiLCJvbGQiLCJyZWZhY3RvcmVkIiwibmFtZXNwYWNlIiwic3BsaXQiLCJmaWxlbmFtZSIsInB1c2giLCJmaWx0ZXIiLCJlIiwiam9pbiIsImtleXMiLCJrZXkiLCJlbCIsImNvZGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFDQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBY0MsYUFBcEI7O0FBRU8sU0FBU0MsR0FBVCxDQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixFQUErQjtBQUNwQyx1QkFBT0QsTUFBUDtBQUNBRSxFQUFBQSxjQUFjLENBQUNGLE1BQUQsRUFBU0MsT0FBTyxDQUFDRSxJQUFqQixFQUF1QixJQUF2QixDQUFkO0FBQ0FDLEVBQUFBLGNBQWMsQ0FBQ0osTUFBRCxFQUFTQyxPQUFPLENBQUNJLFNBQWpCLEVBQTRCLElBQTVCLENBQWQ7QUFDRDtBQUVEOzs7OztBQUdPLFNBQVNILGNBQVQsQ0FBeUJGLE1BQXpCLEVBQWlDRyxJQUFqQyxFQUF1Q0csS0FBSyxHQUFHLEtBQS9DLEVBQXNEO0FBQzNELFFBQU1DLEdBQUcsR0FBR1YsT0FBTyxDQUFDVyxPQUFPLENBQUNDLEdBQVIsRUFBRCxFQUFnQlQsTUFBTSxDQUFDVSxVQUF2QixFQUFtQ1YsTUFBTSxDQUFDVyxNQUExQyxDQUFuQjtBQUNBLFFBQU1DLE9BQU8sR0FBRyxFQUFoQjtBQUNBQyxFQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBY1gsSUFBZCxFQUFvQlksT0FBcEIsQ0FBNEJDLEdBQUcsSUFBSTtBQUNqQyxRQUFJQSxHQUFHLENBQUNDLEdBQUosS0FBWUQsR0FBRyxDQUFDRSxVQUFwQixFQUFnQztBQUNoQyxVQUFNcEIsSUFBSSxHQUFHRCxPQUFPLENBQUNVLEdBQUQsRUFBTSxHQUFHUyxHQUFHLENBQUNHLFNBQUosQ0FBY0MsS0FBZCxDQUFvQixHQUFwQixDQUFULEVBQW1DSixHQUFHLENBQUNLLFFBQXZDLENBQXBCO0FBQ0FULElBQUFBLE9BQU8sQ0FBQ1UsSUFBUixDQUFhLENBQUMsR0FBR04sR0FBRyxDQUFDRyxTQUFKLENBQWNDLEtBQWQsQ0FBb0IsR0FBcEIsQ0FBSixFQUE4QkosR0FBRyxDQUFDSyxRQUFsQyxFQUE0Q0UsTUFBNUMsQ0FBbURDLENBQUMsSUFBSUEsQ0FBeEQsRUFBMkRDLElBQTNELENBQWdFLEdBQWhFLENBQWI7QUFDQSxRQUFJbkIsS0FBSixFQUFXLHVCQUFjUixJQUFkLEVBQW9Ca0IsR0FBRyxDQUFDRSxVQUF4QjtBQUNaLEdBTEQ7QUFNQSxTQUFPTixPQUFQO0FBQ0Q7QUFFRDs7Ozs7QUFHTyxTQUFTUixjQUFULENBQXlCSixNQUF6QixFQUFpQ0ssU0FBakMsRUFBNENDLEtBQUssR0FBRyxLQUFwRCxFQUEyRDtBQUNoRSxRQUFNQyxHQUFHLEdBQUdWLE9BQU8sQ0FBQ1csT0FBTyxDQUFDQyxHQUFSLEVBQUQsRUFBZ0JULE1BQU0sQ0FBQ1UsVUFBdkIsRUFBbUNWLE1BQU0sQ0FBQ1csTUFBMUMsQ0FBbkI7QUFDQSxRQUFNQyxPQUFPLEdBQUcsRUFBaEI7QUFDQUMsRUFBQUEsTUFBTSxDQUFDYSxJQUFQLENBQVlyQixTQUFaLEVBQXVCVSxPQUF2QixDQUErQlksR0FBRyxJQUFJO0FBQ3BDLFVBQU1DLEVBQUUsR0FBR3ZCLFNBQVMsQ0FBQ3NCLEdBQUQsQ0FBcEI7QUFDQSxRQUFJQyxFQUFFLENBQUNDLElBQUgsS0FBWUQsRUFBRSxDQUFDWCxHQUFuQixFQUF3QjtBQUN4QixVQUFNbkIsSUFBSSxHQUFHRCxPQUFPLENBQUNVLEdBQUQsRUFBTSxHQUFHcUIsRUFBRSxDQUFDVCxTQUFILENBQWFDLEtBQWIsQ0FBbUIsR0FBbkIsQ0FBVCxFQUFrQ1EsRUFBRSxDQUFDUCxRQUFyQyxDQUFwQjtBQUNBVCxJQUFBQSxPQUFPLENBQUNVLElBQVIsQ0FBYSxDQUFDLEdBQUdNLEVBQUUsQ0FBQ1QsU0FBSCxDQUFhQyxLQUFiLENBQW1CLEdBQW5CLENBQUosRUFBNkJRLEVBQUUsQ0FBQ1AsUUFBaEMsRUFBMENFLE1BQTFDLENBQWlEQyxDQUFDLElBQUlBLENBQXRELEVBQXlEQyxJQUF6RCxDQUE4RCxHQUE5RCxDQUFiO0FBQ0EsUUFBSW5CLEtBQUosRUFBVyx1QkFBY1IsSUFBZCxFQUFvQjhCLEVBQUUsQ0FBQ0MsSUFBdkI7QUFDWixHQU5EO0FBT0EsU0FBT2pCLE9BQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdyaXRlRmlsZVN5bmMgfSBmcm9tICdmcydcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgYmFja3VwIGZyb20gJy4uL21ha2Vycy9iYWNrdXAnXG5jb25zdCB7IHJlc29sdmUgfSA9IHBhdGhcblxuZXhwb3J0IGZ1bmN0aW9uIGZpeCAoY29uZmlnLCBwcm9qZWN0KSB7XG4gIGJhY2t1cChjb25maWcpXG4gIGFwcGx5TGlicmFyaWVzKGNvbmZpZywgcHJvamVjdC5saWJzLCB0cnVlKVxuICBhcHBseVRlbXBsYXRlcyhjb25maWcsIHByb2plY3QudGVtcGxhdGVzLCB0cnVlKVxufVxuXG4vKipcbiAqIGJhY2t1cCBiZWZvcmUgdXNpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5TGlicmFyaWVzIChjb25maWcsIGxpYnMsIGFwcGx5ID0gZmFsc2UpIHtcbiAgY29uc3Qgc3JjID0gcmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBjb25maWcuV29ya2luZ0RpciwgY29uZmlnLlNyY0RpcilcbiAgY29uc3QgY2hhbmdlcyA9IFtdXG4gIE9iamVjdC52YWx1ZXMobGlicykuZm9yRWFjaChsaWIgPT4ge1xuICAgIGlmIChsaWIub2xkID09PSBsaWIucmVmYWN0b3JlZCkgcmV0dXJuXG4gICAgY29uc3QgcGF0aCA9IHJlc29sdmUoc3JjLCAuLi5saWIubmFtZXNwYWNlLnNwbGl0KCcvJyksIGxpYi5maWxlbmFtZSlcbiAgICBjaGFuZ2VzLnB1c2goWy4uLmxpYi5uYW1lc3BhY2Uuc3BsaXQoJy8nKSwgbGliLmZpbGVuYW1lXS5maWx0ZXIoZSA9PiBlKS5qb2luKCcvJykpXG4gICAgaWYgKGFwcGx5KSB3cml0ZUZpbGVTeW5jKHBhdGgsIGxpYi5yZWZhY3RvcmVkKVxuICB9KVxuICByZXR1cm4gY2hhbmdlc1xufVxuXG4vKipcbiAqIGJhY2t1cCBiZWZvcmUgdXNpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5VGVtcGxhdGVzIChjb25maWcsIHRlbXBsYXRlcywgYXBwbHkgPSBmYWxzZSkge1xuICBjb25zdCBzcmMgPSByZXNvbHZlKHByb2Nlc3MuY3dkKCksIGNvbmZpZy5Xb3JraW5nRGlyLCBjb25maWcuU3JjRGlyKVxuICBjb25zdCBjaGFuZ2VzID0gW11cbiAgT2JqZWN0LmtleXModGVtcGxhdGVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgY29uc3QgZWwgPSB0ZW1wbGF0ZXNba2V5XVxuICAgIGlmIChlbC5jb2RlID09PSBlbC5vbGQpIHJldHVyblxuICAgIGNvbnN0IHBhdGggPSByZXNvbHZlKHNyYywgLi4uZWwubmFtZXNwYWNlLnNwbGl0KCcvJyksIGVsLmZpbGVuYW1lKVxuICAgIGNoYW5nZXMucHVzaChbLi4uZWwubmFtZXNwYWNlLnNwbGl0KCcvJyksIGVsLmZpbGVuYW1lXS5maWx0ZXIoZSA9PiBlKS5qb2luKCcvJykpXG4gICAgaWYgKGFwcGx5KSB3cml0ZUZpbGVTeW5jKHBhdGgsIGVsLmNvZGUpXG4gIH0pXG4gIHJldHVybiBjaGFuZ2VzXG59XG4iXX0=