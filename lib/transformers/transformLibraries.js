"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transformLibraries;

require("source-map-support/register");

var _arrayForeachAsync = _interopRequireDefault(require("array-foreach-async"));

var _formatter = require("../formatter");

var _id = require("../id");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_arrayForeachAsync.default; // eslint-disable-line

/**
 *  libsのcodeの処理をする, 破壊する
 */

async function transformLibraries(config, libs, templates) {
  await Object.keys(libs).forEachAsync(async key => {
    if (!libs[key].finished) await dfs(config, libs, templates, key);
  });
}

async function dfs(config, libs, templates, key) {
  const now = libs[key];
  const name = now.name;
  if (now.processing) throw `[transformLibraries] ${key} : cannot include cycle`;
  now.processing = true;
  let codes = [now.code, now.refactored, now.enclosed];
  now['import'].forEach(el => {
    if (!templates[el.name]) throw `${name} : template ${el.name} not found`;
    codes[1] = codes[1].replace((0, _id.hash)(el.id), `// @import ${el.name}\n${templates[el.name].code}\n// @@`);
  });
  await now.require.forEachAsync(async el => {
    if (libs[el.name]) {
      if (!libs[el.name].finished) await dfs(config, libs, templates, el.name, libs[el.name]);
      codes = codes.map(code => code.replace((0, _id.hash)(el.id), libs[el.name].enclosed));
    } else {
      console.log(`${name} : ${el.name} was not found`);
      codes = codes.map(code => code.replace((0, _id.hash)(el.id), el.old));
    }
  });
  now.code = await (0, _formatter.format)(codes[0].trim(), config);
  now.refactored = await (0, _formatter.format)(codes[1], config);
  now.enclosed = await (0, _formatter.format)(codes[2], config);
  now.finished = true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvdHJhbnNmb3JtTGlicmFyaWVzLmpzIl0sIm5hbWVzIjpbIm5vbmUiLCJ0cmFuc2Zvcm1MaWJyYXJpZXMiLCJjb25maWciLCJsaWJzIiwidGVtcGxhdGVzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2hBc3luYyIsImtleSIsImZpbmlzaGVkIiwiZGZzIiwibm93IiwibmFtZSIsInByb2Nlc3NpbmciLCJjb2RlcyIsImNvZGUiLCJyZWZhY3RvcmVkIiwiZW5jbG9zZWQiLCJmb3JFYWNoIiwiZWwiLCJyZXBsYWNlIiwiaWQiLCJyZXF1aXJlIiwibWFwIiwiY29uc29sZSIsImxvZyIsIm9sZCIsInRyaW0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBQ0FBLDJCLENBQU07O0FBRU47Ozs7QUFHZSxlQUFlQyxrQkFBZixDQUFtQ0MsTUFBbkMsRUFBMkNDLElBQTNDLEVBQWlEQyxTQUFqRCxFQUE0RDtBQUN6RSxRQUFNQyxNQUFNLENBQUNDLElBQVAsQ0FBWUgsSUFBWixFQUFrQkksWUFBbEIsQ0FBK0IsTUFBTUMsR0FBTixJQUFhO0FBQ2hELFFBQUksQ0FBQ0wsSUFBSSxDQUFDSyxHQUFELENBQUosQ0FBVUMsUUFBZixFQUF5QixNQUFNQyxHQUFHLENBQUNSLE1BQUQsRUFBU0MsSUFBVCxFQUFlQyxTQUFmLEVBQTBCSSxHQUExQixDQUFUO0FBQzFCLEdBRkssQ0FBTjtBQUdEOztBQUVELGVBQWVFLEdBQWYsQ0FBb0JSLE1BQXBCLEVBQTRCQyxJQUE1QixFQUFrQ0MsU0FBbEMsRUFBNkNJLEdBQTdDLEVBQWtEO0FBQ2hELFFBQU1HLEdBQUcsR0FBR1IsSUFBSSxDQUFDSyxHQUFELENBQWhCO0FBQ0EsUUFBTUksSUFBSSxHQUFHRCxHQUFHLENBQUNDLElBQWpCO0FBQ0EsTUFBSUQsR0FBRyxDQUFDRSxVQUFSLEVBQW9CLE1BQU8sd0JBQXVCTCxHQUFJLHlCQUFsQztBQUNwQkcsRUFBQUEsR0FBRyxDQUFDRSxVQUFKLEdBQWlCLElBQWpCO0FBQ0EsTUFBSUMsS0FBSyxHQUFHLENBQUNILEdBQUcsQ0FBQ0ksSUFBTCxFQUFXSixHQUFHLENBQUNLLFVBQWYsRUFBMkJMLEdBQUcsQ0FBQ00sUUFBL0IsQ0FBWjtBQUNBTixFQUFBQSxHQUFHLENBQUMsUUFBRCxDQUFILENBQWNPLE9BQWQsQ0FBc0JDLEVBQUUsSUFBSTtBQUMxQixRQUFJLENBQUNmLFNBQVMsQ0FBQ2UsRUFBRSxDQUFDUCxJQUFKLENBQWQsRUFBeUIsTUFBTyxHQUFFQSxJQUFLLGVBQWNPLEVBQUUsQ0FBQ1AsSUFBSyxZQUFwQztBQUN6QkUsSUFBQUEsS0FBSyxDQUFDLENBQUQsQ0FBTCxHQUFXQSxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVNNLE9BQVQsQ0FBaUIsY0FBS0QsRUFBRSxDQUFDRSxFQUFSLENBQWpCLEVBQStCLGNBQWFGLEVBQUUsQ0FBQ1AsSUFBSyxLQUFJUixTQUFTLENBQUNlLEVBQUUsQ0FBQ1AsSUFBSixDQUFULENBQW1CRyxJQUFLLFNBQWhGLENBQVg7QUFDRCxHQUhEO0FBSUEsUUFBTUosR0FBRyxDQUFDVyxPQUFKLENBQVlmLFlBQVosQ0FBeUIsTUFBTVksRUFBTixJQUFZO0FBQ3pDLFFBQUloQixJQUFJLENBQUNnQixFQUFFLENBQUNQLElBQUosQ0FBUixFQUFtQjtBQUNqQixVQUFJLENBQUNULElBQUksQ0FBQ2dCLEVBQUUsQ0FBQ1AsSUFBSixDQUFKLENBQWNILFFBQW5CLEVBQTZCLE1BQU1DLEdBQUcsQ0FBQ1IsTUFBRCxFQUFTQyxJQUFULEVBQWVDLFNBQWYsRUFBMEJlLEVBQUUsQ0FBQ1AsSUFBN0IsRUFBbUNULElBQUksQ0FBQ2dCLEVBQUUsQ0FBQ1AsSUFBSixDQUF2QyxDQUFUO0FBQzdCRSxNQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ1MsR0FBTixDQUFVUixJQUFJLElBQUlBLElBQUksQ0FBQ0ssT0FBTCxDQUFhLGNBQUtELEVBQUUsQ0FBQ0UsRUFBUixDQUFiLEVBQTBCbEIsSUFBSSxDQUFDZ0IsRUFBRSxDQUFDUCxJQUFKLENBQUosQ0FBY0ssUUFBeEMsQ0FBbEIsQ0FBUjtBQUNELEtBSEQsTUFHTztBQUNMTyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxHQUFFYixJQUFLLE1BQUtPLEVBQUUsQ0FBQ1AsSUFBSyxnQkFBakM7QUFDQUUsTUFBQUEsS0FBSyxHQUFHQSxLQUFLLENBQUNTLEdBQU4sQ0FBVVIsSUFBSSxJQUFJQSxJQUFJLENBQUNLLE9BQUwsQ0FBYSxjQUFLRCxFQUFFLENBQUNFLEVBQVIsQ0FBYixFQUEwQkYsRUFBRSxDQUFDTyxHQUE3QixDQUFsQixDQUFSO0FBQ0Q7QUFDRixHQVJLLENBQU47QUFTQWYsRUFBQUEsR0FBRyxDQUFDSSxJQUFKLEdBQVcsTUFBTSx1QkFBT0QsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTYSxJQUFULEVBQVAsRUFBd0J6QixNQUF4QixDQUFqQjtBQUNBUyxFQUFBQSxHQUFHLENBQUNLLFVBQUosR0FBaUIsTUFBTSx1QkFBT0YsS0FBSyxDQUFDLENBQUQsQ0FBWixFQUFpQlosTUFBakIsQ0FBdkI7QUFDQVMsRUFBQUEsR0FBRyxDQUFDTSxRQUFKLEdBQWUsTUFBTSx1QkFBT0gsS0FBSyxDQUFDLENBQUQsQ0FBWixFQUFpQlosTUFBakIsQ0FBckI7QUFDQVMsRUFBQUEsR0FBRyxDQUFDRixRQUFKLEdBQWUsSUFBZjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5vbmUgZnJvbSAnYXJyYXktZm9yZWFjaC1hc3luYydcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gJy4uL2Zvcm1hdHRlcidcbmltcG9ydCB7IGhhc2ggfSBmcm9tICcuLi9pZCdcbm5vbmUgIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuLyoqXG4gKiAgbGlic+OBrmNvZGXjga7lh6bnkIbjgpLjgZnjgossIOegtOWjiuOBmeOCi1xuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiB0cmFuc2Zvcm1MaWJyYXJpZXMgKGNvbmZpZywgbGlicywgdGVtcGxhdGVzKSB7XG4gIGF3YWl0IE9iamVjdC5rZXlzKGxpYnMpLmZvckVhY2hBc3luYyhhc3luYyBrZXkgPT4ge1xuICAgIGlmICghbGlic1trZXldLmZpbmlzaGVkKSBhd2FpdCBkZnMoY29uZmlnLCBsaWJzLCB0ZW1wbGF0ZXMsIGtleSlcbiAgfSlcbn1cblxuYXN5bmMgZnVuY3Rpb24gZGZzIChjb25maWcsIGxpYnMsIHRlbXBsYXRlcywga2V5KSB7XG4gIGNvbnN0IG5vdyA9IGxpYnNba2V5XVxuICBjb25zdCBuYW1lID0gbm93Lm5hbWVcbiAgaWYgKG5vdy5wcm9jZXNzaW5nKSB0aHJvdyBgW3RyYW5zZm9ybUxpYnJhcmllc10gJHtrZXl9IDogY2Fubm90IGluY2x1ZGUgY3ljbGVgXG4gIG5vdy5wcm9jZXNzaW5nID0gdHJ1ZVxuICBsZXQgY29kZXMgPSBbbm93LmNvZGUsIG5vdy5yZWZhY3RvcmVkLCBub3cuZW5jbG9zZWRdXG4gIG5vd1snaW1wb3J0J10uZm9yRWFjaChlbCA9PiB7XG4gICAgaWYgKCF0ZW1wbGF0ZXNbZWwubmFtZV0pIHRocm93IGAke25hbWV9IDogdGVtcGxhdGUgJHtlbC5uYW1lfSBub3QgZm91bmRgXG4gICAgY29kZXNbMV0gPSBjb2Rlc1sxXS5yZXBsYWNlKGhhc2goZWwuaWQpLCBgLy8gQGltcG9ydCAke2VsLm5hbWV9XFxuJHt0ZW1wbGF0ZXNbZWwubmFtZV0uY29kZX1cXG4vLyBAQGApXG4gIH0pXG4gIGF3YWl0IG5vdy5yZXF1aXJlLmZvckVhY2hBc3luYyhhc3luYyBlbCA9PiB7XG4gICAgaWYgKGxpYnNbZWwubmFtZV0pIHtcbiAgICAgIGlmICghbGlic1tlbC5uYW1lXS5maW5pc2hlZCkgYXdhaXQgZGZzKGNvbmZpZywgbGlicywgdGVtcGxhdGVzLCBlbC5uYW1lLCBsaWJzW2VsLm5hbWVdKVxuICAgICAgY29kZXMgPSBjb2Rlcy5tYXAoY29kZSA9PiBjb2RlLnJlcGxhY2UoaGFzaChlbC5pZCksIGxpYnNbZWwubmFtZV0uZW5jbG9zZWQpKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhgJHtuYW1lfSA6ICR7ZWwubmFtZX0gd2FzIG5vdCBmb3VuZGApXG4gICAgICBjb2RlcyA9IGNvZGVzLm1hcChjb2RlID0+IGNvZGUucmVwbGFjZShoYXNoKGVsLmlkKSwgZWwub2xkKSlcbiAgICB9XG4gIH0pXG4gIG5vdy5jb2RlID0gYXdhaXQgZm9ybWF0KGNvZGVzWzBdLnRyaW0oKSwgY29uZmlnKVxuICBub3cucmVmYWN0b3JlZCA9IGF3YWl0IGZvcm1hdChjb2Rlc1sxXSwgY29uZmlnKVxuICBub3cuZW5jbG9zZWQgPSBhd2FpdCBmb3JtYXQoY29kZXNbMl0sIGNvbmZpZylcbiAgbm93LmZpbmlzaGVkID0gdHJ1ZVxufVxuIl19