"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transformLibraries;

require("source-map-support/register");

var _arrayForeachAsync = _interopRequireDefault(require("array-foreach-async"));

var _formatter = require("../formatter");

var _id = require("../id");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_arrayForeachAsync.default; // eslint-disable-line

/**
 *  libsのcodeの処理をする, 破壊する
 */

async function transformLibraries(config, libs, templates) {
  await Object.keys(libs).forEachAsync(async key => {
    if (!libs[key].finished) await dfs(config, libs, templates, key);
  });
}

async function dfs(config, libs, templates, key) {
  const now = libs[key];
  if (now.processing) throw `[transformLibraries] ${key} : cannot include cycle`;
  now.processing = true;
  let codes = [now.code, now.refactored, now.enclosed];
  now['import'].forEach(el => {
    if (!templates[el.name]) throw `template ${el.name} not found`;
    codes[1] = codes[1].replace((0, _id.hash)(el.id), `// @import ${el.name}\n${templates[el.name].code}\n// @@`);
  });
  await now.require.forEachAsync(async el => {
    if (!libs[el.name].finished) await dfs(config, libs, templates, el.name, libs[el.name]);
    codes = codes.map(code => code.replace((0, _id.hash)(el.id), libs[el.name].enclosed));
  });
  now.code = await (0, _formatter.format)(codes[0].trim(), config);
  now.refactored = await (0, _formatter.format)(codes[1], config);
  now.enclosed = await (0, _formatter.format)(codes[2], config);
  now.finished = true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvdHJhbnNmb3JtTGlicmFyaWVzLmpzIl0sIm5hbWVzIjpbIm5vbmUiLCJ0cmFuc2Zvcm1MaWJyYXJpZXMiLCJjb25maWciLCJsaWJzIiwidGVtcGxhdGVzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2hBc3luYyIsImtleSIsImZpbmlzaGVkIiwiZGZzIiwibm93IiwicHJvY2Vzc2luZyIsImNvZGVzIiwiY29kZSIsInJlZmFjdG9yZWQiLCJlbmNsb3NlZCIsImZvckVhY2giLCJlbCIsIm5hbWUiLCJyZXBsYWNlIiwiaWQiLCJyZXF1aXJlIiwibWFwIiwidHJpbSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFDQUEsMkIsQ0FBTTs7QUFFTjs7OztBQUdlLGVBQWVDLGtCQUFmLENBQW1DQyxNQUFuQyxFQUEyQ0MsSUFBM0MsRUFBaURDLFNBQWpELEVBQTREO0FBQ3pFLFFBQU1DLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxJQUFaLEVBQWtCSSxZQUFsQixDQUErQixNQUFNQyxHQUFOLElBQWE7QUFDaEQsUUFBSSxDQUFDTCxJQUFJLENBQUNLLEdBQUQsQ0FBSixDQUFVQyxRQUFmLEVBQXlCLE1BQU1DLEdBQUcsQ0FBQ1IsTUFBRCxFQUFTQyxJQUFULEVBQWVDLFNBQWYsRUFBMEJJLEdBQTFCLENBQVQ7QUFDMUIsR0FGSyxDQUFOO0FBR0Q7O0FBRUQsZUFBZUUsR0FBZixDQUFvQlIsTUFBcEIsRUFBNEJDLElBQTVCLEVBQWtDQyxTQUFsQyxFQUE2Q0ksR0FBN0MsRUFBa0Q7QUFDaEQsUUFBTUcsR0FBRyxHQUFHUixJQUFJLENBQUNLLEdBQUQsQ0FBaEI7QUFDQSxNQUFJRyxHQUFHLENBQUNDLFVBQVIsRUFBb0IsTUFBTyx3QkFBdUJKLEdBQUkseUJBQWxDO0FBQ3BCRyxFQUFBQSxHQUFHLENBQUNDLFVBQUosR0FBaUIsSUFBakI7QUFDQSxNQUFJQyxLQUFLLEdBQUcsQ0FBQ0YsR0FBRyxDQUFDRyxJQUFMLEVBQVdILEdBQUcsQ0FBQ0ksVUFBZixFQUEyQkosR0FBRyxDQUFDSyxRQUEvQixDQUFaO0FBQ0FMLEVBQUFBLEdBQUcsQ0FBQyxRQUFELENBQUgsQ0FBY00sT0FBZCxDQUFzQkMsRUFBRSxJQUFJO0FBQzFCLFFBQUksQ0FBQ2QsU0FBUyxDQUFDYyxFQUFFLENBQUNDLElBQUosQ0FBZCxFQUF5QixNQUFPLFlBQVdELEVBQUUsQ0FBQ0MsSUFBSyxZQUExQjtBQUN6Qk4sSUFBQUEsS0FBSyxDQUFDLENBQUQsQ0FBTCxHQUFXQSxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVNPLE9BQVQsQ0FBaUIsY0FBS0YsRUFBRSxDQUFDRyxFQUFSLENBQWpCLEVBQStCLGNBQWFILEVBQUUsQ0FBQ0MsSUFBSyxLQUFJZixTQUFTLENBQUNjLEVBQUUsQ0FBQ0MsSUFBSixDQUFULENBQW1CTCxJQUFLLFNBQWhGLENBQVg7QUFDRCxHQUhEO0FBSUEsUUFBTUgsR0FBRyxDQUFDVyxPQUFKLENBQVlmLFlBQVosQ0FBeUIsTUFBTVcsRUFBTixJQUFZO0FBQ3pDLFFBQUksQ0FBQ2YsSUFBSSxDQUFDZSxFQUFFLENBQUNDLElBQUosQ0FBSixDQUFjVixRQUFuQixFQUE2QixNQUFNQyxHQUFHLENBQUNSLE1BQUQsRUFBU0MsSUFBVCxFQUFlQyxTQUFmLEVBQTBCYyxFQUFFLENBQUNDLElBQTdCLEVBQW1DaEIsSUFBSSxDQUFDZSxFQUFFLENBQUNDLElBQUosQ0FBdkMsQ0FBVDtBQUM3Qk4sSUFBQUEsS0FBSyxHQUFHQSxLQUFLLENBQUNVLEdBQU4sQ0FBVVQsSUFBSSxJQUFJQSxJQUFJLENBQUNNLE9BQUwsQ0FBYSxjQUFLRixFQUFFLENBQUNHLEVBQVIsQ0FBYixFQUEwQmxCLElBQUksQ0FBQ2UsRUFBRSxDQUFDQyxJQUFKLENBQUosQ0FBY0gsUUFBeEMsQ0FBbEIsQ0FBUjtBQUNELEdBSEssQ0FBTjtBQUlBTCxFQUFBQSxHQUFHLENBQUNHLElBQUosR0FBVyxNQUFNLHVCQUFPRCxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVNXLElBQVQsRUFBUCxFQUF3QnRCLE1BQXhCLENBQWpCO0FBQ0FTLEVBQUFBLEdBQUcsQ0FBQ0ksVUFBSixHQUFpQixNQUFNLHVCQUFPRixLQUFLLENBQUMsQ0FBRCxDQUFaLEVBQWlCWCxNQUFqQixDQUF2QjtBQUNBUyxFQUFBQSxHQUFHLENBQUNLLFFBQUosR0FBZSxNQUFNLHVCQUFPSCxLQUFLLENBQUMsQ0FBRCxDQUFaLEVBQWlCWCxNQUFqQixDQUFyQjtBQUNBUyxFQUFBQSxHQUFHLENBQUNGLFFBQUosR0FBZSxJQUFmO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbm9uZSBmcm9tICdhcnJheS1mb3JlYWNoLWFzeW5jJ1xuaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSAnLi4vZm9ybWF0dGVyJ1xuaW1wb3J0IHsgaGFzaCB9IGZyb20gJy4uL2lkJ1xubm9uZSAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4vKipcbiAqICBsaWJz44GuY29kZeOBruWHpueQhuOCkuOBmeOCiywg56C05aOK44GZ44KLXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHRyYW5zZm9ybUxpYnJhcmllcyAoY29uZmlnLCBsaWJzLCB0ZW1wbGF0ZXMpIHtcbiAgYXdhaXQgT2JqZWN0LmtleXMobGlicykuZm9yRWFjaEFzeW5jKGFzeW5jIGtleSA9PiB7XG4gICAgaWYgKCFsaWJzW2tleV0uZmluaXNoZWQpIGF3YWl0IGRmcyhjb25maWcsIGxpYnMsIHRlbXBsYXRlcywga2V5KVxuICB9KVxufVxuXG5hc3luYyBmdW5jdGlvbiBkZnMgKGNvbmZpZywgbGlicywgdGVtcGxhdGVzLCBrZXkpIHtcbiAgY29uc3Qgbm93ID0gbGlic1trZXldXG4gIGlmIChub3cucHJvY2Vzc2luZykgdGhyb3cgYFt0cmFuc2Zvcm1MaWJyYXJpZXNdICR7a2V5fSA6IGNhbm5vdCBpbmNsdWRlIGN5Y2xlYFxuICBub3cucHJvY2Vzc2luZyA9IHRydWVcbiAgbGV0IGNvZGVzID0gW25vdy5jb2RlLCBub3cucmVmYWN0b3JlZCwgbm93LmVuY2xvc2VkXVxuICBub3dbJ2ltcG9ydCddLmZvckVhY2goZWwgPT4ge1xuICAgIGlmICghdGVtcGxhdGVzW2VsLm5hbWVdKSB0aHJvdyBgdGVtcGxhdGUgJHtlbC5uYW1lfSBub3QgZm91bmRgXG4gICAgY29kZXNbMV0gPSBjb2Rlc1sxXS5yZXBsYWNlKGhhc2goZWwuaWQpLCBgLy8gQGltcG9ydCAke2VsLm5hbWV9XFxuJHt0ZW1wbGF0ZXNbZWwubmFtZV0uY29kZX1cXG4vLyBAQGApXG4gIH0pXG4gIGF3YWl0IG5vdy5yZXF1aXJlLmZvckVhY2hBc3luYyhhc3luYyBlbCA9PiB7XG4gICAgaWYgKCFsaWJzW2VsLm5hbWVdLmZpbmlzaGVkKSBhd2FpdCBkZnMoY29uZmlnLCBsaWJzLCB0ZW1wbGF0ZXMsIGVsLm5hbWUsIGxpYnNbZWwubmFtZV0pXG4gICAgY29kZXMgPSBjb2Rlcy5tYXAoY29kZSA9PiBjb2RlLnJlcGxhY2UoaGFzaChlbC5pZCksIGxpYnNbZWwubmFtZV0uZW5jbG9zZWQpKVxuICB9KVxuICBub3cuY29kZSA9IGF3YWl0IGZvcm1hdChjb2Rlc1swXS50cmltKCksIGNvbmZpZylcbiAgbm93LnJlZmFjdG9yZWQgPSBhd2FpdCBmb3JtYXQoY29kZXNbMV0sIGNvbmZpZylcbiAgbm93LmVuY2xvc2VkID0gYXdhaXQgZm9ybWF0KGNvZGVzWzJdLCBjb25maWcpXG4gIG5vdy5maW5pc2hlZCA9IHRydWVcbn1cbiJdfQ==