"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transformWiki;

require("source-map-support/register");

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _escape = require("../helpers/escape");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const libRegExp = name => new RegExp(String.raw`(?<=^|\n)// @ ${name}(?=\n|$)`, 'g');

const mdYAMlRegExp = /^---\n(.*?)\n---(?:\n|$)/; // dfs

/**
 * 破壊する
 */

function transformWiki(wikiYAML, wikis, libs, paths = []) {
  const namespace = paths.filter(e => e).join('/');
  let lib = Object.values(libs).filter(el => el.namespace === namespace && el.filename === `${wikis.path}.cpp`);
  if (lib && lib.length === 1) lib = lib[0];else lib = null;
  paths = [...paths, wikis.path];
  const permalink = wikis.permalink || paths.filter(e => e).join('/');

  if (wikis.wiki) {
    Object.entries(libs).forEach(([key, value]) => {
      wikis.wiki = wikis.wiki.replace(libRegExp(key), `\n${'```cpp'}\n${(0, _escape.mdEscape)(value.code)}\n${'```'}\n`);
    });
  }

  if (!wikis.title && lib) {
    const title = lib.data.filter(el => el[1] === 'title')[0];
    if (title) wikis.title = title;
  }

  wikis.title = wikis.title || wikis.path;
  wikis.permalink = permalink;
  let data = { ...wikiYAML,
    permalink,
    title: wikis.title
  };

  if (wikis.wiki && wikis.wiki.match(mdYAMlRegExp)) {
    const innerData = _jsYaml.default.safeLoad(wikis.wiki.match(mdYAMlRegExp)[1]);

    data = { ...data,
      ...innerData
    };
    Object.keys(innerData).forEach(key => {
      wikis[key] = innerData[key];
    });
    wikis.wiki = wikis.wiki.replace(mdYAMlRegExp, '');
  }

  if (wikis.wiki) wikis.wiki = `---\n${_jsYaml.default.safeDump(data)}\n---\n\n${wikis.wiki}`;

  if (wikis.child) {
    wikis.child.forEach(child => {
      transformWiki(wikiYAML, child, libs, paths);
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvdHJhbnNmb3JtV2lraS5qcyJdLCJuYW1lcyI6WyJsaWJSZWdFeHAiLCJuYW1lIiwiUmVnRXhwIiwiU3RyaW5nIiwicmF3IiwibWRZQU1sUmVnRXhwIiwidHJhbnNmb3JtV2lraSIsIndpa2lZQU1MIiwid2lraXMiLCJsaWJzIiwicGF0aHMiLCJuYW1lc3BhY2UiLCJmaWx0ZXIiLCJlIiwiam9pbiIsImxpYiIsIk9iamVjdCIsInZhbHVlcyIsImVsIiwiZmlsZW5hbWUiLCJwYXRoIiwibGVuZ3RoIiwicGVybWFsaW5rIiwid2lraSIsImVudHJpZXMiLCJmb3JFYWNoIiwia2V5IiwidmFsdWUiLCJyZXBsYWNlIiwiY29kZSIsInRpdGxlIiwiZGF0YSIsIm1hdGNoIiwiaW5uZXJEYXRhIiwieWFtbCIsInNhZmVMb2FkIiwia2V5cyIsInNhZmVEdW1wIiwiY2hpbGQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRUEsTUFBTUEsU0FBUyxHQUFHQyxJQUFJLElBQUksSUFBSUMsTUFBSixDQUN4QkMsTUFBTSxDQUFDQyxHQUFJLGlCQUFnQkgsSUFBSyxVQURSLEVBQ21CLEdBRG5CLENBQTFCOztBQUdBLE1BQU1JLFlBQVksR0FBRywwQkFBckIsQyxDQUVBOztBQUNBOzs7O0FBR2UsU0FBU0MsYUFBVCxDQUF3QkMsUUFBeEIsRUFBa0NDLEtBQWxDLEVBQXlDQyxJQUF6QyxFQUErQ0MsS0FBSyxHQUFHLEVBQXZELEVBQTJEO0FBQ3hFLFFBQU1DLFNBQVMsR0FBR0QsS0FBSyxDQUFDRSxNQUFOLENBQWFDLENBQUMsSUFBSUEsQ0FBbEIsRUFBcUJDLElBQXJCLENBQTBCLEdBQTFCLENBQWxCO0FBQ0EsTUFBSUMsR0FBRyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBY1IsSUFBZCxFQUNQRyxNQURPLENBQ0FNLEVBQUUsSUFBSUEsRUFBRSxDQUFDUCxTQUFILEtBQWlCQSxTQUFqQixJQUNkTyxFQUFFLENB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QmEsS0FBSyxJQUFJO0FBQzNCaEMsTUFBQUEsYUFBYSxDQUFDQyxRQUFELEVBQVcrQixLQUFYLEVBQWtCN0IsSUFBbEIsRUFBd0JDLEtBQXhCLENBQWI7QUFDRCxLQUZEO0FBR0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB5YW1sIGZyb20gJ2pzLXlhbWwnXG5pbXBvcnQgeyBtZEVzY2FwZSB9IGZyb20gJy4uL2hlbHBlcnMvZXNjYXBlJ1xuXG5jb25zdCBsaWJSZWdFeHAgPSBuYW1lID0+IG5ldyBSZWdFeHAoXG4gIFN0cmluZy5yYXdgKD88PV58XFxuKS8vIEAgJHtuYW1lfSg/PVxcbnwkKWAsICdnJylcblxuY29uc3QgbWRZQU1sUmVnRXhwID0gL14tLS1cXG4oLio/KVxcbi0tLSg/OlxcbnwkKS9cblxuLy8gZGZzXG4vKipcbiAqIOegtOWjiuOBmeOCi1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1XaWtpICh3aWtpWUFNTCwgd2lraXMsIGxpYnMsIHBhdGhzID0gW10pIHtcbiAgY29uc3QgbmFtZXNwYWNlID0gcGF0aHMuZmlsdGVyKGUgPT4gZSkuam9pbignLycpXG4gIGxldCBsaWIgPSBPYmplY3QudmFsdWVzKGxpYnMpXG4gICAgLmZpbHRlcihlbCA9PiBlbC5uYW1lc3BhY2UgPT09IG5hbWVzcGFjZSAmJlxuICAgIGVsLmZpbGVuYW1lID09PSBgJHt3aWtpcy5wYXRofS5jcHBgKVxuICBpZiAobGliICYmIGxpYi5sZW5ndGggPT09IDEpIGxpYiA9IGxpYlswXVxuICBlbHNlIGxpYiA9IG51bGxcbiAgcGF0aHMgPSBbLi4ucGF0aHMsIHdpa2lzLnBhdGhdXG4gIGNvbnN0IHBlcm1hbGluayA9IHdpa2lzLnBlcm1hbGluayB8fCBwYXRocy5maWx0ZXIoZSA9PiBlKS5qb2luKCcvJylcbiAgaWYgKHdpa2lzLndpa2kpIHtcbiAgICBPYmplY3QuZW50cmllcyhsaWJzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIHdpa2lzLndpa2kgPSB3aWtpcy53aWtpXG4gICAgICAgIC5yZXBsYWNlKGxpYlJlZ0V4cChrZXkpLFxuICAgICAgICAgIGBcXG4keydgYGBjcHAnfVxcbiR7bWRFc2NhcGUodmFsdWUuY29kZSl9XFxuJHsnYGBgJ31cXG5gKVxuICAgIH0pXG4gIH1cbiAgaWYgKCF3aWtpcy50aXRsZSAmJiBsaWIpIHtcbiAgICBjb25zdCB0aXRsZSA9IGxpYi5kYXRhLmZpbHRlcihlbCA9PiBlbFsxXSA9PT0gJ3RpdGxlJylbMF1cbiAgICBpZiAodGl0bGUpIHdpa2lzLnRpdGxlID0gdGl0bGVcbiAgfVxuICB3aWtpcy50aXRsZSA9IHdpa2lzLnRpdGxlIHx8IHdpa2lzLnBhdGhcbiAgd2lraXMucGVybWFsaW5rID0gcGVybWFsaW5rXG4gIGxldCBkYXRhID0ge1xuICAgIC4uLndpa2lZQU1MLFxuICAgIHBlcm1hbGluayxcbiAgICB0aXRsZTogd2lraXMudGl0bGVcbiAgfVxuICBpZiAod2lraXMud2lraSAmJiB3aWtpcy53aWtpLm1hdGNoKG1kWUFNbFJlZ0V4cCkpIHtcbiAgICBjb25zdCBpbm5lckRhdGEgPSB5YW1sLnNhZmVMb2FkKHdpa2lzLndpa2kubWF0Y2gobWRZQU1sUmVnRXhwKVsxXSlcbiAgICBkYXRhID0ge1xuICAgICAgLi4uZGF0YSxcbiAgICAgIC4uLmlubmVyRGF0YSxcbiAgICB9XG4gICAgT2JqZWN0LmtleXMoaW5uZXJEYXRhKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICB3aWtpc1trZXldID0gaW5uZXJEYXRhW2tleV1cbiAgICB9KVxuICAgIHdpa2lzLndpa2kgPSB3aWtpcy53aWtpLnJlcGxhY2UobWRZQU1sUmVnRXhwLCAnJylcbiAgfVxuICBpZiAod2lraXMud2lraSkgd2lraXMud2lraSA9IGAtLS1cXG4ke3lhbWwuc2FmZUR1bXAoZGF0YSl9XFxuLS0tXFxuXFxuJHt3aWtpcy53aWtpfWBcblxuICBpZiAod2lraXMuY2hpbGQpIHtcbiAgICB3aWtpcy5jaGlsZC5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgIHRyYW5zZm9ybVdpa2kod2lraVlBTUwsIGNoaWxkLCBsaWJzLCBwYXRocylcbiAgICB9KVxuICB9XG59XG4iXX0=