"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transformWiki;

require("source-map-support/register");

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _escape = require("../helpers/escape");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const libRegExp = name => new RegExp(String.raw`(?<=^|\n)// @ ${name}(?=\n|$)`, 'g');

const mdYAMlRegExp = /^---\n(.*?)\n---(?:\n|$)/s; // dfs

/**
 * 破壊する
 */

function transformWiki(wikiYAML, wikis, libs, paths = [], ids = []) {
  const namespace = paths.filter(e => e).join('/');

  const lib = (() => {
    const tmp = Object.values(libs).filter(el => el.namespace === namespace && el.filename === `${wikis.path}.cpp`);
    if (tmp && tmp.length === 1) return tmp[0];else return null;
  })();

  const data = (() => {
    let _data = { ...wikiYAML
    };

    if (wikis.wiki && wikis.wiki.match(mdYAMlRegExp)) {
      const innerData = _jsYaml.default.safeLoad(wikis.wiki.match(mdYAMlRegExp)[1]);

      _data = { ..._data,
        ...innerData
      };
      Object.keys(innerData).forEach(key => {
        wikis[key] = innerData[key];
      });
      wikis.wiki = wikis.wiki.replace(mdYAMlRegExp, '');
    }

    return _data;
  })();

  const id = (() => {
    if (data.id) return data.id;

    if (lib) {
      const _id = lib.data.filter(([name, value]) => name === 'id')[0];
      if (_id) return _id[1];
    }

    return wikis.path;
  })();

  const title = (() => {
    if (data.title) return data.title;
    if (wikis.title) return wikis.title;

    if (lib) {
      const _title = lib.data.filter(([name]) => name === 'title')[0];
      if (_title) return _title[1];
    }

    return wikis.path;
  })();

  paths = [...paths, wikis.path];
  ids = [...ids, id];
  const permalink = wikis.permalink || ids.filter(e => e).join('/');

  if (wikis.wiki) {
    Object.entries(libs).forEach(([key, value]) => {
      wikis.wiki = wikis.wiki.replace(libRegExp(key), () => `\n${'```cpp'}\n${(0, _escape.mdEscape)(value.code)}\n${'```'}\n`);
    });
  } // データは後入れ（順序関係がバグる）


  data.title = wikis.title = title;
  data.permalink = wikis.permalink = permalink;
  if (wikis.wiki) wikis.wiki = `---\n${_jsYaml.default.safeDump(data)}\n---\n\n${wikis.wiki}`;

  if (wikis.child) {
    wikis.child.forEach(child => {
      transformWiki(wikiYAML, child, libs, paths, ids);
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvdHJhbnNmb3JtV2lraS5qcyJdLCJuYW1lcyI6WyJsaWJSZWdFeHAiLCJuYW1lIiwiUmVnRXhwIiwiU3RyaW5nIiwicmF3IiwibWRZQU1sUmVnRXhwIiwidHJhbnNmb3JtV2lraSIsIndpa2lZQU1MIiwid2lraXMiLCJsaWJzIiwicGF0aHMiLCJpZHMiLCJuYW1lc3BhY2UiLCJmaWx0ZXIiLCJlIiwiam9pbiIsImxpYiIsInRtcCIsIk9iamVjdCIsInZhbHVlcyIsImVsIiwiZmlsZW5hbWUiLCJwYXRoIiwibGVuZ3RoIiwiZGF0YSIsIl9kYXRhIiwid2lraSIsIm1hdGNoIiwiaW5uZXJEYXRhIiwieWFtbCIsInNhZmVMb2FkIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJyZXBsYWNlIiwiaWQiLCJfaWQiLCJ2YWx1ZSIsInRpdGxlIiwiX3RpdGxlIiwicGVybWFsaW5rIiwiZW50cmllcyIsImNvZGUiLCJzYWZlRHVtcCIsImNoaWxkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBLE1BQU1BLFNBQVMsR0FBR0MsSUFBSSxJQUFJLElBQUlDLE1BQUosQ0FDeEJDLE1BQU0sQ0FBQ0MsR0FBSSxpQkFBZ0JILElBQUssVUFEUixFQUNtQixHQURuQixDQUExQjs7QUFHQSxNQUFNSSxZQUFZLEdBQUcsMkJBQXJCLEMsQ0FFQTs7QUFDQTs7OztBQUdlLFNBQVNDLGFBQVQsQ0FBd0JDLFFBQXhCLEVBQWtDQyxLQUFsQyxFQUF5Q0MsSUFBekMsRUFBK0NDLEtBQUssR0FBRyxFQUF2RCxFQUEyREMsR0FBRyxHQUFHLEVBQWpFLEVBQXFFO0FBQ2xGLFFBQU1DLFNBQVMsR0FBR0YsS0FBSyxDQUFDRyxNQUFOLENBQWFDLENBQUMsSUFBSUEsQ0FBbEIsRUFBcUJDLElBQXJCLENBQTBCLEdBQTFCLENBQWxCOztBQUNBLFFBQU1DLEdBQUcsR0FBRyxDQUFDLE1BQU07QUFDakIsVUFBTUMsR0FBRyxHQUFHQyxN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IH0gZnJvbSAnLi4vaGVscGVycy9lc2NhcGUnXG5cbmNvbnN0IGxpYlJlZ0V4cCA9IG5hbWUgPT4gbmV3IFJlZ0V4cChcbiAgU3RyaW5nLnJhd2AoPzw9XnxcXG4pLy8gQCAke25hbWV9KD89XFxufCQpYCwgJ2cnKVxuXG5jb25zdCBtZFlBTWxSZWdFeHAgPSAvXi0tLVxcbiguKj8pXFxuLS0tKD86XFxufCQpL3NcblxuLy8gZGZzXG4vKipcbiAqIOegtOWjiuOBmeOCi1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1XaWtpICh3aWtpWUFNTCwgd2lraXMsIGxpYnMsIHBhdGhzID0gW10sIGlkcyA9IFtdKSB7XG4gIGNvbnN0IG5hbWVzcGFjZSA9IHBhdGhzLmZpbHRlcihlID0+IGUpLmpvaW4oJy8nKVxuICBjb25zdCBsaWIgPSAoKCkgPT4ge1xuICAgIGNvbnN0IHRtcCA9IE9iamVjdC52YWx1ZXMobGlicylcbiAgICAgIC5maWx0ZXIoZWwgPT4gZWwubmFtZXNwYWNlID09PSBuYW1lc3BhY2UgJiYgZWwuZmlsZW5hbWUgPT09IGAke3dpa2lzLnBhdGh9LmNwcGApXG4gICAgaWYgKHRtcCAmJiB0bXAubGVuZ3RoID09PSAxKSByZXR1cm4gdG1wWzBdXG4gICAgZWxzZSByZXR1cm4gbnVsbFxuICB9KSgpXG4gIGNvbnN0IGRhdGEgPSAoKCkgPT4ge1xuICAgIGxldCBfZGF0YSA9IHtcbiAgICAgIC4uLndpa2lZQU1MLFxuICAgIH1cbiAgICBpZiAod2lraXMud2lraSAmJiB3aWtpcy53aWtpLm1hdGNoKG1kWUFNbFJlZ0V4cCkpIHtcbiAgICAgIGNvbnN0IGlubmVyRGF0YSA9IHlhbWwuc2FmZUxvYWQod2lraXMud2lraS5tYXRjaChtZFlBTWxSZWdFeHApWzFdKVxuICAgICAgX2RhdGEgPSB7XG4gICAgICAgIC4uLl9kYXRhLFxuICAgICAgICAuLi5pbm5lckRhdGEsXG4gICAgICB9XG4gICAgICBPYmplY3Qua2V5cyhpbm5lckRhdGEpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgd2lraXNba2V5XSA9IGlubmVyRGF0YVtrZXldXG4gICAgICB9KVxuICAgICAgd2lraXMud2lraSA9IHdpa2lzLndpa2kucmVwbGFjZShtZFlBTWxSZWdFeHAsICcnKVxuICAgIH1cbiAgICByZXR1cm4gX2RhdGFcbiAgfSkoKVxuICBjb25zdCBpZCA9ICgoKSA9PiB7XG4gICAgaWYgKGRhdGEuaWQpIHJldHVybiBkYXRhLmlkXG4gICAgaWYgKGxpYikge1xuICAgICAgY29uc3QgX2lkID0gbGliLmRhdGEuZmlsdGVyKChbbmFtZSwgdmFsdWVdKSA9PiBuYW1lID09PSAnaWQnKVswXVxuICAgICAgaWYgKF9pZCkgcmV0dXJuIF9pZFsxXVxuICAgIH1cbiAgICByZXR1cm4gd2lraXMucGF0aFxuICB9KSgpXG4gIGNvbnN0IHRpdGxlID0gKCgpID0+IHtcbiAgICBpZiAoZGF0YS50aXRsZSkgcmV0dXJuIGRhdGEudGl0bGVcbiAgICBpZiAod2lraXMudGl0bGUpIHJldHVybiB3aWtpcy50aXRsZVxuICAgIGlmIChsaWIpIHtcbiAgICAgIGNvbnN0IF90aXRsZSA9IGxpYi5kYXRhLmZpbHRlcigoW25hbWVdKSA9PiBuYW1lID09PSAndGl0bGUnKVswXVxuICAgICAgaWYgKF90aXRsZSkgcmV0dXJuIF90aXRsZVsxXVxuICAgIH1cbiAgICByZXR1cm4gd2lraXMucGF0aFxuICB9KSgpXG5cbiAgcGF0aHMgPSBbLi4ucGF0aHMsIHdpa2lzLnBhdGhdXG4gIGlkcyA9IFsuLi5pZHMsIGlkXVxuICBjb25zdCBwZXJtYWxpbmsgPSB3aWtpcy5wZXJtYWxpbmsgfHwgaWRzLmZpbHRlcihlID0+IGUpLmpvaW4oJy8nKVxuICBpZiAod2lraXMud2lraSkge1xuICAgIE9iamVjdC5lbnRyaWVzKGxpYnMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgd2lraXMud2lraSA9IHdpa2lzLndpa2lcbiAgICAgICAgLnJlcGxhY2UobGliUmVnRXhwKGtleSksXG4gICAgICAgICAgKCkgPT4gYFxcbiR7J2BgYGNwcCd9XFxuJHttZEVzY2FwZSh2YWx1ZS5jb2RlKX1cXG4keydgYGAnfVxcbmApXG4gICAgfSlcbiAgfVxuXG4gIC8vIOODh+ODvOOCv+OBr+W+jOWFpeOCjO+8iOmghuW6j+mWouS/guOBjOODkOOCsOOCi++8iVxuXG4gIGRhdGEudGl0bGUgPSB3aWtpcy50aXRsZSA9IHRpdGxlXG4gIGRhdGEucGVybWFsaW5rID0gd2lraXMucGVybWFsaW5rID0gcGVybWFsaW5rXG4gIGlmICh3aWtpcy53aWtpKSB3aWtpcy53aWtpID0gYC0tLVxcbiR7eWFtbC5zYWZlRHVtcChkYXRhKX1cXG4tLS1cXG5cXG4ke3dpa2lzLndpa2l9YFxuXG4gIGlmICh3aWtpcy5jaGlsZCkge1xuICAgIHdpa2lzLmNoaWxkLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgdHJhbnNmb3JtV2lraSh3aWtpWUFNTCwgY2hpbGQsIGxpYnMsIHBhdGhzLCBpZHMpXG4gICAgfSlcbiAgfVxufVxuIl19