"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transformWiki;

require("source-map-support/register");

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _escape = require("../helpers/escape");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const libRegExp = name => new RegExp(String.raw`(?<=^|\n)// @ ${name}(?=\n|$)`, 'g'); // dfs

/**
 * 破壊する
 */


function transformWiki(wikiYAML, wikis, libs, paths = []) {
  const namespace = paths.filter(e => e).join('/');
  const lib = Object.values(libs).filter(el => el.namespace === namespace && el.filename === `${wikis.path}.cpp`)[0];
  paths = [...paths, wikis.path];
  const permalink = wikis.permalink || paths.filter(e => e).join('/');

  if (wikis.wiki) {
    Object.entries(libs).forEach(([key, value]) => {
      wikis.wiki = wikis.wiki.replace(libRegExp(key), `${'```cpp'}\n${(0, _escape.mdEscape)(value.code)}\n${'```'}`);
    });
  }

  if (!wikis.title && lib) {
    const title = lib.data.filter(el => el[1] === 'title')[0];
    if (title) wikis.title = title;
  }

  wikis.title = wikis.title || wikis.path;
  wikis.permalink = permalink;
  const data = { ...wikiYAML,
    permalink,
    title: wikis.title
  };
  if (wikis.wiki) wikis.wiki = `---\n${_jsYaml.default.safeDump(data)}\n---\n\n${wikis.wiki}`;

  if (wikis.child) {
    wikis.child.forEach(child => {
      transformWiki(wikiYAML, child, libs, paths);
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvdHJhbnNmb3JtV2lraS5qcyJdLCJuYW1lcyI6WyJsaWJSZWdFeHAiLCJuYW1lIiwiUmVnRXhwIiwiU3RyaW5nIiwicmF3IiwidHJhbnNmb3JtV2lraSIsIndpa2lZQU1MIiwid2lraXMiLCJsaWJzIiwicGF0aHMiLCJuYW1lc3BhY2UiLCJmaWx0ZXIiLCJlIiwiam9pbiIsImxpYiIsIk9iamVjdCIsInZhbHVlcyIsImVsIiwiZmlsZW5hbWUiLCJwYXRoIiwicGVybWFsaW5rIiwid2lraSIsImVudHJpZXMiLCJmb3JFYWNoIiwia2V5IiwidmFsdWUiLCJyZXBsYWNlIiwiY29kZSIsInRpdGxlIiwiZGF0YSIsInlhbWwiLCJzYWZlRHVtcCIsImNoaWxkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBLE1BQU1BLFNBQVMsR0FBR0MsSUFBSSxJQUFJLElBQUlDLE1BQUosQ0FDeEJDLE1BQU0sQ0FBQ0MsR0FBSSxpQkFBZ0JILElBQUssVUFEUixFQUNtQixHQURuQixDQUExQixDLENBR0E7O0FBQ0E7Ozs7O0FBR2UsU0FBU0ksYUFBVCxDQUF3QkMsUUFBeEIsRUFBa0NDLEtBQWxDLEVBQXlDQyxJQUF6QyxFQUErQ0MsS0FBSyxHQUFHLEVBQXZELEVBQTJEO0FBQ3hFLFFBQU1DLFNBQVMsR0FBR0QsS0FBSyxDQUFDRSxNQUFOLENBQWFDLENBQUMsSUFBSUEsQ0FBbEIsRUFBcUJDLElBQXJCLENBQTBCLEdBQTFCLENBQWxCO0FBQ0EsUUFBTUMsR0FBRyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBY1IsSUFBZCxFQUNURyxNQURTLENBQ0ZNLEVBQUUsSUFBSUEsRUFBRSxDQUFDUCxTQUFILEtBQWlCQSxTQUFqQixJQUNkTyxFQUFFLENBQUNDLFFBQUgsS0FBaUIsR0FBRVgsS0FBSyxDQUFDWSxJQUFLLE1BRnBCLEVBRTJCLENBRjNCLENBQVo7QUFHQVYsRUFBQUEsS0FBSyxHQUFHLENBQUMsR0FBR0EsS0FBSixFQUFXRixLQUFLLENBQUNZLElBQWpCLENBQVI7QUFDQSxRQUFNQyxTQUFTLEdBQUdiLEtBQUssQ0FBQ2EsU0FBTixJQUFtQlgsS0FBSyxDQUFDRSxNQUFOLENBQWFDLENBQUMsSUFBSUEsQ0FBbEIsRUFBcUJDLElBQXJCLENBQTBCLEdBQTFCLENBQXJDOztBQUNBLE1BQUlOLEtBQUssQ0FBQ2MsSUFBVixFQUFnQjtBQUNkTixJQUFBQSxNQUFNLENBQUNPLE9BQVAsQ0FBZWQsSUFBZixFQUFxQmUsT0FBckIsQ0FBNkIsQ0FBQyxDQUFDQyxHQUFELEVBQU1DLEtBQU4sQ0FBRCxLQUFrQjtBQUM3Q2xCLE1BQUFBLEtBQUssQ0FBQ2MsSUFBTixHQUFhZCxLQUFLLENBQUNjLElBQU4sQ0FDVkssT0FEVSxDQUNGMUIsU0FBUyxDQUFDd0IsR0FBRCxDQURQLEVBRVIsR0FBRSxRQUFTLEtBQUksc0JBQVNDLEtBQUssQ0FBQ0UsSUFBZixDQUFxQixLQUFJLEtBQU0sRUFGdEMsQ0FBYjtBQUdELEtBSkQ7QUFLRDs7QUFDRCxNQUFJLENBQUNwQixLQUFLLENBQUNxQixLQUFQLElBQWdCZCxHQUFwQixFQUF5QjtBQUN2QixVQUFNYyxLQUFLLEdBQUdkLEdBQUcsQ0FBQ2UsSUFBSixDQUFTbEIsTUFBVCxDQUFnQk0sRUFBRSxJQUFJQSxFQUFFLENBQUMsQ0FBRCxDQUFGLEtBQVUsT0FBaEMsRUFBeUMsQ0FBekMsQ0FBZDtBQUNBLFFBQUlXLEtBQUosRUFBV3JCLEtBQUssQ0FBQ3FCLEtBQU4sR0FBY0EsS0FBZDtBQUNaOztBQUNEckIsRUFBQUEsS0FBSyxDQUFDcUIsS0FBTixHQUFjckIsS0FBSyxDQUFDcUIsS0FBTixJQUFlckIsS0FBSyxDQUFDWSxJQUFuQztBQUNBWixFQUFBQSxLQUFLLENBQUNhLFNBQU4sR0FBa0JBLFNBQWxCO0FBQ0EsUUFBTVMsSUFBSSxHQUFHLEVBQ1gsR0FBR3ZCLFFBRFE7QUFFWGMsSUFBQUEsU0FGVztBQUdYUSxJQUFBQSxLQUFLLEVBQUVyQixLQUFLLENBQUNxQjtBQUhGLEdBQWI7QUFLQSxNQUFJckIsS0FBSyxDQUFDYyxJQUFWLEVBQWdCZCxLQUFLLENBQUNjLElBQU4sR0FBYyxRQUFPUyxnQkFBS0MsUUFBTCxDQUFjRixJQUFkLENBQW9CLFlBQVd0QixLQUFLLENBQUNjLElBQUssRUFBL0Q7O0FBRWhCLE1BQUlkLEtBQUssQ0FBQ3lCLEtBQVYsRUFBaUI7QUFDZnpCLElBQUFBLEtBQUssQ0FBQ3lCLEtBQU4sQ0FBWVQsT0FBWixDQUFvQlMsS0FBSyxJQUFJO0FBQzNCM0IsTUFBQUEsYUFBYSxDQUFDQyxRQUFELEVBQVcwQixLQUFYLEVBQWtCeEIsSUFBbEIsRUFBd0JDLEtBQXhCLENBQWI7QUFDRCxLQUZEO0FBR0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB5YW1sIGZyb20gJ2pzLXlhbWwnXG5pbXBvcnQgeyBtZEVzY2FwZSB9IGZyb20gJy4uL2hlbHBlcnMvZXNjYXBlJ1xuXG5jb25zdCBsaWJSZWdFeHAgPSBuYW1lID0+IG5ldyBSZWdFeHAoXG4gIFN0cmluZy5yYXdgKD88PV58XFxuKS8vIEAgJHtuYW1lfSg/PVxcbnwkKWAsICdnJylcblxuLy8gZGZzXG4vKipcbiAqIOegtOWjiuOBmeOCi1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1XaWtpICh3aWtpWUFNTCwgd2lraXMsIGxpYnMsIHBhdGhzID0gW10pIHtcbiAgY29uc3QgbmFtZXNwYWNlID0gcGF0aHMuZmlsdGVyKGUgPT4gZSkuam9pbignLycpXG4gIGNvbnN0IGxpYiA9IE9iamVjdC52YWx1ZXMobGlicylcbiAgICAuZmlsdGVyKGVsID0+IGVsLm5hbWVzcGFjZSA9PT0gbmFtZXNwYWNlICYmXG4gICAgZWwuZmlsZW5hbWUgPT09IGAke3dpa2lzLnBhdGh9LmNwcGApWzBdXG4gIHBhdGhzID0gWy4uLnBhdGhzLCB3aWtpcy5wYXRoXVxuICBjb25zdCBwZXJtYWxpbmsgPSB3aWtpcy5wZXJtYWxpbmsgfHwgcGF0aHMuZmlsdGVyKGUgPT4gZSkuam9pbignLycpXG4gIGlmICh3aWtpcy53aWtpKSB7XG4gICAgT2JqZWN0LmVudHJpZXMobGlicykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICB3aWtpcy53aWtpID0gd2lraXMud2lraVxuICAgICAgICAucmVwbGFjZShsaWJSZWdFeHAoa2V5KSxcbiAgICAgICAgICBgJHsnYGBgY3BwJ31cXG4ke21kRXNjYXBlKHZhbHVlLmNvZGUpfVxcbiR7J2BgYCd9YClcbiAgICB9KVxuICB9XG4gIGlmICghd2lraXMudGl0bGUgJiYgbGliKSB7XG4gICAgY29uc3QgdGl0bGUgPSBsaWIuZGF0YS5maWx0ZXIoZWwgPT4gZWxbMV0gPT09ICd0aXRsZScpWzBdXG4gICAgaWYgKHRpdGxlKSB3aWtpcy50aXRsZSA9IHRpdGxlXG4gIH1cbiAgd2lraXMudGl0bGUgPSB3aWtpcy50aXRsZSB8fCB3aWtpcy5wYXRoXG4gIHdpa2lzLnBlcm1hbGluayA9IHBlcm1hbGlua1xuICBjb25zdCBkYXRhID0ge1xuICAgIC4uLndpa2lZQU1MLFxuICAgIHBlcm1hbGluayxcbiAgICB0aXRsZTogd2lraXMudGl0bGVcbiAgfVxuICBpZiAod2lraXMud2lraSkgd2lraXMud2lraSA9IGAtLS1cXG4ke3lhbWwuc2FmZUR1bXAoZGF0YSl9XFxuLS0tXFxuXFxuJHt3aWtpcy53aWtpfWBcblxuICBpZiAod2lraXMuY2hpbGQpIHtcbiAgICB3aWtpcy5jaGlsZC5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgIHRyYW5zZm9ybVdpa2kod2lraVlBTUwsIGNoaWxkLCBsaWJzLCBwYXRocylcbiAgICB9KVxuICB9XG59XG4iXX0=