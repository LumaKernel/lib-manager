"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transformWiki;

require("source-map-support/register");

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _escape = require("../helpers/escape");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const libRegExp = name => new RegExp(String.raw`(?<=^|\n)// @ ${name}(?=\n|$)`, 'g');

const mdYAMlRegExp = /^---\n(.*?)\n---(?:\n|$)/; // dfs

/**
 * 破壊する
 */

function transformWiki(wikiYAML, wikis, libs, paths = []) {
  const namespace = paths.filter(e => e).join('/');
  let lib = Object.values(libs).filter(el => el.namespace === namespace && el.filename === `${wikis.path}.cpp`);
  if (lib && lib.length === 1) lib = lib[0];else lib = null;
  paths = [...paths, wikis.path];
  const permalink = wikis.permalink || paths.filter(e => e).join('/');

  if (wikis.wiki) {
    Object.entries(libs).forEach(([key, value]) => {
      wikis.wiki = wikis.wiki.replace(libRegExp(key), `\n${'```cpp'}\n${(0, _escape.mdEscape)(value.code)}\n${'```'}\n`);
    });
  }

  if (!wikis.title && lib) {
    const title = lib.data.filter(el => el[1] === 'title')[0];
    if (title) wikis.title = title;
  }

  wikis.title = wikis.title || wikis.path;
  wikis.permalink = permalink;
  let data = { ...wikiYAML,
    permalink,
    title: wikis.title
  };

  if (wikis.wiki && wikis.wiki.match(mdYAMlRegExp)) {
    data = { ...data,
      ..._jsYaml.default.safeLoad(wikis.wiki.match(mdYAMlRegExp)[1])
    };
    wikis.wiki = wikis.wiki.replace(mdYAMlRegExp, '');
  }

  if (wikis.wiki) wikis.wiki = `---\n${_jsYaml.default.safeDump(data)}\n---\n\n${wikis.wiki}`;

  if (wikis.child) {
    wikis.child.forEach(child => {
      transformWiki(wikiYAML, child, libs, paths);
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvdHJhbnNmb3JtV2lraS5qcyJdLCJuYW1lcyI6WyJsaWJSZWdFeHAiLCJuYW1lIiwiUmVnRXhwIiwiU3RyaW5nIiwicmF3IiwibWRZQU1sUmVnRXhwIiwidHJhbnNmb3JtV2lraSIsIndpa2lZQU1MIiwid2lraXMiLCJsaWJzIiwicGF0aHMiLCJuYW1lc3BhY2UiLCJmaWx0ZXIiLCJlIiwiam9pbiIsImxpYiIsIk9iamVjdCIsInZhbHVlcyIsImVsIiwiZmlsZW5hbWUiLCJwYXRoIiwibGVuZ3RoIiwicGVybWFsaW5rIiwid2lraSIsImVudHJpZXMiLCJmb3JFYWNoIiwia2V5IiwidmFsdWUiLCJyZXBsYWNlIiwiY29kZSIsInRpdGxlIiwiZGF0YSIsIm1hdGNoIiwieWFtbCIsInNhZmVMb2FkIiwic2FmZUR1bXAiLCJjaGlsZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxTQUFTLEdBQUdDLElBQUksSUFBSSxJQUFJQyxNQUFKLENBQ3hCQyxNQUFNLENBQUNDLEdBQUksaUJBQWdCSCxJQUFLLFVBRFIsRUFDbUIsR0FEbkIsQ0FBMUI7O0FBR0EsTUFBTUksWUFBWSxHQUFHLDBCQUFyQixDLENBRUE7O0FBQ0E7Ozs7QUFHZSxTQUFTQyxhQUFULENBQXdCQyxRQUF4QixFQUFrQ0MsS0FBbEMsRUFBeUNDLElBQXpDLEVBQStDQyxLQUFLLEdBQUcsRUFBdkQsRUFBMkQ7QUFDeEUsUUFBTUMsU0FBUyxHQUFHRCxLQUFLLENBQUNFLE1BQU4sQ0FBYUMsQ0FBQyxJQUFJQSxDQUFsQixFQUFxQkMsSUFBckIsQ0FBMEIsR0FBMUIsQ0FBbEI7QUFDQSxNQUFJQyxHQUFHLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjUixJQUFkLEVBQ1BHLE1BRE8sQ0FDQU0sRUFBRSxJQUFJQSxFQUFFLENBQUNQLFNBQUgsS0FBaUJBLFNBQWpCLElBQ2RPLEVBQUUsQ0FBQ0MsUUFBSCxLQUFpQixHQUFFWCxLQUFLLENBQUNZLElBQUssTUFGdEIsQ0FBVjtBQUdBLE1BQUlMLEdBQUcsSUFBSUEsR0FBRyxDQUFDTSxNQUFKLEtBQWUsQ0FBMUIsRUFBNkJOLEdBQUcsR0FBR0EsR0FBRyxDQUFDLENBQUQsQ0FBVCxDQUE3QixLQUNLQSxHQUFHLEdBQUcsSUFBTjtBQUNMTCxFQUFBQSxLQUFLLEdBQUcsQ0FBQyxHQUFHQSxLQUFKLEVBQVdGLEtBQUssQ0FBQ1ksSUFBakIsQ0FBUjtBQUNBLFFBQU1FLFNBQVMsR0FBR2QsS0FBSyxDQUFDYyxTQUFOLElBQW1CWixLQUFLLENBQUNFLE1BQU4sQ0FBYUMsQ0FBQyxJQUFJQSxDQUFsQixFQUFxQkMsSUFBckIsQ0FBMEIsR0FBMUIsQ0FBckM7O0FBQ0EsTUFBSU4sS0FBSyxDQUFDZSxJQUFWLEVBQWdCO0FBQ2RQLElBQUFBLE1BQU0sQ0FBQ1EsT0FBUCxDQUFlZixJQUFmLEVBQXFCZ0IsT0FBckIsQ0FBNkIsQ0FBQyxDQUFDQyxHQUFELEVBQU1DLEtBQU4sQ0FBRCxLQUFrQjtBQUM3Q25CLE1BQUFBLEtBQUssQ0FBQ2UsSUFBTixHQUFhZixLQUFLLENBQUNlLElBQU4sQ0FDVkssT0FEVSxDQUNGNUIsU0FBUyxDQUFDMEIsR0FBRCxDQURQLEVBRVIsS0FBSSxRQUFTLEtBQUksc0JBQVNDLEtBQUssQ0FBQ0UsSUFBZixDQUFxQixLQUFJLEtBQU0sSUFGeEMsQ0FBYjtBQUdELEtBSkQ7QUFLRDs7QUFDRCxNQUFJLENBQUNyQixLQUFLLENBQUNzQixLQUFQLElBQWdCZixHQUFwQixFQUF5QjtBQUN2QixVQUFNZSxLQUFLLEdBQUdmLEdBQUcsQ0FBQ2dCLElBQUosQ0FBU25CLE1BQVQsQ0FBZ0JNLEVBQUUsSUFBSUEsRUFBRSxDQUFDLENBQUQsQ0FBRixLQUFVLE9BQWhDLEVBQXlDLENBQXpDLENBQWQ7QUFDQSxRQUFJWSxLQUFKLEVBQVd0QixLQUFLLENBQUNzQixLQUFOLEdBQWNBLEtBQWQ7QUFDWjs7QUFDRHRCLEVBQUFBLEtBQUssQ0FBQ3NCLEtBQU4sR0FBY3RCLEtBQUssQ0FBQ3NCLEtBQU4sSUFBZXRCLEtBQUssQ0FBQ1ksSUFBbkM7QUFDQVosRUFBQUEsS0FBSyxDQUFDYyxTQUFOLEdBQWtCQSxTQUFsQjtBQUNBLE1BQUlTLElBQUksR0FBRyxFQUNULEdBQUd4QixRQURNO0FBRVRlLElBQUFBLFNBRlM7QUFHVFEsSUFBQUEsS0FBSyxFQUFFdEIsS0FBSyxDQUFDc0I7QUFISixHQUFYOztBQUtBLE1BQUl0QixLQUFLLENBQUNlLElBQU4sSUFBY2YsS0FBSyxDQUFDZSxJQUFOLENBQVdTLEtBQVgsQ0FBaUIzQixZQUFqQixDQUFsQixFQUFrRDtBQUNoRDBCLElBQUFBLElBQUksR0FBRyxFQUNMLEdBQUdBLElBREU7QUFFTCxTQUFHRSxnQkFBS0MsUUFBTCxDQUFjMUIsS0FBSyxDQUFDZSxJQUFOLENBQVdTLEtBQVgsQ0FBaUIzQixZQUFqQixFQUErQixDQUEvQixDQUFkO0FBRkUsS0FBUDtBQUlBRyxJQUFBQSxLQUFLLENBQUNlLElBQU4sR0FBYWYsS0FBSyxDQUFDZSxJQUFOLENBQVdLLE9BQVgsQ0FBbUJ2QixZQUFuQixFQUFpQyxFQUFqQyxDQUFiO0FBQ0Q7O0FBQ0QsTUFBSUcsS0FBSyxDQUFDZSxJQUFWLEVBQWdCZixLQUFLLENBQUNlLElBQU4sR0FBYyxRQUFPVSxnQkFBS0UsUUFBTCxDQUFjSixJQUFkLENBQW9CLFlBQVd2QixLQUFLLENBQUNlLElBQUssRUFBL0Q7O0FBRWhCLE1BQUlmLEtBQUssQ0FBQzRCLEtBQVYsRUFBaUI7QUFDZjVCLElBQUFBLEtBQUssQ0FBQzRCLEtBQU4sQ0FBWVgsT0FBWixDQUFvQlcsS0FBSyxJQUFJO0FBQzNCOUIsTUFBQUEsYUFBYSxDQUFDQyxRQUFELEVBQVc2QixLQUFYLEVBQWtCM0IsSUFBbEIsRUFBd0JDLEtBQXhCLENBQWI7QUFDRCxLQUZEO0FBR0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB5YW1sIGZyb20gJ2pzLXlhbWwnXG5pbXBvcnQgeyBtZEVzY2FwZSB9IGZyb20gJy4uL2hlbHBlcnMvZXNjYXBlJ1xuXG5jb25zdCBsaWJSZWdFeHAgPSBuYW1lID0+IG5ldyBSZWdFeHAoXG4gIFN0cmluZy5yYXdgKD88PV58XFxuKS8vIEAgJHtuYW1lfSg/PVxcbnwkKWAsICdnJylcblxuY29uc3QgbWRZQU1sUmVnRXhwID0gL14tLS1cXG4oLio/KVxcbi0tLSg/OlxcbnwkKS9cblxuLy8gZGZzXG4vKipcbiAqIOegtOWjiuOBmeOCi1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1XaWtpICh3aWtpWUFNTCwgd2lraXMsIGxpYnMsIHBhdGhzID0gW10pIHtcbiAgY29uc3QgbmFtZXNwYWNlID0gcGF0aHMuZmlsdGVyKGUgPT4gZSkuam9pbignLycpXG4gIGxldCBsaWIgPSBPYmplY3QudmFsdWVzKGxpYnMpXG4gICAgLmZpbHRlcihlbCA9PiBlbC5uYW1lc3BhY2UgPT09IG5hbWVzcGFjZSAmJlxuICAgIGVsLmZpbGVuYW1lID09PSBgJHt3aWtpcy5wYXRofS5jcHBgKVxuICBpZiAobGliICYmIGxpYi5sZW5ndGggPT09IDEpIGxpYiA9IGxpYlswXVxuICBlbHNlIGxpYiA9IG51bGxcbiAgcGF0aHMgPSBbLi4ucGF0aHMsIHdpa2lzLnBhdGhdXG4gIGNvbnN0IHBlcm1hbGluayA9IHdpa2lzLnBlcm1hbGluayB8fCBwYXRocy5maWx0ZXIoZSA9PiBlKS5qb2luKCcvJylcbiAgaWYgKHdpa2lzLndpa2kpIHtcbiAgICBPYmplY3QuZW50cmllcyhsaWJzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIHdpa2lzLndpa2kgPSB3aWtpcy53aWtpXG4gICAgICAgIC5yZXBsYWNlKGxpYlJlZ0V4cChrZXkpLFxuICAgICAgICAgIGBcXG4keydgYGBjcHAnfVxcbiR7bWRFc2NhcGUodmFsdWUuY29kZSl9XFxuJHsnYGBgJ31cXG5gKVxuICAgIH0pXG4gIH1cbiAgaWYgKCF3aWtpcy50aXRsZSAmJiBsaWIpIHtcbiAgICBjb25zdCB0aXRsZSA9IGxpYi5kYXRhLmZpbHRlcihlbCA9PiBlbFsxXSA9PT0gJ3RpdGxlJylbMF1cbiAgICBpZiAodGl0bGUpIHdpa2lzLnRpdGxlID0gdGl0bGVcbiAgfVxuICB3aWtpcy50aXRsZSA9IHdpa2lzLnRpdGxlIHx8IHdpa2lzLnBhdGhcbiAgd2lraXMucGVybWFsaW5rID0gcGVybWFsaW5rXG4gIGxldCBkYXRhID0ge1xuICAgIC4uLndpa2lZQU1MLFxuICAgIHBlcm1hbGluayxcbiAgICB0aXRsZTogd2lraXMudGl0bGVcbiAgfVxuICBpZiAod2lraXMud2lraSAmJiB3aWtpcy53aWtpLm1hdGNoKG1kWUFNbFJlZ0V4cCkpIHtcbiAgICBkYXRhID0ge1xuICAgICAgLi4uZGF0YSxcbiAgICAgIC4uLnlhbWwuc2FmZUxvYWQod2lraXMud2lraS5tYXRjaChtZFlBTWxSZWdFeHApWzFdKVxuICAgIH1cbiAgICB3aWtpcy53aWtpID0gd2lraXMud2lraS5yZXBsYWNlKG1kWUFNbFJlZ0V4cCwgJycpXG4gIH1cbiAgaWYgKHdpa2lzLndpa2kpIHdpa2lzLndpa2kgPSBgLS0tXFxuJHt5YW1sLnNhZmVEdW1wKGRhdGEpfVxcbi0tLVxcblxcbiR7d2lraXMud2lraX1gXG5cbiAgaWYgKHdpa2lzLmNoaWxkKSB7XG4gICAgd2lraXMuY2hpbGQuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICB0cmFuc2Zvcm1XaWtpKHdpa2lZQU1MLCBjaGlsZCwgbGlicywgcGF0aHMpXG4gICAgfSlcbiAgfVxufVxuIl19