"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transformWiki;

require("source-map-support/register");

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _escape = require("../helpers/escape");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const libRegExp = name => new RegExp(String.raw`(?<=^|\n)// @ ${name}(?=\n|$)`, 'g');

const mdYAMlRegExp = /^---\n(.*?)\n---(?:\n|$)/; // dfs

/**
 * 破壊する
 */

function transformWiki(wikiYAML, wikis, libs, paths = []) {
  const namespace = paths.filter(e => e).join('/');
  let lib = Object.values(libs).filter(el => el.namespace === namespace && el.filename === `${wikis.path}.cpp`);
  if (lib && lib.length === 1) lib = lib[0];else lib = null;
  paths = [...paths, wikis.path];
  const permalink = wikis.permalink || paths.filter(e => e).join('/');

  if (wikis.wiki) {
    Object.entries(libs).forEach(([key, value]) => {
      wikis.wiki = wikis.wiki.replace(libRegExp(key), () => `\n${'```cpp'}\n${(0, _escape.mdEscape)(value.code)}\n${'```'}\n`);
    });
  }

  if (!wikis.title && lib) {
    const title = lib.data.filter(([name]) => name === 'title')[0];
    if (title) wikis.title = title[1];
  }

  wikis.title = wikis.title || wikis.path;
  wikis.permalink = permalink;
  let data = { ...wikiYAML,
    permalink,
    title: wikis.title
  };

  if (wikis.wiki && wikis.wiki.match(mdYAMlRegExp)) {
    const innerData = _jsYaml.default.safeLoad(wikis.wiki.match(mdYAMlRegExp)[1]);

    data = { ...data,
      ...innerData
    };
    Object.keys(innerData).forEach(key => {
      wikis[key] = innerData[key];
    });
    wikis.wiki = wikis.wiki.replace(mdYAMlRegExp, '');
  }

  if (wikis.wiki) wikis.wiki = `---\n${_jsYaml.default.safeDump(data)}\n---\n\n${wikis.wiki}`;

  if (wikis.child) {
    wikis.child.forEach(child => {
      transformWiki(wikiYAML, child, libs, paths);
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvdHJhbnNmb3JtV2lraS5qcyJdLCJuYW1lcyI6WyJsaWJSZWdFeHAiLCJuYW1lIiwiUmVnRXhwIiwiU3RyaW5nIiwicmF3IiwibWRZQU1sUmVnRXhwIiwidHJhbnNmb3JtV2lraSIsIndpa2lZQU1MIiwid2lraXMiLCJsaWJzIiwicGF0aHMiLCJuYW1lc3BhY2UiLCJmaWx0ZXIiLCJlIiwiam9pbiIsImxpYiIsIk9iamVjdCIsInZhbHVlcyIsImVsIiwiZmlsZW5hbWUiLCJwYXRoIiwibGVuZ3RoIiwicGVybWFsaW5rIiwid2lraSIsImVudHJpZXMiLCJmb3JFYWNoIiwia2V5IiwidmFsdWUiLCJyZXBsYWNlIiwiY29kZSIsInRpdGxlIiwiZGF0YSIsIm1hdGNoIiwiaW5uZXJEYXRhIiwieWFtbCIsInNhZmVMb2FkIiwia2V5cyIsInNhZmVEdW1wIiwiY2hpbGQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRUEsTUFBTUEsU0FBUyxHQUFHQyxJQUFJLElBQUksSUFBSUMsTUFBSixDQUN4QkMsTUFBTSxDQUFDQyxHQUFJLGlCQUFnQkgsSUFBSyxVQURSLEVBQ21CLEdBRG5CLENBQTFCOztBQUdBLE1BQU1JLFlBQVksR0FBRywwQkFBckIsQyxDQUVBOztBQUNBOzs7O0FBR2UsU0FBU0MsYUFBVCxDQUF3QkMsUUFBeEIsRUFBa0NDLEtBQWxDLEVBQXlDQyxJQUF6QyxFQUErQ0MsS0FBSyxHQUFHLEVBQXZELEVBQTJEO0FBQ3hFLFFBQU1DLFNBQVMsR0FBR0QsS0FBSyxDQUFDRSxNQUFOLENBQWFDLENBQUMsSUFBSUEsQ0FBbEIsRUFBcUJDLElBQXJCLENBQTBCLEdBQTFCLENBQWxCO0FBQ0EsTUFBSUMsR0FBRyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBY1IsSUFBZCxFQUNQRyxNQURPLENBQ0FNLEVBQUUsSUFBSUEsRUFBRSxDQUFDUCxTQUFILEtBQWlCQSxTQUFqQixJQUNkTyxFQUFFLENB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QixLQUFOLENBQVliLE9BQVosQ0FBb0JhLEtBQUssSUFBSTtBQUMzQmhDLE1BQUFBLGFBQWEsQ0FBQ0MsUUFBRCxFQUFXK0IsS0FBWCxFQUFrQjdCLElBQWxCLEVBQXdCQyxLQUF4QixDQUFiO0FBQ0QsS0FGRDtBQUdEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeWFtbCBmcm9tICdqcy15YW1sJ1xuaW1wb3J0IHsgbWRFc2NhcGUgfSBmcm9tICcuLi9oZWxwZXJzL2VzY2FwZSdcblxuY29uc3QgbGliUmVnRXhwID0gbmFtZSA9PiBuZXcgUmVnRXhwKFxuICBTdHJpbmcucmF3YCg/PD1efFxcbikvLyBAICR7bmFtZX0oPz1cXG58JClgLCAnZycpXG5cbmNvbnN0IG1kWUFNbFJlZ0V4cCA9IC9eLS0tXFxuKC4qPylcXG4tLS0oPzpcXG58JCkvXG5cbi8vIGRmc1xuLyoqXG4gKiDnoLTlo4rjgZnjgotcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtV2lraSAod2lraVlBTUwsIHdpa2lzLCBsaWJzLCBwYXRocyA9IFtdKSB7XG4gIGNvbnN0IG5hbWVzcGFjZSA9IHBhdGhzLmZpbHRlcihlID0+IGUpLmpvaW4oJy8nKVxuICBsZXQgbGliID0gT2JqZWN0LnZhbHVlcyhsaWJzKVxuICAgIC5maWx0ZXIoZWwgPT4gZWwubmFtZXNwYWNlID09PSBuYW1lc3BhY2UgJiZcbiAgICBlbC5maWxlbmFtZSA9PT0gYCR7d2lraXMucGF0aH0uY3BwYClcbiAgaWYgKGxpYiAmJiBsaWIubGVuZ3RoID09PSAxKSBsaWIgPSBsaWJbMF1cbiAgZWxzZSBsaWIgPSBudWxsXG4gIHBhdGhzID0gWy4uLnBhdGhzLCB3aWtpcy5wYXRoXVxuICBjb25zdCBwZXJtYWxpbmsgPSB3aWtpcy5wZXJtYWxpbmsgfHwgcGF0aHMuZmlsdGVyKGUgPT4gZSkuam9pbignLycpXG4gIGlmICh3aWtpcy53aWtpKSB7XG4gICAgT2JqZWN0LmVudHJpZXMobGlicykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICB3aWtpcy53aWtpID0gd2lraXMud2lraVxuICAgICAgICAucmVwbGFjZShsaWJSZWdFeHAoa2V5KSxcbiAgICAgICAgICAoKSA9PiBgXFxuJHsnYGBgY3BwJ31cXG4ke21kRXNjYXBlKHZhbHVlLmNvZGUpfVxcbiR7J2BgYCd9XFxuYClcbiAgICB9KVxuICB9XG4gIGlmICghd2lraXMudGl0bGUgJiYgbGliKSB7XG4gICAgY29uc3QgdGl0bGUgPSBsaWIuZGF0YS5maWx0ZXIoKFtuYW1lXSkgPT4gbmFtZSA9PT0gJ3RpdGxlJylbMF1cbiAgICBpZiAodGl0bGUpIHdpa2lzLnRpdGxlID0gdGl0bGVbMV1cbiAgfVxuICB3aWtpcy50aXRsZSA9IHdpa2lzLnRpdGxlIHx8IHdpa2lzLnBhdGhcbiAgd2lraXMucGVybWFsaW5rID0gcGVybWFsaW5rXG4gIGxldCBkYXRhID0ge1xuICAgIC4uLndpa2lZQU1MLFxuICAgIHBlcm1hbGluayxcbiAgICB0aXRsZTogd2lraXMudGl0bGVcbiAgfVxuICBpZiAod2lraXMud2lraSAmJiB3aWtpcy53aWtpLm1hdGNoKG1kWUFNbFJlZ0V4cCkpIHtcbiAgICBjb25zdCBpbm5lckRhdGEgPSB5YW1sLnNhZmVMb2FkKHdpa2lzLndpa2kubWF0Y2gobWRZQU1sUmVnRXhwKVsxXSlcbiAgICBkYXRhID0ge1xuICAgICAgLi4uZGF0YSxcbiAgICAgIC4uLmlubmVyRGF0YSxcbiAgICB9XG4gICAgT2JqZWN0LmtleXMoaW5uZXJEYXRhKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICB3aWtpc1trZXldID0gaW5uZXJEYXRhW2tleV1cbiAgICB9KVxuICAgIHdpa2lzLndpa2kgPSB3aWtpcy53aWtpLnJlcGxhY2UobWRZQU1sUmVnRXhwLCAnJylcbiAgfVxuICBpZiAod2lraXMud2lraSkgd2lraXMud2lraSA9IGAtLS1cXG4ke3lhbWwuc2FmZUR1bXAoZGF0YSl9XFxuLS0tXFxuXFxuJHt3aWtpcy53aWtpfWBcblxuICBpZiAod2lraXMuY2hpbGQpIHtcbiAgICB3aWtpcy5jaGlsZC5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgIHRyYW5zZm9ybVdpa2kod2lraVlBTUwsIGNoaWxkLCBsaWJzLCBwYXRocylcbiAgICB9KVxuICB9XG59XG4iXX0=