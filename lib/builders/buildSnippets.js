"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeSnippet = makeSnippet;

require("source-map-support/register");

function makeSnippet(config, libs) {
  return Object.keys(libs).filter(key => {
    const el = libs[key];
    const snippet = el.data.filter(el => el[0] === 'snippet') || [];
    return snippet.length;
  }).map(key => {
    const el = libs[key];
    const settings = {
      options: 'head'
    };
    ['snippet', 'options'].forEach(opt => {
      const data = el.data.filter(el => el[0] === opt)[0];
      if (data) settings[opt] = data[1];
    });
    const alias = [];
    let code = el.code.split('\n');
    code.push('${0}'); // eslint-disable-line no-template-curly-in-string

    code = code.map(el => '  ' + el).join('\n'); // indent

    const aliasData = el.data.filter(el => el[0] === 'alias') || [];
    aliasData.forEach(el => {
      alias.push(...el[1].split(' '));
    });
    if (alias.length) settings.alias = alias.join(' ');
    return Object.entries(settings).sort(([a], [b]) => -(a === 'snippet') + (b === 'snippet')).map(([key, value]) => key + ' ' + value).join('\n') + '\n' + code;
  }).join('\n\n');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZGVycy9idWlsZFNuaXBwZXRzLmpzIl0sIm5hbWVzIjpbIm1ha2VTbmlwcGV0IiwiY29uZmlnIiwibGlicyIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJrZXkiLCJlbCIsInNuaXBwZXQiLCJkYXRhIiwibGVuZ3RoIiwibWFwIiwic2V0dGluZ3MiLCJvcHRpb25zIiwiZm9yRWFjaCIsIm9wdCIsImFsaWFzIiwiY29kZSIsInNwbGl0IiwicHVzaCIsImpvaW4iLCJhbGlhc0RhdGEiLCJlbnRyaWVzIiwic29ydCIsImEiLCJiIiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFPLFNBQVNBLFdBQVQsQ0FBc0JDLE1BQXRCLEVBQThCQyxJQUE5QixFQUFvQztBQUN6QyxTQUFPQyxNQUFNLENBQUNDLElBQVAsQ0FBWUYsSUFBWixFQUNKRyxNQURJLENBQ0dDLEdBQUcsSUFBSTtBQUNiLFVBQU1DLEVBQUUsR0FBR0wsSUFBSSxDQUFDSSxHQUFELENBQWY7QUFDQSxVQUFNRSxPQUFPLEdBQUdELEVBQUUsQ0FBQ0UsSUFBSCxDQUFRSixNQUFSLENBQWVFLEVBQUUsSUFBSUEsRUFBRSxDQUFDLENBQUQsQ0FBRixLQUFVLFNBQS9CLEtBQTZDLEVBQTdEO0FBQ0EsV0FBT0MsT0FBTyxDQUFDRSxNQUFmO0FBQ0QsR0FMSSxFQUtGQyxHQUxFLENBS0VMLEdBQUcsSUFBSTtBQUNaLFVBQU1DLEVBQUUsR0FBR0wsSUFBSSxDQUFDSSxHQUFELENBQWY7QUFDQSxVQUFNTSxRQUFRLEdBQUc7QUFDZkMsTUFBQUEsT0FBTyxFQUFFO0FBRE0sS0FBakI7QUFHQSxLQUFDLFNBQUQsRUFBWSxTQUFaLEVBQXVCQyxPQUF2QixDQUErQkMsR0FBRyxJQUFJO0FBQ3BDLFlBQU1OLElBQUksR0FBR0YsRUFBRSxDQUFDRSxJQUFILENBQVFKLE1BQVIsQ0FBZUUsRUFBRSxJQUFJQSxFQUFFLENBQUMsQ0FBRCxDQUFGLEtBQVVRLEdBQS9CLEVBQW9DLENBQXBDLENBQWI7QUFDQSxVQUFJTixJQUFKLEVBQVVHLFFBQVEsQ0FBQ0csR0FBRCxDQUFSLEdBQWdCTixJQUFJLENBQUMsQ0FBRCxDQUFwQjtBQUNYLEtBSEQ7QUFJQSxVQUFNTyxLQUFLLEdBQUcsRUFBZDtBQUVBLFFBQUlDLElBQUksR0FBR1YsRUFBRSxDQUFDVSxJQUFILENBQVFDLEtBQVIsQ0FBYyxJQUFkLENBQVg7QUFDQUQsSUFBQUEsSUFBSSxDQUFDRSxJQUFMLENBQVUsTUFBVixFQVpZLENBWU07O0FBQ2xCRixJQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ04sR0FBTCxDQUFTSixFQUFFLElBQUksT0FBT0EsRUFBdEIsRUFBMEJhLElBQTFCLENBQStCLElBQS9CLENBQVAsQ0FiWSxDQWFnQzs7QUFFNUMsVUFBTUMsU0FBUyxHQUFHZCxFQUFFLENBQUNFLElBQUgsQ0FBUUosTUFBUixDQUFlRSxFQUFFLElBQUlBLEVBQUUsQ0FBQyxDQUFELENBQUYsS0FBVSxPQUEvQixLQUEyQyxFQUE3RDtBQUNBYyxJQUFBQSxTQUFTLENBQUNQLE9BQVYsQ0FBa0JQLEVBQUUsSUFBSTtBQUFFUyxNQUFBQSxLQUFLLENBQUNHLElBQU4sQ0FBVyxHQUFHWixFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU1XLEtBQU4sQ0FBWSxHQUFaLENBQWQ7QUFBaUMsS0FBM0Q7QUFDQSxRQUFJRixLQUFLLENBQUNOLE1BQVYsRUFBa0JFLFFBQVEsQ0FBQ0ksS0FBVCxHQUFpQkEsS0FBSyxDQUFDSSxJQUFOLENBQVcsR0FBWCxDQUFqQjtBQUNsQixXQUNFakIsTUFBTSxDQUFDbUIsT0FBUCxDQUFlVixRQUFmLEVBQ0dXLElBREgsQ0FDUSxDQUFDLENBQUNDLENBQUQsQ0FBRCxFQUFNLENBQUNDLENBQUQsQ0FBTixLQUFjLEVBQUVELENBQUMsS0FBSyxTQUFSLEtBQXNCQyxDQUFDLEtBQUssU0FBNUIsQ0FEdEIsRUFFR2QsR0FGSCxDQUVPLENBQUMsQ0FBQ0wsR0FBRCxFQUFNb0IsS0FBTixDQUFELEtBQWtCcEIsR0FBRyxHQUFHLEdBQU4sR0FBWW9CLEtBRnJDLEVBR0dOLElBSEgsQ0FHUSxJQUhSLENBREssR0FLSCxJQUxHLEdBS0lILElBTFg7QUFNRCxHQTdCSSxFQTZCRkcsSUE3QkUsQ0E2QkcsTUE3QkgsQ0FBUDtBQThCRCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBtYWtlU25pcHBldCAoY29uZmlnLCBsaWJzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhsaWJzKVxuICAgIC5maWx0ZXIoa2V5ID0+IHtcbiAgICAgIGNvbnN0IGVsID0gbGlic1trZXldXG4gICAgICBjb25zdCBzbmlwcGV0ID0gZWwuZGF0YS5maWx0ZXIoZWwgPT4gZWxbMF0gPT09ICdzbmlwcGV0JykgfHwgW11cbiAgICAgIHJldHVybiBzbmlwcGV0Lmxlbmd0aFxuICAgIH0pLm1hcChrZXkgPT4ge1xuICAgICAgY29uc3QgZWwgPSBsaWJzW2tleV1cbiAgICAgIGNvbnN0IHNldHRpbmdzID0ge1xuICAgICAgICBvcHRpb25zOiAnaGVhZCdcbiAgICAgIH07XG4gICAgICBbJ3NuaXBwZXQnLCAnb3B0aW9ucyddLmZvckVhY2gob3B0ID0+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGVsLmRhdGEuZmlsdGVyKGVsID0+IGVsWzBdID09PSBvcHQpWzBdXG4gICAgICAgIGlmIChkYXRhKSBzZXR0aW5nc1tvcHRdID0gZGF0YVsxXVxuICAgICAgfSlcbiAgICAgIGNvbnN0IGFsaWFzID0gW11cblxuICAgICAgbGV0IGNvZGUgPSBlbC5jb2RlLnNwbGl0KCdcXG4nKVxuICAgICAgY29kZS5wdXNoKCckezB9JykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby10ZW1wbGF0ZS1jdXJseS1pbi1zdHJpbmdcbiAgICAgIGNvZGUgPSBjb2RlLm1hcChlbCA9PiAnICAnICsgZWwpLmpvaW4oJ1xcbicpIC8vIGluZGVudFxuXG4gICAgICBjb25zdCBhbGlhc0RhdGEgPSBlbC5kYXRhLmZpbHRlcihlbCA9PiBlbFswXSA9PT0gJ2FsaWFzJykgfHwgW11cbiAgICAgIGFsaWFzRGF0YS5mb3JFYWNoKGVsID0+IHsgYWxpYXMucHVzaCguLi5lbFsxXS5zcGxpdCgnICcpKSB9KVxuICAgICAgaWYgKGFsaWFzLmxlbmd0aCkgc2V0dGluZ3MuYWxpYXMgPSBhbGlhcy5qb2luKCcgJylcbiAgICAgIHJldHVybiAoXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHNldHRpbmdzKVxuICAgICAgICAgIC5zb3J0KChbYV0sIFtiXSkgPT4gLShhID09PSAnc25pcHBldCcpICsgKGIgPT09ICdzbmlwcGV0JykpXG4gICAgICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBrZXkgKyAnICcgKyB2YWx1ZSlcbiAgICAgICAgICAuam9pbignXFxuJylcbiAgICAgICkgKyAnXFxuJyArIGNvZGVcbiAgICB9KS5qb2luKCdcXG5cXG4nKVxufVxuIl19