"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeSnippet = makeSnippet;

require("source-map-support/register");

function makeSnippet(config, libs) {
  return Object.keys(libs).filter(key => {
    const el = libs[key];
    const snippet = el.data.filter(el => el[0] === 'snippet') || [];
    return snippet.length;
  }).map(key => {
    const el = libs[key];
    const settings = {
      options: 'head'
    };
    ['snippet', 'options'].forEach(opt => {
      const data = el.data.filter(el => el[0] === opt)[0];
      if (data) settings[opt] = data[1];
    });
    const alias = [];
    let code = el.code.split('\n');
    code.push('${0}'); // eslint-disable-line no-template-curly-in-string

    code = code.map(el => '  ' + el).join('\n'); // indent

    const aliasData = el.data.filter(el => el[0] === 'alias') || [];
    aliasData.forEach(el => {
      alias.push(...el[1].split(' '));
    });
    if (alias.length) settings.alias = alias.join(' ');
    return Object.entries(settings).sort(([a], [b]) => -(a === 'snippet') + (b === 'snippet')).map(([key, value]) => key + ' ' + value).join('\n') + '\n' + code;
  }).join('\n\n');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZGVycy9idWlsZFNuaXBwZXRzLmpzIl0sIm5hbWVzIjpbIm1ha2VTbmlwcGV0IiwiY29uZmlnIiwibGlicyIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJrZXkiLCJlbCIsInNuaXBwZXQiLCJkYXRhIiwibGVuZ3RoIiwibWFwIiwic2V0dGluZ3MiLCJvcHRpb25zIiwiZm9yRWFjaCIsIm9wdCIsImFsaWFzIiwiY29kZSIsInNwbGl0IiwicHVzaCIsImpvaW4iLCJhbGlhc0RhdGEiLCJlbnRyaWVzIiwic29ydCIsImEiLCJiIiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFPLFNBQVNBLFdBQVQsQ0FBc0JDLE1BQXRCLEVBQThCQyxJQUE5QixFQUFvQztBQUN6QyxTQUFPQyxNQUFNLENBQUNDLElBQVAsQ0FBWUYsSUFBWixFQUNKRyxNQURJLENBQ0dDLEdBQUcsSUFBSTtBQUNiLFVBQU1DLEVBQUUsR0FBR0wsSUFBSSxDQUFDSSxHQUFELENBQWY7QUFDQSxVQUFNRSxPQUFPLEdBQUdELEVBQUUsQ0FBQ0UsSUFBSCxDQUFRSixNQUFSLENBQWVFLEVBQUUsSUFBSUEsRUFBRSxDQUFDLENBQUQsQ0FBRixLQUFVLFNBQS9CLEtBQTZDLEVBQTdEO0FBQ0EsV0FBT0MsT0FBTyxDQUFDRSxNQUFmO0FBQ0QsR0FMSSxFQUtGQyxHQUxFLENBS0VMLEdBQUcsSUFBSTtBQUNaLFVBQU1DLEVBQUUsR0FBR0wsSUFBSSxDQUFDSSxHQUFELENBQWY7QUFDQSxVQUFNTSxRQUFRLEdBQUc7QUFDZkMsTUFBQUEsT0FBTyxFQUFFO0FBRE0sS0FBakI7QUFHQSxLQUFDLFNBQUQsRUFBWSxTQUFaLEVBQXVCQyxPQUF2QixDQUErQkMsR0FBRyxJQUFJO0FBQ3BDLFlBQU1OLElBQUksR0FBR0YsRUFBRSxDQUFDRSxJQUFILENBQVFKLE1BQVIsQ0FBZUUsRUFBRSxJQUFJQSxFQUFFLENBQUMsQ0FBRCxDQUFGLEtBQVVRLEdBQS9CLEVBQW9DLENBQXBDLENBQWI7QUFDQSxVQUFJTixJQUFKLEVBQVVHLFFBQVEsQ0FBQ0csR0FBRCxDQUFSLEdBQWdCTixJQUFJLENBQUMsQ0FBRCxDQUFwQjtBQUNYLEtBSEQ7QUFJQSxVQUFNTyxLQUFLLEdBQUcsRUFBZDtBQUVBLFFBQUlDLElBQUksR0FBR1YsRUFBRSxDQUFDVSxJQUFILENBQVFDLEtBQVIsQ0FBYyxJQUFkLENBQVg7QUFDQUQsSUFBQUEsSUFBSSxDQUFDRSxJQUFMLENBQVUsTUFBVixFQVpZLENBWU07O0FBQ2xCRixJQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ04sR0FBTCxDQUFTSixFQUFFLElBQUksT0FBT0EsRUFBdEIsRUFBMEJhLElBQTFCLENBQStCLElBQS9CLENBQVAsQ0FiWSxDQWFnQzs7QUFFNUMsVUFBTUMsU0FBUyxHQUFHZCxFQUFFLENBQUNFLElBQUgsQ0FBUUosTUFBUixDQUFlRSxFQUFFLElBQUlBLEVBQUUsQ0FBQyxDQUFELENBQUYsS0FBVSxPQUEvQixLQUEyQyxFQUE3RDtBQUNBYyxJQUFBQSxTQUFTLENBQUNQLE9BQVYsQ0FBa0JQLEVBQUUsSUFBSTtBQUFFUyxNQUFBQSxLQUFLLENBQUNHLElBQU4sQ0FBVyxHQUFHWixFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU1XLEtBQU4sQ0FBWSxHQUFaLENBQWQ7QUFBaUMsS0FBM0Q7QUFDQSxRQUFJRixLQUFLLENBQUNOLE1BQVYsRUFBa0JFLFFBQVEsQ0FBQ0ksS0FBVCxHQUFpQkEsS0FBSyxDQUFDSSxJQUFOLENBQVcsR0FBWCxDQUFqQjtBQUNsQixXQUNFakIsTUFBTSxDQUFDbUIsT0FBUCxDQUFlVixRQUFmLEVBQ0dXLElBREgsQ0FDUSxDQUFDLENBQUNDLENBQUQsQ0FBRCxFQUFNLENBQUNDLENBQUQsQ0FBTixLQUFjLEVBQUVELENBQUMsS0FBSyxTQUFSLEtBQXNCQyxDQUFDLEtBQUssU0FBNUIsQ0FEdEIsRUFFR2QsR0FGSCxDQUVPLENBQUMsQ0FBQ0wsR0FBRCxFQUFNb0IsS0FBTixDQUFELEtBQWtCcEIsR0FBRyxHQUFHLEdBQU4sR0FBWW9CLEtBRnJDLEVBR0dOLElBSEgsQ0FHUSxJQUhSLENBREssR0FLSCxJQUxHLEdBS0lILElBTFg7QUFNRCxHQTdCSSxFQTZCRkcsSUE3QkUsQ0E2QkcsTUE3QkgsQ0FBUDtBQThCRCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBtYWtlU25pcHBldCAoY29uZmlnLCBsaWJzKSB7XHJcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGxpYnMpXHJcbiAgICAuZmlsdGVyKGtleSA9PiB7XHJcbiAgICAgIGNvbnN0IGVsID0gbGlic1trZXldXHJcbiAgICAgIGNvbnN0IHNuaXBwZXQgPSBlbC5kYXRhLmZpbHRlcihlbCA9PiBlbFswXSA9PT0gJ3NuaXBwZXQnKSB8fCBbXVxyXG4gICAgICByZXR1cm4gc25pcHBldC5sZW5ndGhcclxuICAgIH0pLm1hcChrZXkgPT4ge1xyXG4gICAgICBjb25zdCBlbCA9IGxpYnNba2V5XVxyXG4gICAgICBjb25zdCBzZXR0aW5ncyA9IHtcclxuICAgICAgICBvcHRpb25zOiAnaGVhZCdcclxuICAgICAgfTtcclxuICAgICAgWydzbmlwcGV0JywgJ29wdGlvbnMnXS5mb3JFYWNoKG9wdCA9PiB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGVsLmRhdGEuZmlsdGVyKGVsID0+IGVsWzBdID09PSBvcHQpWzBdXHJcbiAgICAgICAgaWYgKGRhdGEpIHNldHRpbmdzW29wdF0gPSBkYXRhWzFdXHJcbiAgICAgIH0pXHJcbiAgICAgIGNvbnN0IGFsaWFzID0gW11cclxuXHJcbiAgICAgIGxldCBjb2RlID0gZWwuY29kZS5zcGxpdCgnXFxuJylcclxuICAgICAgY29kZS5wdXNoKCckezB9JykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby10ZW1wbGF0ZS1jdXJseS1pbi1zdHJpbmdcclxuICAgICAgY29kZSA9IGNvZGUubWFwKGVsID0+ICcgICcgKyBlbCkuam9pbignXFxuJykgLy8gaW5kZW50XHJcblxyXG4gICAgICBjb25zdCBhbGlhc0RhdGEgPSBlbC5kYXRhLmZpbHRlcihlbCA9PiBlbFswXSA9PT0gJ2FsaWFzJykgfHwgW11cclxuICAgICAgYWxpYXNEYXRhLmZvckVhY2goZWwgPT4geyBhbGlhcy5wdXNoKC4uLmVsWzFdLnNwbGl0KCcgJykpIH0pXHJcbiAgICAgIGlmIChhbGlhcy5sZW5ndGgpIHNldHRpbmdzLmFsaWFzID0gYWxpYXMuam9pbignICcpXHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoc2V0dGluZ3MpXHJcbiAgICAgICAgICAuc29ydCgoW2FdLCBbYl0pID0+IC0oYSA9PT0gJ3NuaXBwZXQnKSArIChiID09PSAnc25pcHBldCcpKVxyXG4gICAgICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBrZXkgKyAnICcgKyB2YWx1ZSlcclxuICAgICAgICAgIC5qb2luKCdcXG4nKVxyXG4gICAgICApICsgJ1xcbicgKyBjb2RlXHJcbiAgICB9KS5qb2luKCdcXG5cXG4nKVxyXG59XHJcbiJdfQ==