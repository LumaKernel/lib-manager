'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeSnippet = makeSnippet;

require('source-map-support/register');

function makeSnippet(config, libs) {
  return Object.keys(libs).filter(key => {
    const el = libs[key];
    const snippet = el.data.filter(el => el[0] === 'snippet') || [];
    return snippet.length;
  }).map(key => {
    const el = libs[key];
    const settings = {};
    ['snippet', 'option'].forEach(opt => {
      const data = el.data.filter(el => el[0] === opt)[0];
      if (data) settings[opt] = data[1];
    });
    const alias = [];

    let code = el.code.split('\n');
    code.push('${0}'); // eslint-disable-line no-template-curly-in-string
    code = code.map(el => '  ' + el).join('\n'); // indent

    const aliasData = el.data.filter(el => el[0] === 'alias') || [];
    aliasData.forEach(el => {
      alias.push(...el[1].split(' '));
    });
    if (alias.length) settings.alias = alias.join(' ');
    return Object.entries(settings).map(([key, value]) => key + ' ' + value).join('\n') + '\n' + code;
  }).join('\n\n');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZGVycy9idWlsZFNuaXBwZXRzLmpzIl0sIm5hbWVzIjpbIm1ha2VTbmlwcGV0IiwiY29uZmlnIiwibGlicyIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJrZXkiLCJlbCIsInNuaXBwZXQiLCJkYXRhIiwibGVuZ3RoIiwibWFwIiwic2V0dGluZ3MiLCJmb3JFYWNoIiwib3B0IiwiYWxpYXMiLCJjb2RlIiwic3BsaXQiLCJwdXNoIiwiam9pbiIsImFsaWFzRGF0YSIsImVudHJpZXMiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFBZ0JBLFcsR0FBQUEsVzs7OztBQUFULFNBQVNBLFdBQVQsQ0FBc0JDLE1BQXRCLEVBQThCQyxJQUE5QixFQUFvQztBQUN6QyxTQUFPQyxPQUFPQyxJQUFQLENBQVlGLElBQVosRUFDSkcsTUFESSxDQUNHQyxPQUFPO0FBQ2IsVUFBTUMsS0FBS0wsS0FBS0ksR0FBTCxDQUFYO0FBQ0EsVUFBTUUsVUFBVUQsR0FBR0UsSUFBSCxDQUFRSixNQUFSLENBQWVFLE1BQU1BLEdBQUcsQ0FBSCxNQUFVLFNBQS9CLEtBQTZDLEVBQTdEO0FBQ0EsV0FBT0MsUUFBUUUsTUFBZjtBQUNELEdBTEksRUFLRkMsR0FMRSxDQUtFTCxPQUFPO0FBQ1osVUFBTUMsS0FBS0wsS0FBS0ksR0FBTCxDQUFYO0FBQ0EsVUFBTU0sV0FBVyxFQUFqQjtBQUNBLEtBQUMsU0FBRCxFQUFZLFFBQVosRUFBc0JDLE9BQXRCLENBQThCQyxPQUFPO0FBQ25DLFlBQU1MLE9BQU9GLEdBQUdFLElBQUgsQ0FBUUosTUFBUixDQUFlRSxNQUFNQSxHQUFHLENBQUgsTUFBVU8sR0FBL0IsRUFBb0MsQ0FBcEMsQ0FBYjtBQUNBLFVBQUlMLElBQUosRUFBVUcsU0FBU0UsR0FBVCxJQUFnQkwsS0FBSyxDQUFMLENBQWhCO0FBQ1gsS0FIRDtBQUlBLFVBQU1NLFFBQVEsRUFBZDs7QUFFQSxRQUFJQyxPQUFPVCxHQUFHUyxJQUFILENBQVFDLEtBQVIsQ0FBYyxJQUFkLENBQVg7QUFDQUQsU0FBS0UsSUFBTCxDQUFVLE1BQVYsRUFWWSxDQVVNO0FBQ2xCRixXQUFPQSxLQUFLTCxHQUFMLENBQVNKLE1BQU0sT0FBT0EsRUFBdEIsRUFBMEJZLElBQTFCLENBQStCLElBQS9CLENBQVAsQ0FYWSxDQVdnQzs7QUFFNUMsVUFBTUMsWUFBWWIsR0FBR0UsSUFBSCxDQUFRSixNQUFSLENBQWVFLE1BQU1BLEdBQUcsQ0FBSCxNQUFVLE9BQS9CLEtBQTJDLEVBQTdEO0FBQ0FhLGNBQVVQLE9BQVYsQ0FBa0JOLE1BQU07QUFBRVEsWUFBTUcsSUFBTixDQUFXLEdBQUdYLEdBQUcsQ0FBSCxFQUFNVSxLQUFOLENBQVksR0FBWixDQUFkO0FBQWlDLEtBQTNEO0FBQ0EsUUFBSUYsTUFBTUwsTUFBVixFQUFrQkUsU0FBU0csS0FBVCxHQUFpQkEsTUFBTUksSUFBTixDQUFXLEdBQVgsQ0FBakI7QUFDbEIsV0FDRWhCLE9BQU9rQixPQUFQLENBQWVULFFBQWYsRUFDR0QsR0FESCxDQUNPLENBQUMsQ0FBQ0wsR0FBRCxFQUFNZ0IsS0FBTixDQUFELEtBQWtCaEIsTUFBTSxHQUFOLEdBQVlnQixLQURyQyxFQUVHSCxJQUZILENBRVEsSUFGUixDQURLLEdBSUgsSUFKRyxHQUlJSCxJQUpYO0FBS0QsR0ExQkksRUEwQkZHLElBMUJFLENBMEJHLE1BMUJILENBQVA7QUEyQkQiLCJmaWxlIjoiYnVpbGRTbmlwcGV0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBtYWtlU25pcHBldCAoY29uZmlnLCBsaWJzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhsaWJzKVxuICAgIC5maWx0ZXIoa2V5ID0+IHtcbiAgICAgIGNvbnN0IGVsID0gbGlic1trZXldXG4gICAgICBjb25zdCBzbmlwcGV0ID0gZWwuZGF0YS5maWx0ZXIoZWwgPT4gZWxbMF0gPT09ICdzbmlwcGV0JykgfHwgW11cbiAgICAgIHJldHVybiBzbmlwcGV0Lmxlbmd0aFxuICAgIH0pLm1hcChrZXkgPT4ge1xuICAgICAgY29uc3QgZWwgPSBsaWJzW2tleV1cbiAgICAgIGNvbnN0IHNldHRpbmdzID0ge307XG4gICAgICBbJ3NuaXBwZXQnLCAnb3B0aW9uJ10uZm9yRWFjaChvcHQgPT4ge1xuICAgICAgICBjb25zdCBkYXRhID0gZWwuZGF0YS5maWx0ZXIoZWwgPT4gZWxbMF0gPT09IG9wdClbMF1cbiAgICAgICAgaWYgKGRhdGEpIHNldHRpbmdzW29wdF0gPSBkYXRhWzFdXG4gICAgICB9KVxuICAgICAgY29uc3QgYWxpYXMgPSBbXVxuXG4gICAgICBsZXQgY29kZSA9IGVsLmNvZGUuc3BsaXQoJ1xcbicpXG4gICAgICBjb2RlLnB1c2goJyR7MH0nKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXRlbXBsYXRlLWN1cmx5LWluLXN0cmluZ1xuICAgICAgY29kZSA9IGNvZGUubWFwKGVsID0+ICcgICcgKyBlbCkuam9pbignXFxuJykgLy8gaW5kZW50XG5cbiAgICAgIGNvbnN0IGFsaWFzRGF0YSA9IGVsLmRhdGEuZmlsdGVyKGVsID0+IGVsWzBdID09PSAnYWxpYXMnKSB8fCBbXVxuICAgICAgYWxpYXNEYXRhLmZvckVhY2goZWwgPT4geyBhbGlhcy5wdXNoKC4uLmVsWzFdLnNwbGl0KCcgJykpIH0pXG4gICAgICBpZiAoYWxpYXMubGVuZ3RoKSBzZXR0aW5ncy5hbGlhcyA9IGFsaWFzLmpvaW4oJyAnKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoc2V0dGluZ3MpXG4gICAgICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBrZXkgKyAnICcgKyB2YWx1ZSlcbiAgICAgICAgICAuam9pbignXFxuJylcbiAgICAgICkgKyAnXFxuJyArIGNvZGVcbiAgICB9KS5qb2luKCdcXG5cXG4nKVxufVxuIl19