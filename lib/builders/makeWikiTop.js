"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = makeWikiTop;

require("source-map-support/register");

var _escape = require("../helpers/escape");

function makeWikiTop(topRaw, wikis, lastUpdate) {
  const wikiList0 = [];
  wikis = makeList(wikis, wikiList0);
  const wikiList = [wikiList0[0]];

  for (let i = 1; i < wikiList0.length; i++) {
    if (wikiList0[i - 1].type !== 'dir' && wikiList0[i].type !== 'dir') ;else {
      wikiList.push('line');
    }
    wikiList.push(wikiList0[i]);
  }

  const content = wikiList.map(el => {
    if (el === 'line') {
      return '';
    } else {
      const title = el.permalink ? `[${(0, _escape.mdEscape)(el.title)}]({{ "${(0, _escape.quoteEscape)(el.permalink)}" | relative_url }})` : (0, _escape.mdEscape)(el.title);
      return mark(el.depth, el.type) + ' ' + title;
    }
  }).join('\n');
  return topRaw.replace(/###content###/g, content).replace(/###last_update###/g, (0, _escape.mdEscape)(lastUpdate));
} // dfs


function makeList(wikis, wikiList, depth = 0) {
  if (depth) {
    wikiList.push({
      depth,
      type: wikis.type,
      title: wikis.title,
      permalink: wikis.wiki && wikis.permalink
    });
  }

  if (wikis.child) {
    wikis.child.forEach(child => {
      makeList(child, wikiList, depth + 1);
    });
  }
}

function mark(depth, type) {
  switch (type) {
    case 'dir':
      return '#'.repeat(depth);

    case 'one':
    case 'lib':
      return '*';
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZGVycy9tYWtlV2lraVRvcC5qcyJdLCJuYW1lcyI6WyJtYWtlV2lraVRvcCIsInRvcFJhdyIsIndpa2lzIiwibGFzdFVwZGF0ZSIsIndpa2lMaXN0MCIsIm1ha2VMaXN0Iiwid2lraUxpc3QiLCJpIiwibGVuZ3RoIiwidHlwZSIsInB1c2giLCJjb250ZW50IiwibWFwIiwiZWwiLCJ0aXRsZSIsInBlcm1hbGluayIsIm1hcmsiLCJkZXB0aCIsImpvaW4iLCJyZXBsYWNlIiwid2lraSIsImNoaWxkIiwiZm9yRWFjaCIsInJlcGVhdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBRWUsU0FBU0EsV0FBVCxDQUFzQkMsTUFBdEIsRUFBOEJDLEtBQTlCLEVBQXFDQyxVQUFyQyxFQUFpRDtBQUM5RCxRQUFNQyxTQUFTLEdBQUcsRUFBbEI7QUFDQUYsRUFBQUEsS0FBSyxHQUFHRyxRQUFRLENBQUNILEtBQUQsRUFBUUUsU0FBUixDQUFoQjtBQUNBLFFBQU1FLFFBQVEsR0FBRyxDQUFDRixTQUFTLENBQUMsQ0FBRCxDQUFWLENBQWpCOztBQUNBLE9BQUssSUFBSUcsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0gsU0FBUyxDQUFDSSxNQUE5QixFQUFzQ0QsQ0FBQyxFQUF2QyxFQUEyQztBQUN6QyxRQUFJSCxTQUFTLENBQUNHLENBQUMsR0FBRyxDQUFMLENBQVQsQ0FBaUJFLElBQWpCLEtBQTBCLEtBQTFCLElBQW1DTCxTQUFTLENBQUNHLENBQUQsQ0FBVCxDQUFhRSxJQUFiLEtBQXNCLEtBQTdELEVBQW1FLENBQW5FLEtBQ0s7QUFDSEgsTUFBQUEsUUFBUSxDQUFDSSxJQUFULENBQWMsTUFBZDtBQUNEO0FBQ0RKLElBQUFBLFFBQVEsQ0FBQ0ksSUFBVCxDQUFjTixTQUFTLENBQUNHLENBQUQsQ0FBdkI7QUFDRDs7QUFDRCxRQUFNSSxPQUFPLEdBQUdMLFFBQVEsQ0FBQ00sR0FBVCxDQUFhQyxFQUFFLElBQUk7QUFDakMsUUFBSUEsRUFBRSxLQUFLLE1BQVgsRUFBbUI7QUFDakIsYUFBTyxFQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsWUFBTUMsS0FBSyxHQUFHRCxFQUFFLENBQUNFLFNBQUgsR0FDVCxJQUFHLHNCQUFTRixFQUFFLENBQUNDLEtBQVosQ0FBbUIsU0FBUSx5QkFBWUQsRUFBRSxDQUFDRSxTQUFmLENBQTBCLHNCQUQvQyxHQUVWLHNCQUFTRixFQUFFLENBQUNDLEtBQVosQ0FGSjtBQUdBLGFBQU9FLElBQUksQ0FBQ0gsRUFBRSxDQUFDSSxLQUFKLEVBQVdKLEVBQUUsQ0FBQ0osSUFBZCxDQUFKLEdBQTBCLEdBQTFCLEdBQWdDSyxLQUF2QztBQUNEO0FBQ0YsR0FUZSxFQVNiSSxJQVRhLENBU1IsSUFUUSxDQUFoQjtBQVVBLFNBQU9qQixNQUFNLENBQ1ZrQixPQURJLENBQ0ksZ0JBREosRUFDc0JSLE9BRHRCLEVBRUpRLE9BRkksQ0FFSSxvQkFGSixFQUUwQixzQkFBU2hCLFVBQVQsQ0FGMUIsQ0FBUDtBQUdELEMsQ0FFRDs7O0FBQ0EsU0FBU0UsUUFBVCxDQUFtQkgsS0FBbkIsRUFBMEJJLFFBQTFCLEVBQW9DVyxLQUFLLEdBQUcsQ0FBNUMsRUFBK0M7QUFDN0MsTUFBSUEsS0FBSixFQUFXO0FBQ1RYLElBQUFBLFFBQVEsQ0FBQ0ksSUFBVCxDQUFjO0FBQ1pPLE1BQUFBLEtBRFk7QUFFWlIsTUFBQUEsSUFBSSxFQUFFUCxLQUFLLENBQUNPLElBRkE7QUFHWkssTUFBQUEsS0FBSyxFQUFFWixLQUFLLENBQUNZLEtBSEQ7QUFJWkMsTUFBQUEsU0FBUyxFQUFFYixLQUFLLENBQUNrQixJQUFOLElBQWNsQixLQUFLLENBQUNhO0FBSm5CLEtBQWQ7QUFNRDs7QUFDRCxNQUFJYixLQUFLLENBQUNtQixLQUFWLEVBQWlCO0FBQ2ZuQixJQUFBQSxLQUFLLENBQUNtQixLQUFOLENBQVlDLE9BQVosQ0FBb0JELEtBQUssSUFBSTtBQUMzQmhCLE1BQUFBLFFBQVEsQ0FBQ2dCLEtBQUQsRUFBUWYsUUFBUixFQUFrQlcsS0FBSyxHQUFHLENBQTFCLENBQVI7QUFDRCxLQUZEO0FBR0Q7QUFDRjs7QUFFRCxTQUFTRCxJQUFULENBQWVDLEtBQWYsRUFBc0JSLElBQXRCLEVBQTRCO0FBQzFCLFVBQVFBLElBQVI7QUFDRSxTQUFLLEtBQUw7QUFDRSxhQUFPLElBQUljLE1BQUosQ0FBV04sS0FBWCxDQUFQOztBQUNGLFNBQUssS0FBTDtBQUNBLFNBQUssS0FBTDtBQUNFLGFBQU8sR0FBUDtBQUxKO0FBT0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtZEVzY2FwZSwgcXVvdGVFc2NhcGUgfSBmcm9tICcuLi9oZWxwZXJzL2VzY2FwZSdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFrZVdpa2lUb3AgKHRvcFJhdywgd2lraXMsIGxhc3RVcGRhdGUpIHtcbiAgY29uc3Qgd2lraUxpc3QwID0gW11cbiAgd2lraXMgPSBtYWtlTGlzdCh3aWtpcywgd2lraUxpc3QwKVxuICBjb25zdCB3aWtpTGlzdCA9IFt3aWtpTGlzdDBbMF1dXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgd2lraUxpc3QwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHdpa2lMaXN0MFtpIC0gMV0udHlwZSAhPT0gJ2RpcicgJiYgd2lraUxpc3QwW2ldLnR5cGUgIT09ICdkaXInKTtcbiAgICBlbHNlIHtcbiAgICAgIHdpa2lMaXN0LnB1c2goJ2xpbmUnKVxuICAgIH1cbiAgICB3aWtpTGlzdC5wdXNoKHdpa2lMaXN0MFtpXSlcbiAgfVxuICBjb25zdCBjb250ZW50ID0gd2lraUxpc3QubWFwKGVsID0+IHtcbiAgICBpZiAoZWwgPT09ICdsaW5lJykge1xuICAgICAgcmV0dXJuICcnXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHRpdGxlID0gZWwucGVybWFsaW5rXG4gICAgICAgID8gYFske21kRXNjYXBlKGVsLnRpdGxlKX1dKHt7IFwiJHtxdW90ZUVzY2FwZShlbC5wZXJtYWxpbmspfVwiIHwgcmVsYXRpdmVfdXJsIH19KWBcbiAgICAgICAgOiBtZEVzY2FwZShlbC50aXRsZSlcbiAgICAgIHJldHVybiBtYXJrKGVsLmRlcHRoLCBlbC50eXBlKSArICcgJyArIHRpdGxlXG4gICAgfVxuICB9KS5qb2luKCdcXG4nKVxuICByZXR1cm4gdG9wUmF3XG4gICAgLnJlcGxhY2UoLyMjI2NvbnRlbnQjIyMvZywgY29udGVudClcbiAgICAucmVwbGFjZSgvIyMjbGFzdF91cGRhdGUjIyMvZywgbWRFc2NhcGUobGFzdFVwZGF0ZSkpXG59XG5cbi8vIGRmc1xuZnVuY3Rpb24gbWFrZUxpc3QgKHdpa2lzLCB3aWtpTGlzdCwgZGVwdGggPSAwKSB7XG4gIGlmIChkZXB0aCkge1xuICAgIHdpa2lMaXN0LnB1c2goe1xuICAgICAgZGVwdGgsXG4gICAgICB0eXBlOiB3aWtpcy50eXBlLFxuICAgICAgdGl0bGU6IHdpa2lzLnRpdGxlLFxuICAgICAgcGVybWFsaW5rOiB3aWtpcy53aWtpICYmIHdpa2lzLnBlcm1hbGluayxcbiAgICB9KVxuICB9XG4gIGlmICh3aWtpcy5jaGlsZCkge1xuICAgIHdpa2lzLmNoaWxkLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgbWFrZUxpc3QoY2hpbGQsIHdpa2lMaXN0LCBkZXB0aCArIDEpXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrIChkZXB0aCwgdHlwZSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdkaXInOlxuICAgICAgcmV0dXJuICcjJy5yZXBlYXQoZGVwdGgpXG4gICAgY2FzZSAnb25lJzpcbiAgICBjYXNlICdsaWInOlxuICAgICAgcmV0dXJuICcqJ1xuICB9XG59XG4iXX0=