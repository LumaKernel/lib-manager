'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = makeWikiTop;

require('source-map-support/register');

var _escape = require('../helpers/escape');

function makeWikiTop(topRaw, wikis, lastUpdate) {
  const wikiList0 = [];
  wikis = makeList(wikis, wikiList0);
  const wikiList = [wikiList0[0]];
  for (let i = 1; i < wikiList0.length; i++) {
    if (wikiList0[i - 1].type !== 'dir' && wikiList0[i].type !== 'dir') ;else {
      wikiList.push('line');
    }
    wikiList.push(wikiList0[i]);
  }
  const content = wikiList.map(el => {
    if (el === 'line') {
      return '';
    } else {
      const title = el.permalink ? `[${(0, _escape.mdEscape)(el.title)}]({{ "${(0, _escape.quoteEscape)(el.permalink)}" | relative_url }})` : (0, _escape.mdEscape)(el.title);
      return mark(el.depth, el.type) + ' ' + title;
    }
  }).join('\n');
  return topRaw.replace(/###content###/g, content).replace(/###last_update###/g, (0, _escape.mdEscape)(lastUpdate));
}

// dfs
function makeList(wikis, wikiList, depth = 0) {
  if (depth) {
    wikiList.push({
      depth,
      type: wikis.type,
      title: wikis.title,
      permalink: wikis.wiki && wikis.permalink
    });
  }
  if (wikis.child) {
    wikis.child.forEach(child => {
      makeList(child, wikiList, depth + 1);
    });
  }
}

function mark(depth, type) {
  switch (type) {
    case 'dir':
      return '#'.repeat(depth);
    case 'one':
    case 'lib':
      return '*';
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZGVycy9tYWtlV2lraVRvcC5qcyJdLCJuYW1lcyI6WyJtYWtlV2lraVRvcCIsInRvcFJhdyIsIndpa2lzIiwibGFzdFVwZGF0ZSIsIndpa2lMaXN0MCIsIm1ha2VMaXN0Iiwid2lraUxpc3QiLCJpIiwibGVuZ3RoIiwidHlwZSIsInB1c2giLCJjb250ZW50IiwibWFwIiwiZWwiLCJ0aXRsZSIsInBlcm1hbGluayIsIm1hcmsiLCJkZXB0aCIsImpvaW4iLCJyZXBsYWNlIiwid2lraSIsImNoaWxkIiwiZm9yRWFjaCIsInJlcGVhdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBRXdCQSxXOzs7O0FBRnhCOztBQUVlLFNBQVNBLFdBQVQsQ0FBc0JDLE1BQXRCLEVBQThCQyxLQUE5QixFQUFxQ0MsVUFBckMsRUFBaUQ7QUFDOUQsUUFBTUMsWUFBWSxFQUFsQjtBQUNBRixVQUFRRyxTQUFTSCxLQUFULEVBQWdCRSxTQUFoQixDQUFSO0FBQ0EsUUFBTUUsV0FBVyxDQUFDRixVQUFVLENBQVYsQ0FBRCxDQUFqQjtBQUNBLE9BQUssSUFBSUcsSUFBSSxDQUFiLEVBQWdCQSxJQUFJSCxVQUFVSSxNQUE5QixFQUFzQ0QsR0FBdEMsRUFBMkM7QUFDekMsUUFBSUgsVUFBVUcsSUFBSSxDQUFkLEVBQWlCRSxJQUFqQixLQUEwQixLQUExQixJQUFtQ0wsVUFBVUcsQ0FBVixFQUFhRSxJQUFiLEtBQXNCLEtBQTdELEVBQW1FLENBQW5FLEtBQ0s7QUFDSEgsZUFBU0ksSUFBVCxDQUFjLE1BQWQ7QUFDRDtBQUNESixhQUFTSSxJQUFULENBQWNOLFVBQVVHLENBQVYsQ0FBZDtBQUNEO0FBQ0QsUUFBTUksVUFBVUwsU0FBU00sR0FBVCxDQUFhQyxNQUFNO0FBQ2pDLFFBQUlBLE9BQU8sTUFBWCxFQUFtQjtBQUNqQixhQUFPLEVBQVA7QUFDRCxLQUZELE1BRU87QUFDTCxZQUFNQyxRQUFRRCxHQUFHRSxTQUFILEdBQ1QsSUFBRyxzQkFBU0YsR0FBR0MsS0FBWixDQUFtQixTQUFRLHlCQUFZRCxHQUFHRSxTQUFmLENBQTBCLHNCQUQvQyxHQUVWLHNCQUFTRixHQUFHQyxLQUFaLENBRko7QUFHQSxhQUFPRSxLQUFLSCxHQUFHSSxLQUFSLEVBQWVKLEdBQUdKLElBQWxCLElBQTBCLEdBQTFCLEdBQWdDSyxLQUF2QztBQUNEO0FBQ0YsR0FUZSxFQVNiSSxJQVRhLENBU1IsSUFUUSxDQUFoQjtBQVVBLFNBQU9qQixPQUNKa0IsT0FESSxDQUNJLGdCQURKLEVBQ3NCUixPQUR0QixFQUVKUSxPQUZJLENBRUksb0JBRkosRUFFMEIsc0JBQVNoQixVQUFULENBRjFCLENBQVA7QUFHRDs7QUFFRDtBQUNBLFNBQVNFLFFBQVQsQ0FBbUJILEtBQW5CLEVBQTBCSSxRQUExQixFQUFvQ1csUUFBUSxDQUE1QyxFQUErQztBQUM3QyxNQUFJQSxLQUFKLEVBQVc7QUFDVFgsYUFBU0ksSUFBVCxDQUFjO0FBQ1pPLFdBRFk7QUFFWlIsWUFBTVAsTUFBTU8sSUFGQTtBQUdaSyxhQUFPWixNQUFNWSxLQUhEO0FBSVpDLGlCQUFXYixNQUFNa0IsSUFBTixJQUFjbEIsTUFBTWE7QUFKbkIsS0FBZDtBQU1EO0FBQ0QsTUFBSWIsTUFBTW1CLEtBQVYsRUFBaUI7QUFDZm5CLFVBQU1tQixLQUFOLENBQVlDLE9BQVosQ0FBb0JELFNBQVM7QUFDM0JoQixlQUFTZ0IsS0FBVCxFQUFnQmYsUUFBaEIsRUFBMEJXLFFBQVEsQ0FBbEM7QUFDRCxLQUZEO0FBR0Q7QUFDRjs7QUFFRCxTQUFTRCxJQUFULENBQWVDLEtBQWYsRUFBc0JSLElBQXRCLEVBQTRCO0FBQzFCLFVBQVFBLElBQVI7QUFDRSxTQUFLLEtBQUw7QUFDRSxhQUFPLElBQUljLE1BQUosQ0FBV04sS0FBWCxDQUFQO0FBQ0YsU0FBSyxLQUFMO0FBQ0EsU0FBSyxLQUFMO0FBQ0UsYUFBTyxHQUFQO0FBTEo7QUFPRCIsImZpbGUiOiJtYWtlV2lraVRvcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1kRXNjYXBlLCBxdW90ZUVzY2FwZSB9IGZyb20gJy4uL2hlbHBlcnMvZXNjYXBlJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYWtlV2lraVRvcCAodG9wUmF3LCB3aWtpcywgbGFzdFVwZGF0ZSkge1xuICBjb25zdCB3aWtpTGlzdDAgPSBbXVxuICB3aWtpcyA9IG1ha2VMaXN0KHdpa2lzLCB3aWtpTGlzdDApXG4gIGNvbnN0IHdpa2lMaXN0ID0gW3dpa2lMaXN0MFswXV1cbiAgZm9yIChsZXQgaSA9IDE7IGkgPCB3aWtpTGlzdDAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAod2lraUxpc3QwW2kgLSAxXS50eXBlICE9PSAnZGlyJyAmJiB3aWtpTGlzdDBbaV0udHlwZSAhPT0gJ2RpcicpO1xuICAgIGVsc2Uge1xuICAgICAgd2lraUxpc3QucHVzaCgnbGluZScpXG4gICAgfVxuICAgIHdpa2lMaXN0LnB1c2god2lraUxpc3QwW2ldKVxuICB9XG4gIGNvbnN0IGNvbnRlbnQgPSB3aWtpTGlzdC5tYXAoZWwgPT4ge1xuICAgIGlmIChlbCA9PT0gJ2xpbmUnKSB7XG4gICAgICByZXR1cm4gJydcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdGl0bGUgPSBlbC5wZXJtYWxpbmtcbiAgICAgICAgPyBgWyR7bWRFc2NhcGUoZWwudGl0bGUpfV0oe3sgXCIke3F1b3RlRXNjYXBlKGVsLnBlcm1hbGluayl9XCIgfCByZWxhdGl2ZV91cmwgfX0pYFxuICAgICAgICA6IG1kRXNjYXBlKGVsLnRpdGxlKVxuICAgICAgcmV0dXJuIG1hcmsoZWwuZGVwdGgsIGVsLnR5cGUpICsgJyAnICsgdGl0bGVcbiAgICB9XG4gIH0pLmpvaW4oJ1xcbicpXG4gIHJldHVybiB0b3BSYXdcbiAgICAucmVwbGFjZSgvIyMjY29udGVudCMjIy9nLCBjb250ZW50KVxuICAgIC5yZXBsYWNlKC8jIyNsYXN0X3VwZGF0ZSMjIy9nLCBtZEVzY2FwZShsYXN0VXBkYXRlKSlcbn1cblxuLy8gZGZzXG5mdW5jdGlvbiBtYWtlTGlzdCAod2lraXMsIHdpa2lMaXN0LCBkZXB0aCA9IDApIHtcbiAgaWYgKGRlcHRoKSB7XG4gICAgd2lraUxpc3QucHVzaCh7XG4gICAgICBkZXB0aCxcbiAgICAgIHR5cGU6IHdpa2lzLnR5cGUsXG4gICAgICB0aXRsZTogd2lraXMudGl0bGUsXG4gICAgICBwZXJtYWxpbms6IHdpa2lzLndpa2kgJiYgd2lraXMucGVybWFsaW5rLFxuICAgIH0pXG4gIH1cbiAgaWYgKHdpa2lzLmNoaWxkKSB7XG4gICAgd2lraXMuY2hpbGQuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBtYWtlTGlzdChjaGlsZCwgd2lraUxpc3QsIGRlcHRoICsgMSlcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmsgKGRlcHRoLCB0eXBlKSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ2Rpcic6XG4gICAgICByZXR1cm4gJyMnLnJlcGVhdChkZXB0aClcbiAgICBjYXNlICdvbmUnOlxuICAgIGNhc2UgJ2xpYic6XG4gICAgICByZXR1cm4gJyonXG4gIH1cbn1cbiJdfQ==