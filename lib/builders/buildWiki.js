'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildWiki = buildWiki;

require('source-map-support/register');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _makeWikiTop = require('./makeWikiTop');

var _makeWikiTop2 = _interopRequireDefault(_makeWikiTop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const { resolve } = _path2.default;
const { readFileSync, writeFileSync, mkdirsSync } = _fsExtra2.default;

const dateFormat = 'YYYY-MM-DD';
const libmanPrefix = 'libman_auto_generated_';

const seqnumGen = function* () {
  let i = 1;
  while (1) yield i++;
};

function buildWiki(config, project) {
  // 指定ディレクトリにwiki.mdを展開していくだけ
  const src = resolve(process.cwd(), config.WorkingDir, config.SrcDir);
  const dist = resolve(process.cwd(), config.WorkingDir, config.DistDir);
  const dir = resolve(dist, 'wiki');
  if (!(0, _fsExtra.existsSync)(resolve(src, 'top.md'))) throw `top.md not found`;
  mkdirsSync(dir);
  const wikiTop = (0, _makeWikiTop2.default)(readFileSync(resolve(src, 'top.md')).toString(), project.wikis, (0, _moment2.default)().format(dateFormat));
  writeFileSync(resolve(dir, 'top.md'), wikiTop);
  const seqnum = seqnumGen();
  writeWikis(dir, project.wikis, seqnum);
}

function writeWikis(dir, wikis, seqnum) {
  if (wikis.wiki) {
    writeFileSync(resolve(dir, libmanPrefix + seqnum.next().value + '_' + Math.random().toString(36).slice(-8) + '.md'), wikis.wiki);
  }
  if (wikis.child) {
    wikis.child.forEach(child => {
      writeWikis(dir, child, seqnum);
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZGVycy9idWlsZFdpa2kuanMiXSwibmFtZXMiOlsiYnVpbGRXaWtpIiwicmVzb2x2ZSIsInBhdGgiLCJyZWFkRmlsZVN5bmMiLCJ3cml0ZUZpbGVTeW5jIiwibWtkaXJzU3luYyIsImZzIiwiZGF0ZUZvcm1hdCIsImxpYm1hblByZWZpeCIsInNlcW51bUdlbiIsImkiLCJjb25maWciLCJwcm9qZWN0Iiwic3JjIiwicHJvY2VzcyIsImN3ZCIsIldvcmtpbmdEaXIiLCJTcmNEaXIiLCJkaXN0IiwiRGlzdERpciIsImRpciIsIndpa2lUb3AiLCJ0b1N0cmluZyIsIndpa2lzIiwiZm9ybWF0Iiwic2VxbnVtIiwid3JpdGVXaWtpcyIsIndpa2kiLCJuZXh0IiwidmFsdWUiLCJNYXRoIiwicmFuZG9tIiwic2xpY2UiLCJjaGlsZCIsImZvckVhY2giXSwibWFwcGluZ3MiOiI7Ozs7O1FBZWdCQSxTLEdBQUFBLFM7Ozs7QUFmaEI7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUNBLE1BQU0sRUFBRUMsT0FBRixLQUFjQyxjQUFwQjtBQUNBLE1BQU0sRUFBRUMsWUFBRixFQUFnQkMsYUFBaEIsRUFBK0JDLFVBQS9CLEtBQThDQyxpQkFBcEQ7O0FBRUEsTUFBTUMsYUFBYSxZQUFuQjtBQUNBLE1BQU1DLGVBQWUsd0JBQXJCOztBQUVBLE1BQU1DLFlBQVksYUFBYztBQUM5QixNQUFJQyxJQUFJLENBQVI7QUFDQSxTQUFPLENBQVAsRUFBVSxNQUFNQSxHQUFOO0FBQ1gsQ0FIRDs7QUFLTyxTQUFTVixTQUFULENBQW9CVyxNQUFwQixFQUE0QkMsT0FBNUIsRUFBcUM7QUFDMUM7QUFDQSxRQUFNQyxNQUFNWixRQUFRYSxRQUFRQyxHQUFSLEVBQVIsRUFBdUJKLE9BQU9LLFVBQTlCLEVBQTBDTCxPQUFPTSxNQUFqRCxDQUFaO0FBQ0EsUUFBTUMsT0FBT2pCLFFBQVFhLFFBQVFDLEdBQVIsRUFBUixFQUF1QkosT0FBT0ssVUFBOUIsRUFBMENMLE9BQU9RLE9BQWpELENBQWI7QUFDQSxRQUFNQyxNQUFNbkIsUUFBUWlCLElBQVIsRUFBYyxNQUFkLENBQVo7QUFDQSxNQUFJLENBQUMseUJBQVdqQixRQUFRWSxHQUFSLEVBQWEsUUFBYixDQUFYLENBQUwsRUFBeUMsTUFBTyxrQkFBUDtBQUN6Q1IsYUFBV2UsR0FBWDtBQUNBLFFBQU1DLFVBQVUsMkJBQ2RsQixhQUFhRixRQUFRWSxHQUFSLEVBQWEsUUFBYixDQUFiLEVBQXFDUyxRQUFyQyxFQURjLEVBRWRWLFFBQVFXLEtBRk0sRUFHZCx3QkFBU0MsTUFBVCxDQUFnQmpCLFVBQWhCLENBSGMsQ0FBaEI7QUFJQUgsZ0JBQWNILFFBQVFtQixHQUFSLEVBQWEsUUFBYixDQUFkLEVBQXNDQyxPQUF0QztBQUNBLFFBQU1JLFNBQVNoQixXQUFmO0FBQ0FpQixhQUFXTixHQUFYLEVBQWdCUixRQUFRVyxLQUF4QixFQUErQkUsTUFBL0I7QUFDRDs7QUFFRCxTQUFTQyxVQUFULENBQXFCTixHQUFyQixFQUEwQkcsS0FBMUIsRUFBaUNFLE1BQWpDLEVBQXlDO0FBQ3ZDLE1BQUlGLE1BQU1JLElBQVYsRUFBZ0I7QUFDZHZCLGtCQUFjSCxRQUFRbUIsR0FBUixFQUNaWixlQUFlaUIsT0FBT0csSUFBUCxHQUFjQyxLQUE3QixHQUFxQyxHQUFyQyxHQUNDQyxLQUFLQyxNQUFMLEdBQWNULFFBQWQsQ0FBdUIsRUFBdkIsRUFBMkJVLEtBQTNCLENBQWlDLENBQUMsQ0FBbEMsQ0FERCxHQUN3QyxLQUY1QixDQUFkLEVBRWtEVCxNQUFNSSxJQUZ4RDtBQUdEO0FBQ0QsTUFBSUosTUFBTVUsS0FBVixFQUFpQjtBQUNmVixVQUFNVSxLQUFOLENBQVlDLE9BQVosQ0FBb0JELFNBQVM7QUFDM0JQLGlCQUFXTixHQUFYLEVBQWdCYSxLQUFoQixFQUF1QlIsTUFBdkI7QUFDRCxLQUZEO0FBR0Q7QUFDRiIsImZpbGUiOiJidWlsZFdpa2kuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMsIHsgZXhpc3RzU3luYyB9IGZyb20gJ2ZzLWV4dHJhJ1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IG1ha2VXaWtpVG9wIGZyb20gJy4vbWFrZVdpa2lUb3AnXG5jb25zdCB7IHJlc29sdmUgfSA9IHBhdGhcbmNvbnN0IHsgcmVhZEZpbGVTeW5jLCB3cml0ZUZpbGVTeW5jLCBta2RpcnNTeW5jIH0gPSBmc1xuXG5jb25zdCBkYXRlRm9ybWF0ID0gJ1lZWVktTU0tREQnXG5jb25zdCBsaWJtYW5QcmVmaXggPSAnbGlibWFuX2F1dG9fZ2VuZXJhdGVkXydcblxuY29uc3Qgc2VxbnVtR2VuID0gZnVuY3Rpb24gKiAoKSB7XG4gIGxldCBpID0gMVxuICB3aGlsZSAoMSkgeWllbGQgaSsrXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFdpa2kgKGNvbmZpZywgcHJvamVjdCkge1xuICAvLyDmjIflrprjg4fjgqPjg6zjgq/jg4jjg6rjgat3aWtpLm1k44KS5bGV6ZaL44GX44Gm44GE44GP44Gg44GRXG4gIGNvbnN0IHNyYyA9IHJlc29sdmUocHJvY2Vzcy5jd2QoKSwgY29uZmlnLldvcmtpbmdEaXIsIGNvbmZpZy5TcmNEaXIpXG4gIGNvbnN0IGRpc3QgPSByZXNvbHZlKHByb2Nlc3MuY3dkKCksIGNvbmZpZy5Xb3JraW5nRGlyLCBjb25maWcuRGlzdERpcilcbiAgY29uc3QgZGlyID0gcmVzb2x2ZShkaXN0LCAnd2lraScpXG4gIGlmICghZXhpc3RzU3luYyhyZXNvbHZlKHNyYywgJ3RvcC5tZCcpKSkgdGhyb3cgYHRvcC5tZCBub3QgZm91bmRgXG4gIG1rZGlyc1N5bmMoZGlyKVxuICBjb25zdCB3aWtpVG9wID0gbWFrZVdpa2lUb3AoXG4gICAgcmVhZEZpbGVTeW5jKHJlc29sdmUoc3JjLCAndG9wLm1kJykpLnRvU3RyaW5nKCksXG4gICAgcHJvamVjdC53aWtpcyxcbiAgICBtb21lbnQoKS5mb3JtYXQoZGF0ZUZvcm1hdCkpXG4gIHdyaXRlRmlsZVN5bmMocmVzb2x2ZShkaXIsICd0b3AubWQnKSwgd2lraVRvcClcbiAgY29uc3Qgc2VxbnVtID0gc2VxbnVtR2VuKClcbiAgd3JpdGVXaWtpcyhkaXIsIHByb2plY3Qud2lraXMsIHNlcW51bSlcbn1cblxuZnVuY3Rpb24gd3JpdGVXaWtpcyAoZGlyLCB3aWtpcywgc2VxbnVtKSB7XG4gIGlmICh3aWtpcy53aWtpKSB7XG4gICAgd3JpdGVGaWxlU3luYyhyZXNvbHZlKGRpcixcbiAgICAgIGxpYm1hblByZWZpeCArIHNlcW51bS5uZXh0KCkudmFsdWUgKyAnXycgK1xuICAgICAgIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKC04KSArICcubWQnKSwgd2lraXMud2lraSlcbiAgfVxuICBpZiAod2lraXMuY2hpbGQpIHtcbiAgICB3aWtpcy5jaGlsZC5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgIHdyaXRlV2lraXMoZGlyLCBjaGlsZCwgc2VxbnVtKVxuICAgIH0pXG4gIH1cbn1cbiJdfQ==