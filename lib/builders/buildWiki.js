"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildWiki = buildWiki;

require("source-map-support/register");

var _fsExtra = _interopRequireWildcard(require("fs-extra"));

var _moment = _interopRequireDefault(require("moment"));

var _path = _interopRequireDefault(require("path"));

var _makeWikiTop = _interopRequireDefault(require("./makeWikiTop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const {
  resolve
} = _path.default;
const {
  readFileSync,
  writeFileSync,
  mkdirsSync
} = _fsExtra.default;
const dateFormat = 'YYYY-MM-DD';
const libmanPrefix = 'libman_auto_generated_';

const seqnumGen = function* () {
  let i = 1;

  while (1) yield i++;
};

function buildWiki(config, project) {
  // 指定ディレクトリにwiki.mdを展開していくだけ
  const src = resolve(process.cwd(), config.WorkingDir, config.SrcDir);
  const dist = resolve(process.cwd(), config.WorkingDir, config.DistDir);
  const dir = resolve(dist, 'wiki');
  if (!(0, _fsExtra.existsSync)(resolve(src, 'index.md'))) throw `index.md not found`;
  mkdirsSync(dir);
  const wikiTop = (0, _makeWikiTop.default)(readFileSync(resolve(src, 'index.md')).toString(), project.wikis, (0, _moment.default)().format(dateFormat));
  writeFileSync(resolve(dir, 'index.md'), wikiTop);
  const seqnum = seqnumGen();
  writeWikis(dir, project.wikis, seqnum);
}

function writeWikis(dir, wikis, seqnum) {
  if (wikis.wiki) {
    writeFileSync(resolve(dir, libmanPrefix + seqnum.next().value + '_' + Math.random().toString(36).slice(-8) + '.md'), wikis.wiki);
  }

  if (wikis.child) {
    wikis.child.forEach(child => {
      writeWikis(dir, child, seqnum);
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZGVycy9idWlsZFdpa2kuanMiXSwibmFtZXMiOlsicmVzb2x2ZSIsInBhdGgiLCJyZWFkRmlsZVN5bmMiLCJ3cml0ZUZpbGVTeW5jIiwibWtkaXJzU3luYyIsImZzIiwiZGF0ZUZvcm1hdCIsImxpYm1hblByZWZpeCIsInNlcW51bUdlbiIsImkiLCJidWlsZFdpa2kiLCJjb25maWciLCJwcm9qZWN0Iiwic3JjIiwicHJvY2VzcyIsImN3ZCIsIldvcmtpbmdEaXIiLCJTcmNEaXIiLCJkaXN0IiwiRGlzdERpciIsImRpciIsIndpa2lUb3AiLCJ0b1N0cmluZyIsIndpa2lzIiwiZm9ybWF0Iiwic2VxbnVtIiwid3JpdGVXaWtpcyIsIndpa2kiLCJuZXh0IiwidmFsdWUiLCJNYXRoIiwicmFuZG9tIiwic2xpY2UiLCJjaGlsZCIsImZvckVhY2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7QUFDQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBY0MsYUFBcEI7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLFlBQUY7QUFBZ0JDLEVBQUFBLGFBQWhCO0FBQStCQyxFQUFBQTtBQUEvQixJQUE4Q0MsZ0JBQXBEO0FBRUEsTUFBTUMsVUFBVSxHQUFHLFlBQW5CO0FBQ0EsTUFBTUMsWUFBWSxHQUFHLHdCQUFyQjs7QUFFQSxNQUFNQyxTQUFTLEdBQUcsYUFBYztBQUM5QixNQUFJQyxDQUFDLEdBQUcsQ0FBUjs7QUFDQSxTQUFPLENBQVAsRUFBVSxNQUFNQSxDQUFDLEVBQVA7QUFDWCxDQUhEOztBQUtPLFNBQVNDLFNBQVQsQ0FBb0JDLE1BQXBCLEVBQTRCQyxPQUE1QixFQUFxQztBQUMxQztBQUNBLFFBQU1DLEdBQUcsR0FBR2IsT0FBTyxDQUFDYyxPQUFPLENBQUNDLEdBQVIsRUFBRCxFQUFnQkosTUFBTSxDQUFDSyxVQUF2QixFQUFtQ0wsTUFBTSxDQUFDTSxNQUExQyxDQUFuQjtBQUNBLFFBQU1DLElBQUksR0FBR2xCLE9BQU8sQ0FBQ2MsT0FBTyxDQUFDQyxHQUFSLEVBQUQsRUFBZ0JKLE1BQU0sQ0FBQ0ssVUFBdkIsRUFBbUNMLE1BQU0sQ0FBQ1EsT0FBMUMsQ0FBcEI7QUFDQSxRQUFNQyxHQUFHLEdBQUdwQixPQUFPLENBQUNrQixJQUFELEVBQU8sTUFBUCxDQUFuQjtBQUNBLE1BQUksQ0FBQyx5QkFBV2xCLE9BQU8sQ0FBQ2EsR0FBRCxFQUFNLFVBQU4sQ0FBbEIsQ0FBTCxFQUEyQyxNQUFPLG9CQUFQO0FBQzNDVCxFQUFBQSxVQUFVLENBQUNnQixHQUFELENBQVY7QUFDQSxRQUFNQyxPQUFPLEdBQUcsMEJBQ2RuQixZQUFZLENBQUNGLE9BQU8sQ0FBQ2EsR0FBRCxFQUFNLFVBQU4sQ0FBUixDQUFaLENBQXVDUyxRQUF2QyxFQURjLEVBRWRWLE9BQU8sQ0FBQ1csS0FGTSxFQUdkLHVCQUFTQyxNQUFULENBQWdCbEIsVUFBaEIsQ0FIYyxDQUFoQjtBQUlBSCxFQUFBQSxhQUFhLENBQUNILE9BQU8sQ0FBQ29CLEdBQUQsRUFBTSxVQUFOLENBQVIsRUFBMkJDLE9BQTNCLENBQWI7QUFDQSxRQUFNSSxNQUFNLEdBQUdqQixTQUFTLEVBQXhCO0FBQ0FrQixFQUFBQSxVQUFVLENBQUNOLEdBQUQsRUFBTVIsT0FBTyxDQUFDVyxLQUFkLEVBQXFCRSxNQUFyQixDQUFWO0FBQ0Q7O0FBRUQsU0FBU0MsVUFBVCxDQUFxQk4sR0FBckIsRUFBMEJHLEtBQTFCLEVBQWlDRSxNQUFqQyxFQUF5QztBQUN2QyxNQUFJRixLQUFLLENBQUNJLElBQVYsRUFBZ0I7QUFDZHhCLElBQUFBLGFBQWEsQ0FBQ0gsT0FBTyxDQUFDb0IsR0FBRCxFQUNuQmIsWUFBWSxHQUFHa0IsTUFBTSxDQUFDRyxJQUFQLEdBQWNDLEtBQTdCLEdBQXFDLEdBQXJDLEdBQ0NDLElBQUksQ0FBQ0MsTUFBTCxHQUFjVCxRQUFkLENBQXVCLEVBQXZCLEVBQTJCVSxLQUEzQixDQUFpQyxDQUFDLENBQWxDLENBREQsR0FDd0MsS0FGckIsQ0FBUixFQUVxQ1QsS0FBSyxDQUFDSSxJQUYzQyxDQUFiO0FBR0Q7O0FBQ0QsTUFBSUosS0FBSyxDQUFDVSxLQUFWLEVBQWlCO0FBQ2ZWLElBQUFBLEtBQUssQ0FBQ1UsS0FBTixDQUFZQyxPQUFaLENBQW9CRCxLQUFLLElBQUk7QUFDM0JQLE1BQUFBLFVBQVUsQ0FBQ04sR0FBRCxFQUFNYSxLQUFOLEVBQWFSLE1BQWIsQ0FBVjtBQUNELEtBRkQ7QUFHRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzLCB7IGV4aXN0c1N5bmMgfSBmcm9tICdmcy1leHRyYSdcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnXHJcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXHJcbmltcG9ydCBtYWtlV2lraVRvcCBmcm9tICcuL21ha2VXaWtpVG9wJ1xyXG5jb25zdCB7IHJlc29sdmUgfSA9IHBhdGhcclxuY29uc3QgeyByZWFkRmlsZVN5bmMsIHdyaXRlRmlsZVN5bmMsIG1rZGlyc1N5bmMgfSA9IGZzXHJcblxyXG5jb25zdCBkYXRlRm9ybWF0ID0gJ1lZWVktTU0tREQnXHJcbmNvbnN0IGxpYm1hblByZWZpeCA9ICdsaWJtYW5fYXV0b19nZW5lcmF0ZWRfJ1xyXG5cclxuY29uc3Qgc2VxbnVtR2VuID0gZnVuY3Rpb24gKiAoKSB7XHJcbiAgbGV0IGkgPSAxXHJcbiAgd2hpbGUgKDEpIHlpZWxkIGkrK1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRXaWtpIChjb25maWcsIHByb2plY3QpIHtcclxuICAvLyDmjIflrprjg4fjgqPjg6zjgq/jg4jjg6rjgat3aWtpLm1k44KS5bGV6ZaL44GX44Gm44GE44GP44Gg44GRXHJcbiAgY29uc3Qgc3JjID0gcmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBjb25maWcuV29ya2luZ0RpciwgY29uZmlnLlNyY0RpcilcclxuICBjb25zdCBkaXN0ID0gcmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBjb25maWcuV29ya2luZ0RpciwgY29uZmlnLkRpc3REaXIpXHJcbiAgY29uc3QgZGlyID0gcmVzb2x2ZShkaXN0LCAnd2lraScpXHJcbiAgaWYgKCFleGlzdHNTeW5jKHJlc29sdmUoc3JjLCAnaW5kZXgubWQnKSkpIHRocm93IGBpbmRleC5tZCBub3QgZm91bmRgXHJcbiAgbWtkaXJzU3luYyhkaXIpXHJcbiAgY29uc3Qgd2lraVRvcCA9IG1ha2VXaWtpVG9wKFxyXG4gICAgcmVhZEZpbGVTeW5jKHJlc29sdmUoc3JjLCAnaW5kZXgubWQnKSkudG9TdHJpbmcoKSxcclxuICAgIHByb2plY3Qud2lraXMsXHJcbiAgICBtb21lbnQoKS5mb3JtYXQoZGF0ZUZvcm1hdCkpXHJcbiAgd3JpdGVGaWxlU3luYyhyZXNvbHZlKGRpciwgJ2luZGV4Lm1kJyksIHdpa2lUb3ApXHJcbiAgY29uc3Qgc2VxbnVtID0gc2VxbnVtR2VuKClcclxuICB3cml0ZVdpa2lzKGRpciwgcHJvamVjdC53aWtpcywgc2VxbnVtKVxyXG59XHJcblxyXG5mdW5jdGlvbiB3cml0ZVdpa2lzIChkaXIsIHdpa2lzLCBzZXFudW0pIHtcclxuICBpZiAod2lraXMud2lraSkge1xyXG4gICAgd3JpdGVGaWxlU3luYyhyZXNvbHZlKGRpcixcclxuICAgICAgbGlibWFuUHJlZml4ICsgc2VxbnVtLm5leHQoKS52YWx1ZSArICdfJyArXHJcbiAgICAgICBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgtOCkgKyAnLm1kJyksIHdpa2lzLndpa2kpXHJcbiAgfVxyXG4gIGlmICh3aWtpcy5jaGlsZCkge1xyXG4gICAgd2lraXMuY2hpbGQuZm9yRWFjaChjaGlsZCA9PiB7XHJcbiAgICAgIHdyaXRlV2lraXMoZGlyLCBjaGlsZCwgc2VxbnVtKVxyXG4gICAgfSlcclxuICB9XHJcbn1cclxuIl19